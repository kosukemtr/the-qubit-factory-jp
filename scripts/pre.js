function hexToRGB(e) {
  e = colourNameToHex(e);
  let t = 0,
    i = 0,
    a = 0;
  return (
    4 == e.length
      ? ((t = parseInt(e[1] + e[1], 16)),
        (i = parseInt(e[2] + e[2], 16)),
        (a = parseInt(e[3] + e[3], 16)))
      : 7 == e.length &&
        ((t = parseInt(e[1] + e[2], 16)),
        (i = parseInt(e[3] + e[4], 16)),
        (a = parseInt(e[5] + e[6], 16))),
    { r: t, g: i, b: a }
  );
}
function flashColor(e, t) {
  if (0 === t) return e;
  t = Math.min(t, 1);
  var i = hexToRGB(e);
  return (
    (i.r = i.r + t * (255 - i.r)),
    (i.g = i.g + t * (255 - i.g)),
    (i.b = i.b + t * (255 - i.b)),
    RGBToHex(i.r, i.g, i.b)
  );
}
function RGBToHex(e, t, i) {
  return (
    (e = Math.min(Math.max(Math.round(e), 0), 255).toString(16)),
    (t = Math.min(Math.max(Math.round(t), 0), 255).toString(16)),
    (i = Math.min(Math.max(Math.round(i), 0), 255).toString(16)),
    1 == e.length && (e = "0" + e),
    1 == t.length && (t = "0" + t),
    1 == i.length && (i = "0" + i),
    "#" + e + t + i
  );
}
function colourNameToHex(e) {
  var t = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    "indianred ": "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgrey: "#d3d3d3",
    lightgreen: "#90ee90",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370d8",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#d87093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32",
  };
  return void 0 !== t[e.toLowerCase()] ? t[e.toLowerCase()] : e;
}
function makeOverlayPattern() {
  return "M1652 2034c4 13 8 24 7 39-3 23 15 48 42 42 25-5 32-33 44-52 14-32-33-46-7-78 24-62-93-67-83-6 6 19-9 36-3 55zM870 2050c38-3 25-68-11-54-31 13-22 56 11 54zM978 2057c-43-15-59 61-13 62 39 5 48-53 13-62zM1772 2439c12 9 17 24 27 35 22 22 56-9 38-33-19-14-24-51-45-52-26-2-45 32-20 50zM1563 3062c8 33 64 32 62-6 3-49-74-41-62 6zM1583 2690c3-5 4-11 4-17 0-37-51-37-56 1-2 24-35 38-23 64 9 23 44 26 55 3 7-17 6-37 20-51zM1514 2827c-9 21-24 38-26 61 0 37 54 31 58-1 2-14 11-25 14-38 7-26-28-45-46-22zM24 3308c10-11 14-25 18-38 13-26 15 33 49 23 32-6 19-56-12-49-7-1-20 8-24-2-2-21-5-45-27-54l-28-13v144c10 0 18-4 24-11zM166 959c-38-1-31 58 2 60 30-10 36-59-2-60zM17 2299c-6 0-11 1-17 3v59c43 17 69-55 17-62zM661 2443c-10-21-35-17-34 7 1 31 46 19 34-7zM497 2450c-42 13-15 65 23 55 74 4 54-78-23-55zM624 2743c-21 3-19 35 2 36 31 1 25-39-2-36zM553 2839c34-1 34-55-1-54-35 0-34 54 1 54zM2115 2905c-17 0-34 2-52 0-20-5-36 16-56 8-18-10-36-6-55 2-20 2-20-34-45-41-9-5-5-18-7-27-6-25-34-14-43 3-51 34-62-70-111-57-16 7-28 13-46 9-25-6-43 26-25 46 17 18 12 21-4 36-11 14 6 36 23 30 13-5 26-4 39 2 18 7 34-2 49-11 25-10 35 40 71 17 27-23 43 17 28 38-10 16-28-1-42 0-24-2-36 23-30 39 6 17 23 25 35 38 23 27 46-15 73-15 26-6 15-52 45-48 18 8 41-7 56 6 14 19 46 35 65 14 7-8 12-18 23-22 17-4 28-15 33-32 5-18 37-15 34-37-12-37-37 2-58 2zM2192 2970c-31-19-69 15-49 47 22 26 4 36-23 27-17-4-30 10-39 22-17 10-24-35-50-31-21 2-83 37-53 60 18 9 42 4 59 21 16 16 41 9 62 14 9 2 17-3 24-10 14-29 44-23 57 3 1 23 16 41 40 34 25-2 48 12 74 1 6-1 9 6 12 11 7 20 21 36 33 53 7-17 101-2 71-65-17-18-58-41-83-29-7 2-17 8-22-1-28-70-73 6-96-33-10-69 58 5 69-64 1-14-3-28 3-42 6-13 5-30-6-41-11-10-18-23-26-35-19-25-62-2-50 27 6 15 26 50-7 31zM1008 2800c13-2 33-8 37-21-2-20-11-42-33-46-46-9-53 69-4 67zM1652 3023c10 40 43-3 66 3 37 2 51-50 20-64-18-7-38-14-56-19-49 4-30 49-30 80zM2258 3425c5 18 7 46 33 42 42 6 53-63 11-68-15 0-43 8-44 26zM523 3749c-26-20-60 8-58 34 5 53 63 35 93 17 29-25-16-42-35-51zM2266 3694c23-1 22-36-1-35-24 1-21 36 1 35zM0 2895v74c11-14 18-35 21-51 2-17-8-21-21-23zM578 3721c22-1 23-33 3-36-28-4-30 37-3 36zM2695 3065c-11 13-30 14-43 25-24 18-44 39-60 64-27 35 15 71 49 47 23-10 37 22 60 16 22-2 43-28 28-56-25-30-16-35 17-47 21-8 45 1 66-10 16 1 27 17 44 18 2 0 4 3 4 6-12 31 4 50 29 66 14 14 39 15 48-4 7-10-2-31 13-36 27 2 48-28 29-48-15-12-26-28-41-41-22-15-51 6-48 31 5 16-4 30-22 25-6-2-2-11-2-16 1-15-8-30-5-45 9-49-46-69-80-88-18-9-36 0-48 14-14 16-2 35 1 52-3 16-30 12-39 27zM2566 2915c-21-14-40 15-49 31-14 31 21 33 26 49-15 20-26 50-3 67 15 11 24 27 46 26 28-2 43-37 22-58-12-14-26-26-44-33-5-2-13-5-10-11 9-20 32-51 12-71zM2924 3556c-27 10-18 52 11 50 19-5 55 6 59-21 2-12-9-21-21-22-17 0-32-12-49-7zM1914 3205c20-2 39 10 59 7 17-2 29 10 44 12 50 9 59-69 11-75-43 4-38 16-76-17-16-11-12-36-30-45-21-14-50 2-51 27 0 20 20 33 13 54-4 20 9 40 30 37zM1710 3227a40 40 0 00-8 53c37 41 57-5 79 7 10 17 27 16 44 17 74 20 70-68-3-55-22-1-43 5-47-23-7-19 22-21 28-36 23-32-18-45-9-67 23-21 22-62-13-68-18 0-35 2-53-4-65-1-33 82 16 84 20 5-13 39 4 61 14 25-27 18-38 31zM2401 3374c-9 17-27 31-27 51 0 29 41 61 64 35 28-20 3-54 3-81-3-23-31-25-40-5zM2468 3064c-10 7-16 19-29 21-25 0-44 23-33 47 6 15 33 12 27 33h-1c-3 22 19 43 40 37 8-1 20-10 26 0 14 56 78 26 46-21-2-33 33-46-8-83-18-21-36-59-68-34zM2842 3196c-11-18-28-36-46-48-36-5-34 49-26 71 2 29-33 31-53 33-27 11-8 43 16 37 19-1 28 18 48 17 25-1 39-24 33-48-5-28 43-29 28-62zM3048 3947c-42 41-65 18-80 53h115c6-26-9-59-35-53zM3698 3860c-39-7-67 65-22 73 45 4 72-60 22-73zM3872 3939c13-27-12-48 0-72 8-15 4-32 6-48 7-23 58 34 74-26-5-41 9-39 44-33l4-1v-70c-8-2-18-2-29 1-25 1-15-34-31-46-8-10-39-45-27-55 14-3 31-23 44-10 19 19 2 60 32 69l11 1v-165c-5 3-9 7-12 14-6 12 2 28-7 39-17 21-38 16-38-12 0-8 7-14 11-21 21-51-61-61-46 4-4 22-28 15-24-7 3-34-45-35-45-66-2-23 1-45 4-68 6-15 30-9 43-14 11-2 38 12 26 24-86 65 42 115 24 8-2-3-2-11 4-9 31 13 34 62 60 73v-255c-6 2-12-1-12-11 11-55-23-43-28-70 36-43-35-77-43-25 0 12 10 20 17 29 6 10-6 20-13 24-13 4-19-14-27-22-6-8-7-19-8-29 0-31-49-34-12-59 35-30-12-60 8-77 10-4 25-14 34-4 27 71 63 13 77 44l7 20v-104c-7-8-17-12-28-9-21 5-48 41-58 4-21-34-45-17-31-70 5-16 28-8 41-13 23-4 39 24 64 13 6-1 10-5 12-9v-114c-14 0-30 16-42 4-34-54-70-13-73 33-6 13-12 57-27 57-14 1-41-3-35-23 11-23 18-48 31-70 7-19 32-15 43-30 22-27 43-65-12-59-61-3-43 25-67 60-18 16-41 28-55 48-6 9-14 17-24 22a35 35 0 00-14 51c12 22 0 63 37 63 38-10 43-5 71 23 2 6-5 9-9 11-26 13-52 28-73 50-10 6-9-14-12-19-10-40-36-29-56-44 26-21 33-60-5-65-13-6-37 24-39 9 4-18 3-41 14-57 25-15 28-60-5-65-46 1-29 38-43 63-18 26-30 65-69 53-30-1-35 42-65 44-23-4-13-32 0-43 19-28-8-45-34-46-8-4 0-16 1-23 5-20 26-30 30-51 2-6 6-14 12-16 16-12 49 0 35 21-22 11-38 29-31 55 23 55 98 22 69-45 10-25 47-33 22-70-19-16-25-41-45-55-7-5-13-11-12-20 1-17 0-34-15-43-32-14-57-39-78-65-16-20-39-61-7-76 14-8 21-7 31 6 12 11 8 27 7 42-1 31 43 43 58 16 14-35-28-55 22-100 15-7 13-29 26-34 13 7 41 27 24 43-18 10-49 18-37 45 6 16 29 16 31 33 7 24 1 49 4 73 1 10 0 19-5 28-16 24 1 47 7 71 6 19 21 24 35 21 8-2 24-6 24 8-11 51 28 60 69 52 31-6 30-44 10-64-5-15 17-22 24-32 19-10 37 22 58 7 56-51-16-49-13-73 4-31 40-38 42-2-4 28-2 42 27 52 28 13 68-20 52-49-14-19-22-41-28-64-1-18 26-9 31 2 7 14 40 17 31 36-8 14-19 27-16 44 2 21-10 42-5 63 13 26 52 13 72 30l2 1v-132c-15-6-32-19-30-24 29-41-1-57-12-96-3-17-24-21-28-37-2-22 35-22 44-7 18 18 23 30 26 41v-81c-5-7-4-10 0-11v-54l-4 7c-8 24-24 17-41 8-24-9 30-32 15-59-13-24-10-50 21-31l8 4v-64h-3c-24 1-53-20-67 11-3 31-112 76-106 26 16-31 65-45 56-86-5-35 25-59 57-62 18 10 3 50 46 43 7-1 13-6 17-12v-65c-9 2-17 8-27 14-18 4-8-25-14-36-7-31-48-36-69-12-13 12-32 60-46 25-2-21-41-31-25-50 12-21 36-27 49-45 12-20 0-42-14-49-13-6-29 3-43-5-12-9-25-8-38-1-17 7-36 6-49 20-28 18-44-31-72-28-62 14-26 68 20 76 22 3 48 30 67 7 8-9 31-53 41-28-6 16-11 33 0 48 35 45-42 4-56 25-17 16-40 10-59 19-44 29 4 77-31 127-5 21-35 9-38-7-2-21-10-42-34-45-131-52-42 54-119 36-24-2 1-54 16-54 24 0 40-5 41-33 0-14 2-32 20-35 9-1 22-3 27 7 8 18 19 39 42 35 32-5 29-42 30-67 1-18-15-27-28-36-15-15 16-34 4-52-9-27-43-18-60-37-18-22-56-17-67 10-20 34 36 48 20 75-10 15-29 24-30 44s-16 33-26 49c-8 11-25 5-38 9-26 1-25 36-47 41-17 2-37-1-35-22-2-21-21-32-29-50-5-20-39-23-31-46 20-51-46-72-67-24-12 21-29 25-49 9-28-12-74 8-74 42-2 9-8 23-19 19-36-17 20-29 14-51-1-22-30-34-11-55 22-29-12-45-29-63-35-41-42-33-85-53-20-14-48-2-36-37 3-25-31-39-46-25-16 14-31 29-44 46-13 15-38 34-22 55 17 19 47 52 70 24 6-5 9-20 18-18 16 11 30 25 45 37 187 51 28 46 87 114 20 28-37 23-6 77 3 20-26 20-35 35-29 33-22-23-36-37-5-6-11-15-5-22 16-24 40-72 7-91-24-9-35-41-63-41-31 1-41 35-29 59 6 20-21 26-23 45-5 34 36 42 61 27 43 1-13 42-30 44-25 7-60-29-77 6-11 48-64 78 2 112 14 17-22 29-29 43-14 14-36 0-54 3-4 0-9-2-12-5-18-22 2-32 19-43 24-16 5-45 15-66 16-25-9-59-36-43-95 57-15 66-42 112-16 7-34 12-46 27-13 6 12-35 3-46-10-52-58-15-76-51-6-9-15-14-25-18-23-10-3-45-27-57-14-7-31-28-8-34 12-1 25 1 35-6 23-10 12-35 26-39 17 5 1 25 6 36 6 38-11 89 48 87 33-1 71 13 67-36 0-14 13-19 22-27 33-25-17-64-38-43-7 4-12 16-21 15-65-67-12-37-36-101-9-25 30-33 26-58 0-13 11-20 19-28 15-14 15-39-2-50-21-11-54-10-52-43 5-27 1-47 25-15 24 18 33-19 54-22 32 0 42-52 73-18 3 19-32 25-20 56 9 25 41 21 62 27 49-7 2-46-11-66-10-22 54-32 21-72-15-18-42-18-57-34-15-27 32-38 20-71-4-17 38-41 41-18-4 16-10 31-5 47 5 60 20 39 32 76-3 19 7 40 30 42 36 1 40-42 16-62-16-23 60-44 7-86-12-7-39-10-34-30 3-11 15-28 28-20 40 51 54 9 58 43 1 19 15 34 16 53 0 12 6 21 11 31 6 31-39 52 13 81 42 17-35 38-6 74 17 26 57 0 72 27 8 37 64 45 68 2 8-16-39-48-9-51 31 4 31 52 65 47 29-12 41 20 18 27-9 1-19-1-28 4-29 11-22 53 7 59 38 20 70 40 91-15 8-21 32-40 20-65-14-24-33-58-66-46-32-2-52-42-51-72 19-32 58 48 104-7 16 0-3 46 40 57 31 2 49 32 80 35 32 3 53-52 23-64-13-7-26-6-40-7-13-3-11-19 1-21 35-3 42-39 39-68-2-14-13-22-24-29-15-8-20-26-33-37-23-27 17-69 7-101-13-47-62-12-88-48-29-20-47 29-78 22-52 8-28 47-33 80-14 20-5 55 23 51 32-4 19-38 31-56 14-24 59-55 70-13-1 43-65 50-14 99 10 16-15 28-19 43-4 5-10 9-17 8-41-17-81-35-118-60-13-4-9-54-6-66 17-24 6-67-28-63-55 23-30-23-73-34-22 1-51-33-24-46 13-2 27 2 40 0 21 3 17 36 38 41 22 4 37 33 61 21 27-15 13-39 0-55-7-18 21-25 29-38 34-20 36 49 69 46 32-1 80 15 91-26 14-12 26 19 39 24 15 9 13 32 30 41 25 17 53-16 36-39-40-30 2-74-39-93-11-5-35-10-30-26 10-20 27-33 50-35 43-18 1-60-9-86-12-16-35-4-35 14 0 11 0 31-12 14-7-15-46-15-39-28 21-18 35-55-4-61-11 0-25 4-32-7-9-25-74-15-54-49 47-43 63 39 96 24 17-11 4-30 1-44 0-25 35-34 31-62-5-33-52-41-74-19-24 14-57-8-81 14-19 19-27-19-46-21-28-10-45 15-48 40-10 24-49 13-48 53-1 22 13 54 38 37 26-13 23-49 41-58 36-11 43-12 53 27 3 20-28 24-31 43-4 17-15 25-32 26-16 1-24 15-33 26-49 47-26-35-81-30-60-25 45-101-57-116-40-17 35-28 22-75-13-41 35-74 2-104-22-20-55-6-80-1-25 13-16 48 9 53 30 18-7 43-4 65 4 22 12 38-12 50-33 29-11 60 26 68 26 18-16 66-38 41-27-19-29-86-73-57-7 4-13 19-23 12-19-20-43-15-67-16-15-3-30-5-42 5-13 10-26 2-38-3-26-18-54 36-69 4-5-15-21-34-7-48 15-14 54-33 25-54-9-5-23-7-23-20 6-30-30-39-23-59 32-39-7-53-2-88 6-45-46-37-13-86 13-14 39 19 59-1 36-22 23-83-23-72-22 3-34-23-56-21-36-3-72 24-39 58 12 21-6 48 15 67 8 13-20 44-30 25-6-59-45-33-58-65-1-20-33-39-11-55 19-14 23-37 30-59 4-11 17-7 27-5 69 0 41-69 1-93-25-13-5-44-24-62-11-11-23-22-20-39 11-69-44-40-59-64-17-49 48-21 43-72-10-42 34-7 47-45 5-19 22-26 40-16 20 7 38-7 50-21 2-4 2-9 1-13h-126c-2 7-5 14-11 19-22 14 4 62-34 45-6-3-8-10-8-17 1-16-10-31-8-47h-76l-3 4c-20 21 26 58-5 68-50-14-81 31-38 66 20 35-29 33-47 45-29 17-36-12-38-35-6-27 30-25 40-44 14-18-7-37-3-57 5-17-3-38-17-47h-33c-57 34-27 67-62 79-21 2-48 6-50 32 2 51-41 2-61 51-7 25-17 14-34 6-53-16-61 62-96 82-18 12-40 13-60 23-9 4-19 0-24-10-6-16 1-34-8-50-3-17 55-4 65-1 47 12 69-58 19-74-23-3-46-10-70-12-27-3-15-14 3-21 43-23 3-65 27-91 17-9 32 44 34 57 5 27 38 24 57 36 21 11 40-2 56-15 10-4 16 9 26 11 13 5 28-10 23-23-10-26-34 1-47-10-6-13-32-29-17-43 21-13 61 2 74 21 29 24 57-11 48-41l2-7h-466c2 2 3 6 4 9 5 29 18 45-1 73-10 35 33 64 61 72 32 5 23 34 63 46 10 11-14 28-6 45 5 14 2 28-3 41-6 26 20 51 45 41 29-25 50 12 79-4 19-13 49-9 59-33 3-12 53-70 59-45-2 21 5 39 20 54 19 51-53 0-67 47-6 14-6 27-25 22-22-6-48 5-48 29-1 20 18 37 3 56-17 48-50-18-72 31-4 12-4 27-17 34-32 16-12-64-42-70-23-14-41 10-50 28-10 10-26-3-37-6-16-7-16-26-21-40-5-19 38-17 51-27 24-5 44 33 66 4 29-39-54-63-53-102 0-18-9-32-16-47 0-20 41-13 38-43 1-43-59-21-82-45-19-22-66-5-54 26l16 30c5 18 26 30 21 50-12 19 19 64-6 63-48-30-43-4-85 2-18-5-69 5-73-16-3-44 58-29 66-66 0-27 35-21 41-43 15-34-5-85-47-75-37 4-28 36-24 61-2 20-32 27-49 34-18 2-34 11-41 28-13 28-17 57-1 85-6 25-43-8-43-23-3-13 9-21 17-29 17-16 5-43-12-55-11-12-51-1-41-26 11-16 47-23 41-48-4-24-28-35-36-57-4-21-20-35-41-36-28-9-36-37-72-32-16-6-7-29-9-43h-55c-6 7-10 15-13 24-18 9-52-34-79 13-16 50-20 18-50 2-15-10-16-27-23-39h-91l5 12c-2 50 53 20 58 56-1 23 3 46 31 49 24 5 39-12 53-28 29 4 25 50 85 11 18-11 7-48 26-52 13 3 35-1 39 14 0 19-1 45-27 39-60-4-18 60-41 63-72-49-51 12-104 10-22-1-34 12-44 30-14 20-47-2-60 22-14 26 14 39 34 46 17 4 25 41 3 42-51 8-80-41-118 5-17 17-82-30-81 47 5 31 44 39 51 63-5 20 5 37 5 57-2 10-8 20-3 30 17 57 101 28 74-27-30-35 34-63-22-91-14 1-37-19-15-26 12 0 23 5 35 5 31 7 21 50 29 73 7 31 42 19 60 34 13 17 32 31 53 19 34-13 17-66-13-66-24 2-50-17-42-43 14-17 26 23 76 0 25 0 23 38 31 56 4 11-2 21-9 29-21 23 17 39 10 60-22 38 4 53 37 58 21 15-11 43 7 63 10 14 5 29 6 45 2 30 49 29 50-1 1-15-9-29-2-43 5-13 5-25 0-38-6-15 4-28 9-42 12-74-93-18-75-68 11-15-6-40 12-48 17-1 19 25 35 30 34 22 108-73 65 47-5 14 4 26 11 38 5 9-4 16-10 23-16 15-7 39-16 58-9 21 16 44-3 62-10 10-11 33-28 35-21-5-48 8-43 31 32 50 49-7 68-4 21 10 43 8 64-1 23-7 23-31 31-50 25 0 45 36 67 48 16 7 16 39-2 41-18-5-36-20-54-8-34 19-3 48-13 72l-34 56c-9 22-55 24-40 55 4 12 27 25 13 37-43 9-46 11-76 43-10 25-32 50-27 79 5 32 16 82-36 64-20-20-55-3-33 23 12 8 38 13 25 34-16 22-53 15-62 45-22 28-61 21-43 73 3 12-7 21-14 30-23 35 32 54 51 75 38 27 51-37 77-16 14 22 9 44 35 60 18 17 15 44 8 65-11 14-35-3-51 0-24-9-19-58-65-41-57 44-21-33-36-61-11-26-37-11-56-5-28 1-26-46-1-51 43-25 6-55-25-67-5-12 17-26 17-40 10-28 52-14 56-52 6-30-34-46-57-32-7 3-20 17-23 2-9-71 33-31 55-77 13-41-49-66-56-104-3-23 31-27 29-51-2-27 21-66-12-81-35-15-36 29-60 30-7-1-14-3-21-1-14 5-17 27-2 33 9 5 25 3 28 17 1 9 2 20-7 26-14 5-29 26-44 17-50-60-117 26-49 58 16 2 24 12 27 28 6 18 33 25 45 9 7-9 16-27 29-16 12 13 26 43 12 57-20 8-32 25-47 40-24 24-4 56-10 85-5 41 77 30 30 68-23 23 4 50-5 75v18c7 41 54 17 58 55 14 40 66 36 19 86-20 23 10 64-39 55-45-18-16-80-99-33-37 20-29 41-78 16-18-20 26-31 29-51 8-24 25-31 48-41 13-4 16 15 27 18 39 6 27-45-8-33-21-5-22-52-5-63 51-26 22-90-29-69-27 12-66-18-80 22-4 45-49 30-60 68-12 31-2 59 31 70 13 12 9 41-7 49-24 15-44 35-72 44-20 2-38 10-58 14-14 2-19-19-6-24 49-15 20-40 29-72 8-15 7-34 19-46 24-18 19-59-12-63-54-5-26 54-55 58-16-2-33 6-50 1-15-6-32-12-48-4-12 7-25 13-39 15-21 3-30 24-24 43 6 16-3 33 1 50 16 42 60 11 90 6 25-4 29-69 60-27 10 29-38 22-37 49 0 9-4 22 7 28 10 5 20 14 14 27-8 14-19-8-21-16-2-15-17-17-30-20-28-4-43 23-42 47-8 26-47 9-48 45-4 23 14 36 31 47 20 31-41 13-51 34-7 9-14 18-24 24-28 17-44 91-83 54-22-18-37 0-52 9v62c34 17 64 64 100 26 10-15 19-32 40-32 27 5 59-9 50-41-3-10-12-24-2-32 42-20 32-44 55-51 20 1 37-5 47-24 16-33 40 1 63 2 9 0 18-1 26 4 22 14-44 69 35 85 13 0 30-2 32 15 1 19 33 28 21 47-15 24-27-5-42-12-21-11-44 5-45 26 2 28-7 29-32 35-33 14-20 50-1 70-3 15-28 20-34 37-19 29-33-37-87-2-10 5-31 2-31-11 9-19 19-39 38-50 21-15 17-50 49-51 37-7 32-75-10-65-21 5-32 29-55 30-21 1-30 20-36 38-16 38-64-21-77 55-3 10-9 16-19 18-17 1-17-25-30-34-13-13-10-39-31-44-9-3-16-1-24 1v73c6-3 14-3 26 3 15 15 46 5 45 31-2 24 40 31 24 52-4 4-10 16-17 11-17-31-47-19-73-32l-5-2v72l9-3c25-10 41 5 64-18 14-7 18 16 29 21 20 16 49 0 52-26 2-5 1-14 8-14 34 12 33 54 1 67-21 20-58 21-61 56-67 136-38 10-95 23l-7 2v58h1c30 12 15 21 2 39l-3 4v65c15 3 31 1 42 11 19 29 67 28 69-12 0-41-89-51 16-71 17 11-4 42 14 56 48 63 99-72 34-80-15-2-41 13-33-14 12-35 42-56 71-76 18-12 13-32 15-50 8-20 33 7 29 20-9 21-20 45 1 62 31 25 76-13 112 3 27 9 43-32 69-11 23 5 27-19 21-35 1-19 21-34 33-46 17-9 38-30 57-14 18 22 52 25 55-6-7-42-16-37 30-45 40-10 26-60-4-73-49-22-46 40-88 37-19 1-30 19-49 22-11 2-22 7-30 16-14 20-47 53-68 46-15-10-33-1-49-5-9-5-9-19 0-24 14-6 32 1 44-10 15-14 36-24 44-43 14-50-48-31-68-54-3-4 0-9 4-11 18-17 39-20 62-12 30 8 12 55 47 62 30 6 58-26 87-35 23-10 17-39 34-54 14-12 25-29 44-32 28-11 70-36 60-72-13-121-63-23-90-64-6-21-17-39-27-59-7-23-45-10-45-35 2-37 30-6 50-7 27-4 30 45 61 33 10-2 21-12 30-4 12 13 27 24 38 38 38 39 27 23 41 75 2 18-23 24-23 42-5 43 60 49 62 9 5-16-15-33-1-46 45-35-4-55 15-71 46-4 37-71-6-57-15 5-22 28-41 12-29-22-37-100-86-71-14 14-30 22-49 17-22-13-19-57-59-39-15 4-18 29-34 27-27-2-57-16-81-3-9 5-18 16-28 9-48-33-2-31 17-58 18-26 59-44 86-25 10 10 22 21 37 19 29-3 56 22 82-4 19-8 34 20 55 16 41-1 49 31 81 43 22 6 34 42 61 29 13-6 25-18 41-14 18 3 36-7 53 3 24 17 54 9 66-18 6-11 14-21 21-32 14-23 1-57-26-60-31-6-45 34-76 28-25-5-16-46-45-50-21 1-51-49-23-54 18 11 44 0 58 16 13 41 50 42 75 11 13-6 19 13 25 21 20 30 69 5 57-28-2-11-10-23-6-35 6-19-2-42 12-58 10-10 13-24 17-38 5-12 19-2 27 0 17 5 31-4 40-17 16-19-16-51-19-75 2-11 21 4 30 3 20 5 35-8 41-23 16-47-54-70-83-40-16 8-28-14-45-13-34-2-49 34-38 63-3 28-17 35-8 66-7 18-28-4-37-10-15-16-20-46-5-64 31-35-20-63-11-101 2-23 25-38 22-63 0-5 3-10 8-11 23-4 42 15 64 19 3 1 3 4 1 6-39 18-31 80 17 66 16-14 56-14 52-42-12-26 13-47 9-74 12-12 34 22 52 13 30-12 32 16 58 18 50-2 18-41 80-12 41 2 45-53 11-63-24-14-36 29-58 17-11-8-19-19-19-34 2-22-19-37-29-55-47-96-137 1-47 33 11 4 14 31-2 28-15-10-28-25-47-14-32 13-6 44-23 53-42 9-17-48-54-60-8-3-26-11-15-21 18-14 33-32 56-36 41-27-9-45-5-67 7-27 61-45 85-59 22-2 3 44 26 53 14 8 17 19 17 34 2 22 34 20 38 0 0-18 10-28 25-11 5 6 3 14 0 20-10 21-5 46-9 68 3 37 57 45 64 5 8-28 2-61 14-87 8-10 10-24 15-35 14-14 38 6 62-12 15-3 34 33-9 32-25 4-33 32-22 53 7 24-18 63 19 72 11 5 28-2 34 10 5 28 24 45 51 27 35-18 58 49 95 34 33-20 31 27 68 21 18-2 37 10 53 0 7-8 24-8 16 6-14 9-28 17-29 35-5 19 15 36 3 54-15 26 17 41 10 61-31 24-26 80 19 78 12-1 33-12 38 5 2 17-6 35 5 50 4 7 9 14 6 22-18 22-11 43 9 60 13 17-50 51-65 35-12-8 2-25-4-36-4-16-23-26-40-16-15 8-18 31-3 44 9 7 27 11 21 26-4 21-16 41-35 16-23-22-49 7-74 9-21 6-18 37-15 54-1 23-31 10-34-6-5-22 10-44 32-49 15-14 15-41 35-53 19-16 2-50 33-54 18-5 28-24 48-27 26-6 36-39 13-54-32-10-23-32-45-47-19-12-43 5-40 27 1 11 8 25-2 35-13 10-23 50-43 27-9-18-21-32-41-37-21-15 20-42-7-65-30-22-2-29 5-54 6-25-34-37-50-21-31 40-45-36-85 14-9 18-29 28-35 48-3 5-3 17-12 14-36-14-5-75-55-79-36-7-45 29-41 56 15 26 27 48 24 79 3 51-53 2-61 50-4 28 38 45 53 19 5-7 7-23 18-22 19 5 18 31 4 42-15 7-27 17-36 31-17 21-45 1-68 5-13-5-7-28-23-33-21-10-44-31-67-15-13 8-19 24-14 39 12 23 21 43-3 63-17 21-8 57 19 60 36 0 46-29 71 17 4 25-29 59 22 71 50-16 56 32 86 14 8-7 17-16 30-15 10 2 30 2 31 16-2 28-13 56-5 84 9 25-31 40-17 67 8 29 41 13 60 25 20 21 42 17 62-2 22-1 10 43 39 40 13 0 25-2 36-10 30-22 82 32 91-61 5-40-47-59-68-25-18 17-43-9-62 8-18 17-25 7-40-5-19-16-47 23-58-5-4-19 24-29 21-49-5-31 24-61 55-49 24 11 50 20 48 51 4 19 35 17 36-3 0-12-3-26 3-38 17-36-39-86 41-48 36 13 37 55 62 78 15 18 52 16 60-7 6-31-33-45-22-62 10-8 21-16 25-28 7-28 48-31 44-64 1-5 5-10 10-9 22 7 44-31 59-7 24 77 88 65 74 101-8 13-6 39-25 42-17 3-25-8-27-24-9-38-41-19-28-69-2-30-52-35-58-5-5 28 39 34 26 61-16 50 34 38 39 66 1 22-20 23-37 18-19-5-33-28-55-20-30 3-24 40-4 52 18 7 35 16 37 37-3 30 24 57 49 36 9-8 8-21 8-32 3-47 30-35 50-5 18 18 51 4 52-21 0-25-29-41-20-68 1-9 12-11 19-14 48-25-1-43 89-74 21-13 43-1 62 9 21 6 41-13 41-34 1-13-3-28 9-36 11-10 28-19 38-3 25 19 27 65 43 68 26 1 45-26 30-49-11-19-1-43-17-60-21-18 2-29 17-39 24-19 7-59-19-68-31-9-37 39-77 51-29 10-68-16-74 34 1 107 2 44-60 70-61 41-77-15-112-41-11-13-37-16-37-37-2-21 19-20 33-11 30 13 35-27 57-36 26-8 37-36 19-58-2-6-19-14-11-21 13-3 29-21 40-11 17 31-5 60-8 90 2 21 4 77 37 52 12-15 8-36 21-49 31-46 82 32 99-39 3-18-22-38 6-45 33-12 15-43 18-67 7-19-4-36-21-44-16-11-13-35-9-52 7-17-3-36 5-53 15-22 7-56-23-59-30-1-35 24-76 19-16 2-34 18-34 34 6 28 27 48 57 45 15 7-2 24-14 18-20-13-42-2-64-6-14-2-40 8-37 25 6 22 29 31 46 44 18 15 41 13 59-1 74-25 86 92 36 55-26-19-58 0-84 9-28 10-30-88-81-48-14 14-6 34-3 50 1 14 20 24 20 36-21 10-38 22-42 47-17 41-64 3-75-25-18-20-2-38 12-55 16-21 11-49 45-49 30-7 23-46 48-59 25-19-9-55-33-46-23 12-42-22-63-1-9 17-16 14-30 5-22-6-61-23-43-51 30-21 17 21 84-24 49-25 21-52 83-8 11 8 6 22 9 34 7 39 70 21 61-15-2-11 8-19 13-29 14-26-10-47-36-47-14-2-19-29-2-28 19 6 38 11 55-2 11-8 23-13 36-12 23-4 24-34 23-53 3-16 26-19 39-12 10 6 1 16-4 22-14 13-9 42-30 47-38-5-43 57-5 57 16 0 25-19 42-18 15 2 34-12 45 1 12 17 12 45 34 52 21 6 32 28 54 32 14 3 16 8 12 21-5 10 3 33-10 36-18-6-43-6-47 17-2 18 10 35 3 53-4 11 7 29-5 37-15 3-39 18-23 35 14 15 33 1 39-14 15-11 20 15 18 25-2 19 22 32 34 15 7-18 5-37 18-54 16-34-35-45-35-75 4-10-2-31 10-34 20 7 40 14 38 39 3 22 26 24 44 27 35 24-29 66 3 93 5 7 18 12 15 21-11 9-19 28-35 29-19-2-41-3-50 18-7 21-1 43-16 62-11 26 17 53 42 42 7-3 14-7 22-7 26 0 15 29-3 36-28 7-64-11-69 37 7 28-4 40-26 56-14 13-32-3-44-12-28-4-53 8-76 22-24 14-55-9-73 19-15 35-27 18-55 19-30 4-43 39-26 62 15 23 31 58 63 40 14-9 19 9 29 18 28 26 62-26 28-42-15-10-34 13-46 0-7-14-7-42 13-44 24 9 48-9 72-1 16 7 32 0 46-6 35-14 46 37 18 40-30-10-66 14-51 47 29 36 22 40-5 73-25 11-23-32-84-32-14-2-26 5-38 11-19 3-35-22-54-6-23 26-51 11-71-10-23-19-60 2-54 31 3 14 21 36-1 43-21 7-57-5-59 27-2 11 6 28-7 34-17 6-35 16-35 36 0 24-15 55 5 74 29 23 70-6 60-43-2-19 5-43 29-38 36-1 70-40 65-76 12-22 36 8 47 18 24 23 60 2 61-31 0-6 3-16 11-14 18 11 37 19 56 26 33 17 69 52 87-5 17-32 35-8 45-60 25-40 65-2 83-35 9-12-7-32 7-39 18 3 51-24 58-5 21 35 50 45-6 65-16 8-19 25-19 41-3 22-25 34-30 55-22 14-8-29-19-38-12-22-47-17-53 7-4 20-8 46-32 50-40-4-74 52-28 74 51 12 26 27-1 49-44 12-70 13-39-39 15-25-12-52-38-44-27 14-41-20-67-19-66 2-18 110-48 116-80-43 3-48-36-91-32-23-49 28-81 26-37 7-23 43-34 68-13 29-21 45-51 59-3 2-7 1-9-3-5-11-12-22-22-31-12-11-6-36-24-42-21-9-48 11-37 35 6 12 16 21 18 34 5 35 40 37 63 17 24 9 3 42 55 34 17 0 24 21 33 32 13 25-10 58 29 73 48 7 2 56 44 72 60 15 37-49 60-59 37-11 22-40 41-45 58 17-76 83 10 122 11 8 11 26 2 34-34 15-25 68-59 79-15-2-30-2-45 1-36-16 37-44 4-66-27-15-88-24-74 26 7 19-1 42 14 58 3 4 5 9 2 13-11 11-27 6-35-6-22-17-56-37-83-21-15 10-30 9-45 1-30-11-42 29-71 5-46-16-31 47-60 62-8 7-13 16-13 27-5 29-7 57-15 85-7 40 53 53 64 16 1-45-44-57 20-98 28-7 22-48 48-44 14 4 28 3 42 3 26 1 48 17 75 18 19 6 38-15 55-1 12 10 30 13 35 30 3 10 8 20 15 28 11 12 7 31 20 42 43 32 42-65 84-3 19 18 47 8 55-17 7-26 24-67-15-74-27 2-52-14-78-7-17 9-33-5-50-7-5-1-10-4-12-9-3-11-24-24-15-36 21-16 22 10 32 23 18 26 44 9 57-8 19-17 47 16 69-10 12-13 19-30 32-43 14-34-14-32 28-61 18-19 1-46 28-60 20-19 9-49-4-68-14-21-44-6-63-17-24-13 14-37 0-57-6-15-17-27-20-43-7-29-49-27-63-5-7 9-14 21-28 22-22-1-52 40-64 7 6-31-33-52-11-81 17-19 38 36 80-9 18-6 33 29 56 12 18-3 15-35 35-28 10 8-22 23-7 54 7 15 32 13 43 4 10-7 18-18 31-17 15 2 28-2 40-10 8-8 28 0 25 12-30 16-74 46-59 85 8 16 8 39 23 50 18 8 35 40 55 21 21-24-31-34-14-58 52-86-5-76 10-101 15-6 29-15 31-32 2-16 12-30 14-46 6-31-42-29-35-47 27-37 102 27 108-38 5-24 44-21 43-50-4-27 44-80 57-45-1 17 8 31 18 44 6 14-13 27-9 42 3 18 16 26 33 25 16-3 28-8 28 14 3 26 19 63 51 58 19-5 37-1 50 13 12 16-16 33-7 50 9 18 27 33 48 30 30-2 79-7 61-50-23-38 34-33 46-61 13-14 34-18 41-37 4-9 9-18 18-24 22-11 26-38 46-51 41-53 73 11 105-21 122-120-18 58 129 23 27-7 30-46 4-56-12-8-44-8-38-28 7-24 24-23 45-16 22 3 30-31 52-17 38 12 35-51-1-31-7 3-13 11-21 7-22-10-7-53 16-47 16 12 42 7 52 26 8 17 27 23 37 39 7 18 32 16 38 32 6 62-64 19-49 77 6 10 15 19 15 32-5 50 62 34 40 70-63 18-46 6-77-32-13-17-37-16-52-32-1-2-4-3-7-3-27-6-52 17-42 44 5 10-1 21-11 14-8-18-20-37-43-35-32 7-26-9-32-33-9-20-40-20-55-6-7 7-16 11-26 8-26-10-58 6-58 35 0 18 14 33 4 51-10 19 16 44 30 23 9-29 18-37 41-56 16-14 39-3 58-7 12 6 5 25-6 29-20 2-36 25-16 38 9 5 21 4 28 12 9 17-34 24-28 49 12 52 54 2 81 25 19 10 45-8 44-29-1-16-13-35 8-41 9-4 15-10 19-19 9-28 36 3 56-1 25-8 26 22 40 35 17 22 18 65 57 57 18-4 56-12 58 15-1 57-53 30-39 107 2 27 33 41 30 69 2 10-6 37-18 24 2-26-21-53-46-35-23 22 2 47 27 50 13 20-9 34 21 64 12 24-30 21-43 31-15 2-11-23-17-32-12-28-50-29-71-10-7 9-18 4-11-6 17-23 44-69 8-86-29-19-83-21-75 25 16 34-6 31-22 52-21 30 34 99 68 80 13-7 26-9 31 7 12 21 43 22 48 48 7 16-11 28-25 31-20 4-23-28-43-27-12-2-24-3-37 0-22 2-35 36-14 49 18 9 38 10 58 7 6-1 13-2 18 3 21 25-28 51-49 39-16-8-46-1-42-28 0-29-47-40-35-70 41-58-42-96-62-28-27 29-55-22-57-47 14-42-14-68-56-55-69 30-63-30-99-2-12 21-34 33-43 54-7 23-28 39-26 64-1 11 4 34-11 37-19-4-28-20-22-38 5-28-34-45-50-20-12 16-4 33 11 44 13 15-7 60-29 41-8-13 5-29 2-43 0-11-10-18-18-24-22-16-30-43-47-63-24-48 42-45 65-66 14-16 11-47-18-54-17-2-34-5-47-18-25-19-59 4-51 34 3 12 6 26-9 31-52 6-39 35-82 44-31 6-30 72-69 53-48-30-35-22-18-72 14-15 51 9 53-32 1-21-23-35-41-25-15 7-13 37-35 29-12-5-25-4-38-6-19-8-1-44-28-51-36-15-65 40-34 59 9 4 36 3 30 18-6 14-28 30-35 9-4-15-8-29-26-28-18-3-42 13-35 34 1 17 41 31 20 48-30 5-58 23-45 57 9 19-15 22-21 36-8 19 18 30 22 46 10 22 28 28 46 23 20-5 37-17 47-34 17-20 18 22 11 31-21 25-2 66 29 47 14-10 15-30 30-39 12-8 17-21 20-34 6-23 37-12 53-23 32-16 47 2 31 32-9 10-14 29-30 29-23-5-54 1-56 29-4 29 32 51 56 31 11-8 21-31 37-15 24 24-28 43-19 73 6 58-59-30-86 35-5 13-1 25 3 38 5 11-4 19-11 26-10 12-3 34 15 31 10-1 16-9 21-18 13-16 41 10 56-11 46-33 18-55 45-68 35-8 36-45 51-72 11-28-24-46-24-74 1-47 29-29 57-18 23 9 26 48 58 40 22-13 86 15 64 44-33 19-21 59-18 91 11 33 52 17 71 0 15-12 5-30 0-45-4-19 21-27 36-21 16 7 33 11 46-4 11-13 21-26 39-20 22 3 33-14 47-27 23-14 32 24 42 38 1 13-22 9-29 17-40 21-3 85 35 58 22-13 18-39 6-58-6-27 45-6 50 8 11 17-3 39 10 56 7 11 6 24 5 37 1 46 86 60 87 9-14-24-6-54-26-75-49-45-3-67-44-95-23-6-37-24-58-34-27-6-7-48 12-29 9 18 27 36 49 28 17-6 34-20 52-6 17 7 7 21 1 33-10 23 11 48 35 43 14-3 29-10 40 3 10 15 21 29 40 34 20 6 18 33 36 41 36 15 38-22 58-30 13 7 22 20 37 24 8 3 12 10 14 18 3 20 9 47-7 62-21 6-23 46-47 31-47-14-47-68-97-41-23 6-31-67-78-16-25 20 22 39 1 59-16 16-36 32-40 55-5 26-15 66 18 76 25 14 63-42 72-3-2 16-13 32-2 47 16 33 72 60 84 10 7-24-22-38-15-60 22-69-47-40-61-84-2-17-24-34-15-50 9-12 27-21 34-2 10 16 32 20 38 39 5 11 13 18 23 23 15 8 28 21 46 25 19 3 31 20 50 23 19 5 41 12 54 28 23 49 58 15 73 38 6 16-12 27-27 26-18-3-46 11-56-11-7-37-51-51-83-40-35 23 17 52-1 80-3 7-6 12-16 7-76-32-54 91 2 39 18-42 23-12 63-15 24 8 48 3 73 5 22 2 39-16 60-18 31-12 15-51 55-62 18-3 17 24 9 34-9 11-19 21-22 36-5 31-20 91 27 95 7 2 17-3 21 5 4 16 6 33 18 44 19 24 57-6 73 22 2 3 1 8-2 11-25 18-11 54-46 22-40-23-67 28-101-35-5-9-9-18-9-27-2-25-19-44-15-70-3-44-66-44-71 0-1 9 4 17 8 25 12 21 3 45 16 67 1 20-21 28-22 53-5 11-19 11-28 14-16 3-19 26-35 25-20-7 0-25 11-30 18-13 17-45-3-56-74-40 63-40 23-101-15-24-96-46-80 6 8 28-31 32-41 55-3 15 15 30 27 38 8 5 22 12 12 23-16 10-33 22-53 21-49-10-62 50-18 68 37-1 17-20 76-1 35 17-5 58-11 83-4 15-26 17-27 0 4-21 13-45-8-61-9-5-20-17-31-9-25 20-28 31-57 6-51-22-63 57-97 79-8 8-24 14-21 27 5 20 26 38 46 25 20-19 48-26 62-51 6-12 16-21 27-30 15-11 40 17 35 32-21 31-3 77 38 70 78-6-14 84 84 83 21 8 1 30-6 41-21 31 33 64 54 33 7-10 7-22 6-33 3-29 46-38 42-71-4-17 1-31 7-47 8-25-13-50-38-51-17-4-32 27-46 11-29-45 37-12 63-37 20-11 22-34 12-54 1-44 77 21 80-55 11-31 46-8 54 13 6 23 25 38 49 34 37 3-36 60 29 78 19 3 36 13 55 16 27 4 36-62 63-34 4 16 5 35 22 43 8 4 18 7 19 17 6 20-18 38-34 21-13-22-37-48-64-35-45 68-35 5-84 32-22 33-71-5-50-27 23-12 31-49 0-54-17-3-32 12-49 7-45-9-54 38-29 66 10 17 2 34-12 46-24 39 36 59 50 14 19-14 26 26 29 38-4 31-43 2-54 54-10 18-73-39-72 41 0 12-5 16-12 17h115c2-17-1-36 23-38 13 3 36-8 40 10 3 11-2 20-8 28h318c0-42-32-35-35-61zm32-205c-1-28 24-21 23 2 2 19-27 15-23-2zm-200-1681c12-25 25-71 59-62 35 15-24 35-17 59 0 13-1 30 13 37 17 14 14 39 24 57-7 35-45-8-35-28 10-48-48-27-44-63zm-68 58c30-17 69 26 58 57 4 68 62 17 74 46 6 26 16 49 44 57 22 7 56 19 68-10 3-13 10-34 27-25 7 8 41 15 28 28a98 98 0 00-25 34c-13 26-71 10-54 66 29 32-1 42 7 75 18 45-36 17-51 1-9-8-1-21 1-31 6-17-9-49-34-48-39 1-97 68-61 102 15 26-25 60 27 77 37 3 17 45-9 21-12-11-28-6-42-1-59 6-65-17-28-60 22-31-20-44-30-68-1-22 27-41 9-64-6-8-16-18-10-29 6-12 14-21 28-23 18-1 34-16 50-5 13 9 28 6 43 1 19-1 22 37 47 29 49-14 18-87-26-51-6 3-11 2-14-2-12-20-34-25-52-35s-35 6-53 3c-25-12 5-40 7-58 2-14-3-26-14-36-20-10-28-31-15-51zm-205 94c27-59-36-94 61-41 20 14 58 0 56-26-2-24-26-30-39-46-2-23 67-8 55 27 0 9 0 19-4 28-24 42 63 67 15 99-34 17-13 57-31 61-15-4-32-6-43 8-6 12-70 47-63 16 4-54 7-37 33-77 10-15 31 1 44-11 12-9 15-26 7-38-16-25-43-9-51 13-6 18-44 6-40-13zM1608 114c-24-1-36-26-44-46 2-17 28-2 38 1 16 9 41 46 6 45zM897 1436c-15-3-24-21-13-32 9-9 13-21 19-31 8-14 32-15 32 4-2 15-18 67-38 59zm-540 368c-3 8-13 9-18 3-8-9-27-23-16-35 12 3 39 15 34 32zm-199 423c-7 7-38-13-32-23 8-14 7-37 26-39 49 8 8 31 6 62zm302-373c20 9 32 30 57 28 20 5 33 41 45 58 22 30-26 41-27 70-2 6-2 13-9 16-60-8 25-61-44-82-35 5-25-34-45-52-15-14 4-44 23-38zm398-109c5 21-30 20-41 11-19-9-56-59-16-60 34-3 47 22 57 49zm435 19c-13 5-30 11-38-5-2-4-2-10 3-11 5-2 10-1 15 0 16 8 30-6 46-4 33 9 12 35-26 20zm157-319c13-17 29-30 43-46 11-10 23 4 31 11 6 5 1 12-4 17-12 11-19 27-25 42-11 25 30 74-49 42-25-16-58 8-60-34 3-62 32 1 64-32zm38 349c-23 11-49-15-69 9-6 5-23 19-26 6-3-36 41-42 44-73 1-9-1-21 8-26 32-6 44-43 55-32 5 5 7 12 8 19 3 17 17 29 20 45-1 27-18 42-40 52zm52-174v-1c-21-4-35 9-46 25-18 12-40-24-64-3-24 11-5 49-29 56-13 2-24-1-26-15-3-13-8-24-16-35-16-34 26-41 43-60 15-11 32 10 50 6 29-5 60 16 84-9 64-29 70 41 4 36zm135 146c-43 2 13-55 23-29 5 19-9 29-23 29zm179-391c2-3 6-5 9-3 7 5 25 8 22 20-9 14-9 41-29 42-36-3-12-42-2-59zm434 580c-10 0-17 7-26 10-19 4-23-25-1-19 12 4 23-5 33 0 6 4-1 9-6 9zm726-441c10-5 16 5 21 12 8 17 34 16 38 35-8 14-29 17-36 34-7 11-15 15-26 2-23-19-37-26-45-57-1-23 35-15 48-26zm-65-121c16 3 34-19 47-5 19 23 9 53-16 66-25 9-22-26-36-37-17-23-56 18-55-22 7-63 32-1 60-2zm267-330c8-4 23-7 23 6-2 15 6 31 8 45 2 31-44 21-43 52-4 35 41 26 40 52-5 13-29-12-44-3-16 6-28-2-37-15-15-19-36-9-50 4-14 7-30-15-21-27 6-12 15-21 28-25 25-7 37-33 63-40 23-9 14-39 33-49zM2213 99c49 3 57 35 4 42-26 3-27-40-4-42zm-116 157c9-20 38-10 54-23 15-9 18 7 17 19 3 20-7 37-22 50-14 7-28-12-41-17-9-6-12-18-8-29zm-312 226c6-1 12 2 18 4 18 6 35-7 54-3 29 4 51-35 32-58-7-9-18-20-10-32 10-34 62-22 64-61-6-52 64-39 37-91-30-45-40 7-73-5-12-11-43-1-46-17 2-8 4-32 17-25 21 19 50 6 73 20 8 4 14-5 18-10 17-20-9-33-17-49-1-11 30-8 39-12 8-1 16 2 19 10 2 25 28 39 24 65 6 35-48 80-2 103 16 7 36-1 48 15 37 40 49-30 82 7 17 13 43 7 53-12 8-22 2-56 35-58 17 2 4 22 3 32-7 36 34 43 59 30 30-5 18 35 26 52 0 20-28 5-39 2-60-14-49 37-49 76-4 16 2 30 9 44 0 5-6 5-8 1-27-35-49-7-73-14-6-17-28-42-4-53 31-16 18-69-20-62-17 6-33 2-48-7-36-13-53 36-87 36-30 3-52-42-81-15-19 16-14 43 3 58 13 13 14 33 26 46 6 6 2 13-4 16-72 67-25 10-79-13-23-11-34 26-54 19-12-8-22-20-38-18-20 5-28-12-7-21zm-33 85c19-7 37 20 57 6 14-8 28-28 44-11 15 16 52-1 51 27 3 31-38 43-26 76 1 8 10 22-1 26-14 2-31 10-42-2-31-21 9-60-21-82-19-18-48-9-72-19-16-6 0-19 10-21zm106 305c-12-4-31-31-12-35l32 2c23 6-2 47-20 33zm-748-417c4-27-24-38-42-52-37-25-53 18-71 11-9-22-9-51-39-54-10-2-23-2-28-13-16-24-24-51-33-78-7-15 15-13 24-14 37-9 19 41 50 49 15 6 27 13 38 25 14 17 37-2 55 1 39 5 56-46 23-66a88 88 0 00-49-19c-24-1-43-16-67-16-18-5 20-36 19-50 9-9 31 20 49 12 52-10 4-72 36-69 15 2 37-2 43 15 2 18 21 38 10 55-13 13-25 32-12 49 10 18 40 8 45 28 9 30 24 45-13 61-27 17-6 50-18 73-18 28 5 49 29 62 4 6-1 12-7 8-13-9-40 4-42-18zm871 646c-16 10-36 11-47 28-12 14-36 12-43 31-15 23 35 46 13 62-27-4-59-2-52-40 6-36-41-61-63-29-10 12-6 43-27 42-15-10-31-22-37-41-7-19-34-28-22-52 4-23 32-20 44-37 12-16 28-5 40 5 28 21 70-11 60-41-5-21-28-30-34-50-8-28-43-40-63-17-10 12-13 28-23 40-10 18-31 26-37 46-3 7-7 13-14 15-18 11-55 0-40-24 36-18 27-77-16-66-54 23 1 56-14 77-15 16-5 34 13 41 20 25 2 36 46 44 18 9 1 64-19 46-22-20-39-70-76-49-11 6-22 18-34 7-20-16-62-3-38-43 43-42-7-59 14-83 22-10 21-36 34-54 22-22-2-52-26-30-18 28-51 48-60 2 0-21 31-30 24-56-5-17 4-35-2-52-7-11-7-23 0-34 18-29 48-31 43-73 13-13 48 18 62-25 4-10-4-25 5-32 22-3 49-19 35-44-10-17-37-15-44 3-7 14-1 39-25 30-18-3-10-25-17-37-14-28-55-13-52 17 0 22-18 40-4 61-3 30-46 39-70 52-11 5-18-8-28-11-23-9-35 29-10 35 10 2 24-3 30 9 8 15 21 37 2 50-21 3-36-36-64-3-16 25 14 55 40 39 15-14 30-12 34 10 5 24 10 48-24 36-21-5-35 10-46 25-12 13-32 7-48 9-12 0-17-13-19-24 0-19-12-33-28-43-41-40 48-29 24-74-45-52 58-11 32-86-16-73 95 33 142-39 20-31-20-65-51-49-22 7-70-13-55-41 10-19 3-33-17-39-26-9-48 19-34 42 16 16 14 34-9 41-20-1-16-40-46-33-44 16-3 44-3 70-4 11 4 32-8 38-19-9-42-27-61-7-7 5-11 19-20 15-33-25-47-59-3-81 31-8 38-44 27-71-8-9-12-43 6-35 8 15 19 31 39 30 29 0 43-40 23-59-13-16-5-41-25-53-27-9-35-56 4-35 18 10 36-14 54-1 40 36 80-14 118-26 22-5 27 23 36 37 5 17-4 36-8 53-11 19-49 0-54 30-2 18 2 35-4 52-2 7 0 11 5 15 13 11 29 17 44 7 22-14 48-21 73-21 28 6 52-30 77-14 14 11 31 17 48 7 8-3 17-15 25-8 17 17 34 24 24 51-2 40 41 30 49 52-5 10-32 1-42 13-41 40 4 75 50 57 18 8-1 37 3 52 0 9-11 16-20 12-35-29-46 16-70-3-17-34-64-37-80 0-12 20-49 16-49 46 1 18 21 29 23 48 4 25 31 33 44 52 17 28 46 1 64 16 21 31 56 13 83 5 33-10 24-64-10-62-21 2-41 6-60 15-6 3-14 7-20 3-16-10-29-30-20-49 5-5 11 2 15 4 27 23 50 11 72-11 16-7 35 10 51-2 29-13 4-45 17-65 9-9 16-30 31-24 17 14 36 33 37 56 7 31-22 17-39 28-29 18-5 50 5 72 15 31 51 46 83 48 13 14-4 40 15 57 15 21-7 62 35 55v-1c21-3 30 20 49 27 3 3 10 7 8 11zm123-57c-21 19-6 46-21 55-11 3-13-9-14-18-2-53-92-30-36-86 11 9 22 21 38 18 18-6 44 10 33 31zm10-64c-25 7-44-36-68-9-14 19-17 18-33 1-36-26-45 17-86-33-7-9 11-16 16-22 29-22-6-59 13-74 47-4 22-64-7-31-6 26-20 26-43 19-10-9-1-27 2-38 15-17 46 1 55-34 13-33-30-40-26-58 50-63 56 33 104-8 21-23-4-47-17-66-7-55 45-39-32-108-19-18 37-43 51-49 47-20 18 53 67 53 32 8 65-25 69 7 7 43 40 48 37 86 6 48 77 45 81-3 4-44 18 1 30 14 7 9 1 17-7 22-24 12-2 65-27 52-6-9-10-19-21-21-37-3-12 33-21 49-14 14-17 46-42 41-42-6-28 36-53 45-62-4-38 39-71 48-27-6 3-37-3-55 0-18 3-37 22-43 18-9 30-25 49-30 23-7 52-16 52-44-2-30-6-68-40-79-18-11 2-38-17-51-18-17-44-4-48 18-4 16-15 25-23 38-20 30 10 54 38 61 20 26-43 9-52 41-13 46-71 26-42 94 12 29-26 42-23 69 6 55 49 27 79 37 14 11 30 10 46 11 12 4 10 22 11 33 0 11-11 14-20 17zm74-110c40 5 45-31 44-60 3-17 26-7 24 7-10 32 22 50 49 51 37-2 38-51 14-71-15-27 35-29 34-55 0-20-17-52 14-54 48 3 59 3 34 51-4 19 10 32 25 42 28 22 28 54-14 53-16 3-27 13-31 28-8 69-49-24-84 50-18 13-41-18-65 6-8 8-18 19-29 10a62 62 0 00-52-15c-32-13 14-53 37-43zm127 331c6 35-39 27-42-2-14-34-53-8-57-27 12-27 53-34 27-75-11-20-42-10-46-36-5-33-37-17-47-35 0-12-1-33 14-36 9 1 14 11 18 19 10 23 33 37 48 57 20 21 49-13 69 1 5 11 10 22 17 32 2 4 1 10-2 13-40 33-22 54 1 89zm73 169c-28-11-4-56-36-67-9-4-26-4-24-17 2-12 9-38 25-26 13 16 28 29 50 27 22 0 1 83 59 65 31-14 13-64-15-70-10-4-25 0-24-16 7-49-19-31-17-59 19-63 37-19 79-38 12-3 20 6 27 13 50 76 60-1 114 45 17 14 5 51 38 50 40 3 31-42 35-68 1-32-44-26-36-62-1-30-40-40-58-17-17 28-30 4-42-12-14-18 7-44-10-61-20-26-81-8-64 29l11 29c-3 20-31-4-44 2-50 3-37-25-60-45-13-7-27-6-41-8-30-10 19-64-39-71-15 2-52 11-40-17 10-10 15-33 31-31 21 14 54-2 63 26 7 14 29 14 34 1 6-12 4-27 13-36 16-10 33 17 51 15 26 3 20 39 44 44 41 16 67-54 106-38 5 5 31 7 25 17-42 21-110 86-32 109 17 2 32 9 49 12 20-1 25 13 23 30 9 60 90 38 83-18-4-28 18-55-6-79-8-10-26-8-30-22-2-17-26-68 6-63 24 17 4 65 41 69 13 1 26 1 34 11 25 20-3 32-12 50-10 23 13 42 12 65 2 15 6 35 24 37 32 9 40-25 61-39 34-10 27-44 21-72-3-16-18-24-30-34-8-17 40-25 45-3 11 20 42 18 41 45 16 60 76 24 98-12 9-11 23-19 29-33 3-9 10-17 19-16 20 2 43-12 60 4 8 6 9 22-2 26-26 3-42 24-67 31-26 5-34 34-61 37-20 2-21 32-42 31-26-8-55 18-34 42 22 29 65-36 72 17-6 14-7 34-22 41-11 6-26 10-32-3-8-19-26-28-46-21-11 3-21-2-31-7-23-12-49 0-74-7-10-1-17-7-23-16-19-27-67 4-44 32 15 11 28 23 26 44 4 28 35 26 56 15 21-4 22 29 5 36-37 9-33 33-57 40-28-10-48 17-74 9-24-7-50 7-48 36 13 47-35 13-56 28-44 33 18 84-11 128-9 9-23 35-32 12-4-16-31-26-25-44 12-19 18-46-4-60-20-15-44 2-54 21-8 13-26 14-40 20-10 1-10-15-7-21 8-15 28-20 30-39 5-36-32-45-59-37-21 2-17-29-35-36zm-17 538c-4-24-46-31-23-58 14-16-18-51 13-55 52 15-27 51 27 82 60 20-8 85-17 31zm56-312c25-7 17-32 3-46-3-5-12-9-8-15 46-50 28 8 67-2 26-16 42-3 19 21-11 18-34 17-50 30-15 16 1 43-36 39v1c-46-5-30-23 5-28zm9 251c-3-16-24-31-13-48 15-11 9-47 32-44 26 17 64-29 69 1-12 57-75 30-55 101 0 4-5 6-9 6-11-1-19-5-24-16zm-122 910c-5 17-31 10-31-6-1-16-1-32-13-43-37-30 11-34 33-36 12 0 12 8 10 16-6 23 9 46 1 69zm228 21c-22-26-48 15-70-5-18-12-59-7-30-37 24-17 32-61 63-66 33 2 9 47 34 60 42 16 54 106 3 48zm282 56c-20-1-27 30-45 23-17-16-40-6-58-16-10-7-6-17 3-24 14-8 13-28 27-35 63 40 72-34 103 17 8 19-13 35-30 35zm126-70c-20-10-40-17-59-29-20-22-60 28-65-11 37-80 24-33 76-26 14-2 28-1 32 16 3 14 18 20 25 33 4 7 0 20-9 17zm845 243c19 5 29 25 44 36 2 2 3 6 1 9-17 19-37-4-57-4-22 1-33-19-35-38 1-31 31-5 47-3zm-63 73c22-1 23 28 44 32 29 3 57-8 66 31 3 11 3 23 13 29 25 21 43-12 61-3 8 18 37 25 37 46-5 21 0 78-35 63-20-11-13-36-21-54-13-29-42-7-56-23-5-10-6-22-16-28-25-18-38-43-73-31-3 0-6-2-7-5-2-28-41-56-13-57zm2 115c25-17 48 14 63 32 6 10-7 20-13 27-18 12-37-12-56-5-27 11-36-11-36-34 1-20 30-7 42-20zm-52-191c-1 11-12 17-23 14-25-13 23-49 23-14zm-114-80c14-13 20-32 35-43 24-9 39-55 47-3-1 3-5 6-8 7-49 7-6 59-43 74-14 1-21-19-31-26-2-3-2-7 0-9zm-153-357c47 2 94 42 36 76-17 5-23-23-38-28-19-9-29-50 2-48zm-83-302c-22-1-17-32 4-28 44 4 37 30-4 28zm34-110c-11 28-44 26-44-7 1-18-47-47-11-55 19 6 41-6 58 6 14 15 37 11 49 25 4 11-39 2-52 31zm-21 994c-14-2-49-17-30-35 12-5 18-29 33-21 10 14 27 55-3 56zm145 52c-3 15-22 33-32 13-5-17-26-27-25-45 2-14 4-28 4-42 0-21 27-24 37-7 10 21 44 12 48 33 0 21-27 28-32 48zm23-142c-17-7-35 11-51 0-49-27-2-68-49-76-31 3-79 1-69-42-5-14-27-17-34-32-18-35-61-26-63 13-25 29-51-24-15-34 24-8 7-40 27-50 28-10 44-33 70-5 34 19 56-27 33-51-11-16 10-30 2-46-4-13-3-30 9-39 20-11 31 18 16 31-25 20-10 50 19 54 6 2 19-1 20 7-4 16-1 37-16 46-27 9-32 38-51 56-11 11-14 25-14 41 11 20 47 26 63 6 11-15 25-26 41-35 25-11 27 29 8 38-22 21-13 59 20 61 38-6 33-23 76 1 27 25 6 58 65 54 20 4 28 32 35 49 82 155-38 21-38 130-1 11 4 26-7 29-24-6-31-27-35-48-6-22 22-33 21-54 1-24-20-35-40-40-20-18-1-54-43-64zm116 371c-4 21-37 0-52 4-11 1-14-10-13-17 5-103 48-74 53-137 5-15 36 13 53 3 41-17 24 59 82 38 14-5 22-27 38-23 19 4 55 26 27 43-13 2-26 2-38 7-9 4-19 4-28 2-26-12-48 31-60 10-44-80-80 26-62 70zm74 228c-8 24-41-10-66-3-9-1-5-12-5-18 7-23-27-47-8-68 60 19 14 68 73 81 3 1 6 5 6 8zm77 257c-64-9-35 131-112 45-4-8-9-18-18-19-14-3-35 7-44-6-16-28 0-42 15-65 10-19 38-11 49-31 15-25 33 12 54 6 31-8 44 31 76 19 43-5 10 63-20 51zm15-252c-20 8-28-25-49-25-17-2-17-19-18-33-9-37 68-59 5-102-11-5-28-7-28-22 0-25-27-48-7-71 6-7 16 0 21 5 14 22 38 29 57 45 22 23 2 52 38 72 24 20-46 71 20 82 10 0 24-10 31 0 1 17 30 64-1 63-22-20-40-38-69-14zM2936 3967c27-23 47 8 65-45 23-26 57 25 81-5 7-4 14-12 22-7 24 18 69 58 81 8-3-40 6-35 40-33 29-4 32-49 3-61-25-13-63-57-85-15-4 37-23 38-45 64-49 20 8-81-63-74-50 23-30-15-63-22-12-1-31 13-39 0-3-20-20-50 0-64 13-6 26-10 37-16 4-3 13 0 10 6-17 17-19 59 9 66 35 0 60-33 28-59-25-15-1-26 4-44 7-22-17-42-39-33-22 22-63 2-75 35-4 11-5 25-18 30-81 51-29-13-65-37-19-12-39 2-59-3-33 1-32 19-67-4-33-12-38 31-60 44-19 9-23 38-3 49 12 6 27 9 36 21 14 20-54 20-31 68 7 23 26 35 49 38 13 2 21 13 31 21 21 18 49-7 41-32-7-23-42-4-50-25-5-15-3-32-15-44-29-26 20-24 16-54-5-19 3-50 27-33 15 11 64 2 39 32-13 17 2 36-5 52-31 34 1 78 37 86 16 3 27-10 40-17 26-12 29 38 55 34 17 0 31-8 34-25 3-10 4-23 16-24 15 1 31-12 45-5 21 15 6 58-19 55-24-7-44 3-53 26-19 18-34-23-56-16-20 2-33 11-40 30-14 50-43-34-77 26-44 41-38-9-67-25-31-7-20-40-32-62-19-25-54 3-79-10-20-9-46-5-56 17-5 32-44 29-52 58-3 7-3 22-14 20-39-38-51-11-95-3-20 7-19 26-20 44h448c5-5 10-8 18-9s16 5 23 9h27c24-23 64 1 80-33zm-97-149c-34-4-30-36 5-34 13-1 21 6 27 17 1 13-22 15-32 17zm74 7c-11 1-32-5-25-17 11-3 31-18 40-5 4 11-4 23-15 22zm-315 163c-15 24-24-6-22-21 6-59 34-9 22 21zM1382 4000h26c-7-4-16-5-26 0zM815 3988c-5-20 21-32 13-51-6-34-56-39-65-4 1 25-20 41-25 64l-1 3h79l-1-12zM2158 3978c30-32-7-58 51-54 26-4 37 37 65 22 8-3 17-12 27-8 52 34 36-28 64-62 11-16 37-6 53-18 26-3 47 46 84 0 5-10 9-22 22-25 16-3 28-19 45-16 14 3 29 6 40-6 22-23-12-58-38-40-28 18-45-9-76 17-20 2-5-54 28-40 23-2 30-19 29-36-1-15-1-18 14-26 19-10 23-37 48-39 23-8 28-31 22-53-6-20 12-37 10-58-1-20 21-22 33-10 15 13-3 37 13 50 28 39 98 26 82-29-10-20-29-54 10-52 25 3 26 61 72 30 8-5 14-24 25-17 18 22 47 34 69 9 11-10 24-1 35 4 41 13 63-39 31-64-17-13-38 6-53 13-40 6 8-51-27-74-30-36 5-53 29-76 12-7 17 8 15 18-1 22 20 39 12 62 4 79 61 16 70 52-29 68 23 56-4 93-17 20-8 48-14 72-2 28 35 37 48 15 11-20 22-39 45-46 51-15-7-41 21-66 9-9 9-22 13-34 15-29 42 24 63 2 27-16-15-35-17-62-5-21-27-26-46-29-31-16-11-53-68-47-17-1-17-60-56-14-8 5-12-8-17-13-8-12 9-17 16-23 43-41-10-67-37-89-63-30-38 123-122 66-24-16-62 22-69 44-5 31 44 32 36 66-5 20-45-1-57 22-22 33-55 24-55 72-15 19-34-15-52-14-10-2-21-7-18-20 6-39 48-9 64-35 7-16 20-23 36-27 18-8 23-31 9-46-13-15-34-8-46 4-20 18-48-17-68 5-29 39-36 7-70 12-9 3-21 6-29-2-7-12-37-21-26-37 17-6 36-16 54-11 20 12 53 3 51-24-6-45-48-14-73-24-10-5-23-7-33-1-22 15-52 14-70 36-40 55 49 43 27 117-2 13-14 19-25 25-20 10-24 41-52 35-25 17-44 49-15 71 35 17 21 62-9 52-35-34-75-9-65 38 3 26 35 16 48 33 32 40 61 7 90-16 21-12 25-35 20-57-2-17 7-33 5-50 0-15 21-67 39-50 65 57-31 48 27 107 17 29-31 34-29 60 0 10 2 23-9 27-21 5-26 36-49 29-31-10-93 36-107-6-2-16-12-32-29-31-41 2-36 52 0 61 20 16-7 32-21 37-16 16-46 5-53 22-5 12 1 27 16 30 11 1 27 5 20 19-9 11-1 46-17 45-34-2-26-37-47-53-14-11-42-6-52 12a84 84 0 00-19 52c-4 17-35 5-34-11 2-15-10-35 5-47 18-20 45-32 57-56 5-17 9-21 25-12 60 38 73-70 10-55-22 3-21 41-35 38-40-17-5-63-15-95 0-10 9-16 18-20 18-6 25-25 38-37 14-11 23-25 29-42 7-20 51 39 72-11 3-27 22-28 33-47 5-25-30-29-40-9-17 21-59 4-60 40-1 3-4 9-8 6-18-13 5-22 11-33 6-44-5-41-36-58-22-25 30-31 16-55-5-35-43-37-65-15-15 11-48-13-31-28 16-7 33-6 45-21 32-33 35 18 59 26 17 6 38-5 51 12 5 7 13 12 21 12 32 2 35-33 53-50 40-52-22-51-31-76-1-15-11-27-14-40-24-4-56 14-49 41 2 17 15 24 30 29 11 5 10 25-3 27-15-2-20-22-36-23-9-2-19-4-24-12-16-18-7-38-6-59-1-22-25-32-43-23-21 15-24-7-33-21-15-23-53-16-64 10-11 18-39 27-36 52 8 27-19 42-43 36-27-20-78-13-69 28 4 16 24 29-1 38-19 9-22 31-30 48-27 44 49 54 3 85-6 5-11-1-14-5-28-24-34-58-34-93-6-42-71-36-68 6 9 53-17 33-47 18-44-31 35-27 31-57 5-33-30-52-53-27-8 10-15 23-29 23-34-8-50 41-69 12-7-9 7-13 13-17 52-46-50-89-45-15-3 20-80-29-74 60-11 28-12-58-102-17-26 12-16 43-8 63 10 20-4 44 9 62 6 16 56 45 13 45-20-2-44-7-47-31-13-32-35-24-42-66-33-50-91 15-38 48 17 26 7 65 28 91 7 10-2 21-4 31-12 40 35 49 59 21 7-8 39 31 30 35-47 30-14 50 10 78 4 12 27 20 19 34-5 7-15 14-23 8-23-27-69-27-77 13-20 92-29-46-89 9-8 11-19 39-35 23-17-33-52-25-30-68 7-26 39 3 67-23 13-8 19 7 26 14 19 28 68 10 62-24-11-62-68-10-73-32-3-91-80-28-90 25-7 10-23 4-34 6-34 4-67 13-98-5-15-5-17-22-26-33-13-19-42-2-55-21-18-38-59-13-69-41-2-10 5-18 9-27 12-21-6-41-27-48-13-7-6-24-11-35-17-39-69-30-81 8-6 11-19 11-30 15a31 31 0 00-11 50c60 43-8 21-15 59 0 15 0 31-12 41-10 10-23 3-34-2-18-8-36 9-55 5-20-4-45 12-39 36 5 16 12 30 8 47-3 40 25 33-16 66-9 21-32 17-48 28-21 16-16 56 15 56 31-4 37 8 62 21 20 4 31 27 52 26 39-5 29-46 6-63-4-13 31-21 38-32 25-21 96-54 50-90-23-22-44 13-68 11-19 0-53-33-27-45 12-2 24-4 35-10 24-10 44 26 69 9 32-12 19-63 32-59 11 24 39 42 63 25 6-3 15-16 22-10 2 33 19 73 57 51 11-7 20-19 34-16 17 5 41 8 42 30 1 27-35 21-49 35-38 22-84-9-115-30-24-16-50-2-61 20-10 22 9 45 14 66 25 39 53-7 72 9 13 18 6 51-17 56-21-1-57 6-51 34 5 21 25 26 41 35h132c4-5 5-13 2-22-5-11-13-27 3-33 17-4 35 6 52-2 22-8 40 15 63 9 36-3 16 27 14 46v2h80l-1-5c-6-12-19-25-11-39 10-16 9-44 33-45 40 4 50-32 66-21 54 81-9 26-36 50-26 23-7 41 0 60h47l1-3c14-26 0-56 34-45 58 9 8-105 70-21 7 13 18 21 34 23 9 0 20 7 14 18l-10 28h219c-10-14-25-28-30-42-18-30-50 0-65-21-5-14-24-30-13-45 6-7 15-15 25-11 18 18 42 12 45-15 7-15 25-22 35-35 3-3 9-3 12 0 24 21 15 52 53 64 13 8 33 45 7 47-37 2-37 30-36 58h177c0-13-11-28-24-38-11-19 9-42-22-52-17-10-22-32-41-40-23-13-23-44-6-61 11-17 7-38 8-57 5-26-35-36-17-42 15 0 25 18 42 18 40 7 58-40 36-69-3-6-2-11 1-16 18-17 8-46 28-59 10-6 17 4 23 10 17 16 43 14 64 23 22 6 28 31 48 40 12 6 15 18 16 30 2 12 10 20 21 25 12 5 57 42 40 54-19 16-41 0-61 2-30 11-4 37 15 43 11 7 23 27 12 39-21 19-54-17-75 1-19 17-6 58-29 64-42 8-9-32-32-49-24-13-7-38 15-33 43 20 62 10 66-38-1-18 13-32 11-50 0-29-39-47-59-24-15 15-16 36-20 55-14 25-48-12-67 16-13 25-65 57-25 83 39 7 35 33 69 41 13 8-4 36 1 51 2 16-13 23-23 33h132l-8-4c-20-9-70 11-31-30 7-5 16-4 24-4 28 7 54-55 63-26-1 14 0 27 2 40 1 8-2 16-5 24h67c-7-5-7-15 0-22zm887-632c7 5 42 16 34 25-14 26-56-6-34-25zm-186 113c7-12 4-32 13-42 14 4 15 24 21 36 3 13-6 26-15 36-13 6-23-19-19-30zm-303-17c5-10 11-30 25-26s34 36 13 42c-10-3-37-3-38-16zM839 3638c-9 6-28-13-19-21 34-6 18-40 44-44 46 11-9 51-25 65zm293 167c-28 46 20 73-35 83-19 2-32-15-23-31 11-14 24-27 19-47-6-30 41-37 39-5zm681-352c8-14 23 5 24 14-1 24-39 3-24-14zm-218-50c22-4 56 25 24 36-23 6-74-37-24-36zm-133 258c49-22 29-31 52-68 18-24-1-48-22-63-4-7 9-13 12-20 27-24-22-64 2-64 27 16 43 45 72 56 6 10-11 21-13 32-8 19 12 44 35 41 26-2 60-10 57-43 1-8 3-16 9-22 13-12 16-29 26-43s38-11 37 9c-4 17-7 33 0 49 2 19-20 28-25 44-16 21-76 7-51 67 38 44 10 48-24 71-13 14-19-9-25-18-7-12 3-21 10-30 16-39-33-24-52-33-17-7-33-5-46 8-24 21 35 61 3 72-18-9-63-20-57-45zm9 202c-1-12-41-28-15-34 28 24 60-2 63 38-2 39-42 26-48-4zm224-65c-6 8-15 3-22-1-21-12-47-8-68-19-32-9-37 32-63 38-19 3-23-32-40-42-8-8 23-45 32-38 48 32 47 12 85-9 15 20 34 40 61 25 19-9 41-2 59-14 7-4 15-3 14 7 2 36-44 24-58 53zm153-231c-4 25-52 22-31 57 8 6 22 27 1 22-13-10-23-18-43-18-16 3-49 21-53-8-3-21 25-17 35-30 17-22-7-57 37-57 17 2 32-4 45-13 31-5 11 32 9 47zm268-289c25-7 70-96 80-30-3 34-46 36-64 59-21 13-40-22-16-29zm-56 298c-27 9-36-35-64-32-30-2-49-7-77 8-31-5-8-41 7-52 16-5 27 22 45 15 20-8 58 14 60-19-4-19-18-37-24-56-4-14 11-19 20-25 29-21 10-54-19-62-4-2-12-6-7-12 34-31 109 36 104 74-3 25 60 55 9 63-30 8-16 40-26 59-11 11-14 30-28 39zm40 80c-22-8-12-47 7-53 21-6 33-23 28-45-6-21 13-36 18-56 1-4 5-8 9-7 12 10 60 12 46 33-23 14-28 41-46 59-6 6-10 15-12 24-1 18-32 47-50 45zM1991 3670c1-48-72-41-63 5 7 35 62 33 63-5zM2448 1196c-20-3-35 38-8 37 26 7 34-34 8-37zM2475 1015c-1-15-12-29-28-29-33 0-33 44-38 66-5 37 46 38 64 17 12-14-2-36 2-54zM1298 459c-42-17-58 54-9 52 27-3 35-41 9-52zM2757 1285c-1-28-50-31-51-3-5 36 53 41 51 3zM2599 1380c-6 24 37 30 36 4 0-22-31-24-36-4zM2564 1362c-9-38 67-21 61-69-8-50-94-24-91 19 12 29-31 32-29 59 2 95 108 70 59-9zM816 541c-25-3-60 0-67 30-3 19-9 39-30 45-15 1-31 21-45 11-18-20-2-64-37-70-30-5-24 38-47 43-33 2-32-14-27-40 0-34-41-42-65-22-22 12-40-56-80-7-6 9-10 22-22 23-24 5-82 20-52-23 17-33-16-64-49-58-17-3-18-27-35-30-21-6-36 16-31 35 4 18 1 18-13 24-34 16-26 42 4 57 8 11-8 26-11 38-9 13-26 0-38-3-31-14 25-43 4-64-20-37-110 0-95 37 25 35 9 71 45 83 44 6 102 52 67 99-12 17-5 34 3 51 0 20-42 16-38 54 2 12 4 34-13 34-10-2-27 2-31-10-2-31-29-63-58-36-6 6-22 16-23 1 2-13 14-22 20-32 19-15 44 35 74-21 4-26 40-34 38-62-3-31-45-40-60-14-8 26-31 36-48 54-21 14-33-17-26-34 7-28-20-38-30-48v265h4c24 18 11 67 61 54 21-5 56-30 30-51-20-9-47-31-20-50 40-28 32 35 67 17 18-17 38 0 54-19 19-25 50-55 20-85-5-18 31-18 28 1-1 10-2 21 6 29 24 24 50 28 14 60-14 19-14 44-28 63-12 28 23 56 45 40 13-8 28-25 42-11 7 8-4 21-1 31 0 18 19 27 35 25 17-2 32 11 49 9 49 0 34-86-11-71-13 6-44 17-47-5 6-19 3-36-7-52-11-28 25-44 26-71 5-13 20-5 29-3 67 5 40-57 43-97-2-23-37-35-53-20-23 17-6 86-34 93-24-4-49-43-37-65 31-31 6-78-36-68-39 1-39-55-25-80 14-13 27-30 10-47-41-27-18-18-17-56-1-10-5-23 7-24 8-2 17-1 20 7 7 14 11 29 24 38 16 12 15 15 5 30-6 9-13 21-8 32 13 23-14 44-3 65 14 33 45-5 55 18 5 22 30 43 52 27 13-9 11-32 28-37 19-3 35-12 36-33 5-19 15-36 15-56 2-39 33 8 51 11 14 10-3 29 4 43 10 45 70 9 62 39-3 10-6 21-6 32 0 9-6 17-13 23-8 7-13 17-20 25-9 8-19-4-16-14 13-24 5-53-20-65-32-16-76 26-71 59 3 19 31 23 28 46-2 19 13 41-5 56-21 19-7 65-42 67-55-8-60 67-11 68 18-6 49-42 56-6-2 16-1 31 7 45 10 22 9 48-21 49-76 43 60 72-37 104-16 4-17-22-30-28-16-10-16-32-30-44-35-28-70 23-42 47 16 10 24 23 19 42-1 19 15 32 17 51 2 8 6 15 12 22 5 8 13 16 8 26-15 24-25 50-2 73 8 13-11 27-22 16-15-21-7-52-25-74-15-33-66 0-52-22 71-62-11-66 7-113 7-46-47-37-26-97 6-34-31-43-53-23-16 8-26-15-39-22-23 10-63 18-64 49 3 17 2 33-11 47-14 19 8 55 31 47 17-9 23-26 21-44-2-19 31-43 37-16 3 12 10 22 20 29 18 15 21 40 34 58 2 27-37 6-50 20-19 17-20 13-30-7-27-54-93-10-66 37 37 53 65-14 80-8 7 10 14 29-3 31-16 2-26 20-42 18-32-26-81 14-49 48 17 15 13 52 41 53 42-9 33 45 12 43-11-10-18-29-35-28-21 3-83 13-61-25 6-13 1-26-5-39-5-36 38-39 5-87-7-11 4-20 10-28 28-28-22-51-4-75 40-36 23-144-37-94v351c3 0 5 2 6 5-4 20-2 44 23 49 24 0 44 13 67 16 32 15-15 53-34 31-15-17-39-25-57-13l-5 3v63l2 3c1 6 1 10-2 12v149c11 10 27 14 41 2 9-5 18-28 30-15 12 19 64 35 33 61-8 5-15 12-19 21-18 31-62 8-85 27v50c8 7 18 10 28 9 20-9 34 2 51 10 41 4 7-47 33-59 40-11 18-40 43-56 27-7 37-42 13-62-38-18-10-79-61-81-22-6-50 30-49 17 12-20-13-70 15-63 12 2 24 2 35-5 34-16 43-71 86-70 67 20 33-34 106 0 50 1 41-42 40-73 5-14 21-23 36-14 19 10 39-5 58 6 23 11 42-10 66-7 17 1 34-11 31-30-5-37-45-12-68-19-9-5-33 2-34-11 10-17 13-36 11-56 0-18 21-21 33-31 22-14 4-37 8-57 14-49 96-4 40 24-24 22 14 40 6 63-10 25 4 55 33 53 16-4 32-5 48 0 24 6 39-21 36-43 4-20-21-34-13-54 24-41-21-55-14-94-9-49-104-13-113-60-8-53 61-7 47-87 12-38 53 31 79-15 11-20-2-46-25-47-16-1-35 15-48 0-11-14-10-34-22-49-5-6-6-14-5-22 3-12-4-33 11-38 23-3 38 23 60 22 40-11-15-49 10-70 27-15 10-60 45-52 18 8 69-36 54 8-13 31-76 20-65 64 3 12 13 19 21 28 9 20-46 20-33 52 12 29 76 37 89 5 4-34 28-37 56-46 31 9-32 34 52 75 26 20 47-10 71-19 30-7 36-48 11-62-20-11-37 7-55 15-16 8-34-8-20-23 30-42 16-112-42-63-5 3-9 8-15 5-7-3-5-10-4-15 5-20-5-38-3-58 1-10-3-20-9-29-29-43 40-38 49-6 5 29 37 34 47 59 6 19 26 30 28 50 1 8 4 15 9 21 48 60 104-15 52-58-21-14-21-41-42-54-18-13-5-43-25-52-17-7-37-13-41-34-4-25 16-61-25-70zM386 657c-18 0-43 20-44-10 0-31 65-53 68-14-3 16-7 24-24 24zm-153 715c-2 9-5 19-13 25-22 11-13-26-24-36-21-21 7-42 29-38 68-6 10 12 8 49zM950 1014c-11-24-39-28-63-29-35-3-83 44-37 68 16 6 35 1 51 8 49 31-24 42-48 44-34 10-28 49-24 76 2 40 60 51 69 9-3-40 38-34 41-71 8-24 54-12 54-44 3-31-29-39-43-61zM849 1253c-16 26 36 36 35 7 0-20-27-26-35-7zM1045 998c26-20 12-63 39-81 61-29 14-86-37-87-29 0-68 22-58 54 4 13 9 26 5 39-7 34 1 114 51 75zM406 2559c23-1 22-37-2-35-22 0-21 36 2 35zM1234 2332c28 10 48-25 29-46-16-26-57-61-59-7-1 21 6 47 30 53zM925 616c-23-10-41 36-11 36 21 1 31-27 11-36zM259 2539c-22-6-46-3-56 20-15 41-34-17-59 7-9 5-16 13-20 23-17 55-67 8-89 54-9 9-23 10-35 13v192c34 20 70-26 43-56-12-18 1-39-9-56-9-23 7-58 33-59 34-12 64 14 45 48-13 24 20 45 6 68-14 20-37 43-18 67 48 48 80-36 76-76 3-18 29-14 43-17 47 7-5 70 58 74 12 2 18 12 24 21 14 20 45 22 58-1 20-37-16-56-45-54-34-11-21-46 14-40 39-5 27-54 46-79 5-17 20-32 15-51-2-21-14-67-41-40-6 8-3 17-3 26-7 31-51 18-73 20-29-13 7-49 5-71-5-45 45 2 62-44 7-24 27-31 50-35 56-32-10-102-49-45-32 25-48-50-87-15-28 19-16 56 10 72 10 8 17 37-4 34zm-69 160c-18-9-3-39-2-55 5-7 30 18 49 13 16-2 16 14 17 26 3 41-40 26-64 16zM0 623v51l14-8c20-17 0-31-14-43zM319 3218c-1-6-5-14-11-18-14-9-17-25-25-38-23-32-73 7-51 38 10 19 35 14 49 28 13 16 38 13 38-10zM415 3151c-4-27-45-28-49-2-7 41 55 40 49 2zM570 3983c-13-17-12-45-30-57-15-9-41-1-46-21 3-36-33-46-50-72-40-36-76 11-52 51 6 13-9 38-23 28-11-16-14-43-40-41-12 1-22 11-34 11-9 0-23-6-20-15 8-13 14-31 31-35 9-2 18-6 26-12 19-18 52 7 66-15 27-64-34-46-47-67-4-11-5-24-17-29-19-15-41 6-61-1-14-9-36-3-45-18-19-31-1-123 42-66 1 19-31 18-24 45 9 39 47 24 55-7 7-17 30-6 44-7 15 2 12 19 10 29-4 21 17 38 37 30 12-4 17-16 24-26 29-36 16 46 92 36 15-5 31-18 31-36-6-22 14-30 31-39 19-8 39 49 75 4 20-22-19-42-1-58 9-5 29-18 33-1-9 30-13 55 23 70 21 8 57-15 51-39-6-30-42-45-14-77 8-10 11-22 15-33 14-24 52-37 47-71-15-45-75-8-78 25-8 21-33 28-41 50-27 34-42 1-36-30 2-12 19-8 28-11 17-2 25-21 20-35-10-24-43-22-55-44-1-28 43-11 59-24 27-7 44 41 75 13 14-12 12-30 11-47 0-10 11-14 18-18 15-7 14-26 25-36 51-53 35 1 89-3 32 4 9 56 44 58 29 2 29-30 29-50 4-26 25-26 45-26 19-3 33 14 51 15 25 5 72 3 60-35-44-71-78-14-91-65-31-42-35 36-63 17a88 88 0 00-40-19c-24-8-6-52-46-53-25-7-32 28-51 23-11-5-21-16-33-10-13 3-21 23-34 19-21-14 12-46-11-67-29-26 21-34 13-66-3-55 31-11 57-10 41 1 15 46-12 50-51 32 19 90 42 30 11-18 40-14 45-37 3-18 13-33 20-50 8-32-26-50-54-41-14 1-26-8-34-19-6-10 8-20 10-31 9-23-15-50-41-39-14 7-27 17-43 9-20-8-34 13-52 13-17-5-51-1-41-28 13-35 74-26 84-67 21-52 39 62 87 23 11-7 21-35 33-13 23 30 52 15 38 66 17 66 101-47 42-64-21-5-27-26-40-40-27-50 23-47 55-61 19-5 29-31 51-21 11 7 27-7 36 3 7 22 25 48 51 39 8-2 18-12 27-6 9 7 16 27 0 31-19 2-32 27-52 20-10-3-20-10-31-6-7 2-18 4-15 14 5 15 8 31 10 47 13 25 6 93 51 55 17-14 47-12 50-39 4-23 25-41 19-66-6-15 5-23 19-26 34-11 16-45 36-59 12-4 24-9 33-19 35-22 8 32 18 46 9 14 5 30 4 45 1 14 11 40-12 41-55-19-75 16-84 65-1 8 0 18-9 22-17 6-38 10-44 30-16 71-43-4-88 16-16 1-30-9-40-20-3-6 5-11 7-17 18-24-26-46-33-18 1 32 32 23-5 54-15 20-3 47 19 52 15 3 36-1 42 16 6 39-70-21-69 44 5 19 22 32 21 53 16 54 60 8 80 37 8 27 32 36 54 49 22 19 45 4 66-10 22-3 13 39 31 50 32 19 51-26 76-37 10-4 16-13 19-23 14-54 49-16 49 21 0 22-56 5-45 56 19 45-34 32-58 21-21-1-31-27-51-23-43 3-24 50-61 62-36 19-1 70-46 80-27 3-46 16-40-23-6-34-58-4-79 0-23 11-58 6-73-16-24-19-75-55-100-23-16 25 8 50 8 76 3 23 27 42 53 31 19-12 36-3 50 11 17 12-5 26-9 40-17 70 83 20 82 47-25 61 23 45 33 80-3 60 70 53 75 11-2-27-43-38-27-58 14-18 8-51-22-48-13 2-27 10-41 5-14-7 18-40-6-61-58-42-2-15 37-49 20 12-17 56 18 79 13 17 40-2 50 14 1 22-11 50 17 60 39 15 63-60 26-75-5-2-11-4-17-4-24-1-14-35 1-41 10-2 24-17 34-7 16 26 11 65 39 83 38 25-28 32-30 64-13 24-49 10-64 35-26 28 32 78 61 47 12-13 23-25 41-27 39-11 22-72 58-85 31-8 46-53 11-67-11-5-31-6-33-22 0-15-2-36 13-44 61-21-10-65 68-78 40-20 6-49 17-69 12-5 25-27 39-19 24 40 50 21 86 21 24 3 37-17 41-39 12-24 41-2 49 15 7 13 18 28 35 22 10-4 8-15 9-24-13-48 54-48 46-93-3-16-3-32-4-48-7-31-50-30-53 3-4 18-30 55-40 22-6-21-37-17-39-36 11-37-11-67-50-66-15 0-24-23-5-21 37 19 53-28 88-24 41-8 23-69-13-55-13 5-25 17-40 10-21-9-20-44-50-36-36 4-13 39-31 52-35 13-46-50-65-70-10-14-9-18-3-32 12-14-13-49 11-49 20 4 26 32 48 29 23-1 36-29 21-46-13-12-39-31-14-45 33-7 58-15 33-53-8-23 29-7 39-20 27-22 4-59-26-57-29-6-36-39-72-20-10 3-20-4-29-7-23-9-38 18-60 17-16 0-26 11-37 22-16 12-39-9-55 6-20 12-6 44-30 50-31 13-35 17-55-12-23-26-54 12-63-5-4-23 19-38 40-33 23 1 31-22 45-35 22-21 52 23 72-8 14-21-6-47-30-47-5-1-25 4-19-8 9-4 20-3 29-9 30-21 56 16 86 11 14-3 27 2 38 10 23 10 50-1 74 5 62-8-11-77 50-71 18 13 40 19 58 2 21-16 32 22 55 21 36 7-13 35-29 35-55 15-12 102 30 67 43-50 53 45 96 14 41-28-31-48-15-81 11-79-64-13-52-64 6-25-29-36-24-60 5-16 26-4 38-3 14 3 11 18 12 29 1 22 21 35 41 36 16 3 28 15 41 24 14 10 14 30 19 45-1 32-66 41-17 83 34 30 76-14 61-50-5-7 3-17 9-9 9 13 23 21 36 29 21 16 51 3 50-21 0-11-1-22 8-30 20-13 22-47-6-52-26-4-32 34-59 30-19 0-21-26-36-34-20-12-11-37-20-55-40-80-50-33-79-60-3-30 40-65-1-87-18-6-45-25-18-39 17-12 24-35 49-33 22-3 47-25 36-50-15-35-69-40-82 3-3 17-15 32-34 28-6-1-2-8-1-12 24-46-23-54-37-92-19-36-62 5-80-20-9-84-113-12-47 24 12 4 30 4 32 20 13 55-67 10-64 68 6 13-6 74-23 40-3-15-14-32-5-46 27-31-7-59-17-88-26-48 1-79-48-87-67-11-28-35-63-70-19-14-12-54 14-48 9 4 18 10 27 9 46-2 21-75-15-53-25 36-40-8-70 8-39 20 9 40-35 84-6 10-20 16-28 4-7-12-29-30-10-42 15-5 29-10 39-23 22-31-29-55-27-86-4-26-34-27-47-46-11-18-44-6-35 16 21 39 4 30-26 39-44 20 1 84 35 53 5-6 13-17 19-9 7 26-24 25-38 37-21 7-42-11-64-5-34 1-60-60-87-9-5 9 0 26-11 29-21 0-50-3-60 20-21 65 72 70 75 12 1-8-1-22 12-20 16 5 21 24 27 38 2 12-13 12-21 16-40 15-14 76 25 61 26-19 38 16 63 17 43-3 37 106 25 131-20 26-40-61-85-2-11 22 12 39 29 50 4 11-19 19-27 25-18 3-11-30-20-40-3-9-4-17-1-26 10-35-28-57-40-86-30-38-53 16-80-16-20-17-43 2-65 2-20-2-32 18-49 20-26-5-63 6-52 37 14 47 68 15 74 50-3 18 7 51-20 52-12 3-22 9-28 19-9 19-32 24-41 43-10 23-29 47-56 36-35-9-57 42-24 58 16 9 34 11 50 18 27 14 36-26 41-45 6-22 46-29 33 2-6 30 24 38 48 36 30 4 66-39 91-9 3 11 7 35-11 37-17-1-34 9-51 7-35-18-87-9-71 39 11 36 59 13 66 40-1 21 12 45 36 43 28-11 47 7 54 34-4 22-36 13-47 0-8-7-18-9-29-10-18 0-30-17-47-20-22-3-24-34-48-30-22 9-34-16-54-14-34 11-67-14-90 22-9 11-22 2-32-1-30-6-42 25-30 47 4 22-25 35-22 66-2 17-21 12-33 16-26 7-24 34-13 54 5 16-4 32 1 48 1 10-2 20-4 30 4 69 32 13-7 107-4 26 36 37 52 17 9-13 19-26 25-41 9-20-15-35-9-55 3-12 6-24 2-36-11-21 8-38 10-59 1-5 5-12 11-10 30 18 50 16 63-19 7-17 1-35-11-48-12-15-17-34-26-52 1-35 41 3 60 0 14 3 24 47 25 62-2 55 40 43 77 27 16-4 24-25 8-35-12-7-32-6-31-24 1-14-2-27-11-39-16-22 21-40 36-25 20 14 7 48 32 59 30 14 29 59 69 57 7 0 15 2 14 10-5 24-31 36-33 62-1 6-6 9-12 8-17-1-28-13-42-22-18-13-54 2-51 25 16 48 2 62-43 75-22 3-31 28-52 30-15 0-30 7-37 21-10 21-40 28-38 55 2 23-19 46-41 48-17-1-39-3-47 17-6 26-21 20-42 17-25-3-33 30-58 29-12-1-23 4-32 11-15 2-5-14 4-16 14-8 23-25 25-41 5-67 90 19 102-42 3-36-27-101-70-78-14 10-27 22-43 29-30 9-38-36-55-51-27-27-73 2-63 38 11 25 35 43 52 64 12 14-9 27-21 29-16 5-24-13-35-21-21-17-6-50-27-67-17-17-41-7-52 11-10 35-59 22-67 57-8 37 15 83 57 70 14-3 23 9 32 18 49 45 56-66 84 10-5 22-37 3-51 16-35 7-85 20-55 66 16 13 28 30 41 45 24 20 51-4 50-33 3-17 18-28 25-43 11-18 37-7 52-21 18-5 30 23 51 15 21-6 32-28 57-24 10 0 18-5 24-14 8-9 8-30 22-31 20 8 42-6 56 2 8 22 52 39 39 54-50 30-12 61-56 86-18 13-53-9-52 27 1 8 5 18-3 23-19 16-44 38-70 20-11-8-24-19-40-15-25 4-33 28-40 50-12 41 68 22 54 60-9 79-68 21-42 104 2 14-19 14-26 22-24 18-11 50 12 62 8 4 6 18-4 18-7-2-15-5-22-3-31 11-24 66-46 88-31 53 24 45 35 71 2 21 17 37 21 57 8 26 19 53 34 75-1 24-33 25-22 59 2 18 34 21 28 40-7 11-13 22-12 34h126c-12-20-20-52 7-50 14 7 27 13 42 10 17-4 23 15 6 21-10 3-17 12-26 19h70c5-9 15-14 26-6l5 6h108c-15-7-36-2-48-17zm651-578c-13 5-42 31-44 4-5-28 53-32 44-4zm230-218l29-53c19-21 28 0 25 20h-1c3 47-13 97-67 61-7-9 11-19 14-28zm-49-537c10 10 32 5 36 20-1 2-3 4-6 3-19-4-41 0-56-15-9-16 18-17 26-8zm-184 278c3-15 20-5 18 7-4 17 34 48 4 52-33-1-20-37-22-59zm49 178c-7 15-4 31-5 47-1 14-24 21-30 7-4-13-4-28-17-36-30-25-76 52-78-23h1c4-35-25-43-53-36-18-6-10-42 9-45 12-6 24-1 34 6 17 9 34-2 51 2 33 9 57 34 83 52 10 6 9 17 5 26zm153 110c-10 19-28 36-37 5-5-15 32-15 37-5zm-59-222c21 5 17 32 33 43 18 13 19 36 22 56-5 29-37 2-46-11-8-12-16-25-32-30-22-4-29-26-39-43-6-11 2-19 10-24 17-12 34 8 52 9zm-45-80c-2 32-38-4-51-11-10-36 59-19 51 11zm196-728c-1-21 29-29 41-13 31 37-24 50-12 90 6 17-12 21-26 17-15-9-6-34-18-48-6-17 15-29 15-46zm-93 146c9-8 18-29 32-24 14 9 32 11 44 24 23 30 67 12 62-26h-1c-4-44 69 21 49 36-18 10-30 23-38 41-9 10-23 0-33 1-38-6-38 36-59 54-11 7-24 25-36 11-15-16-21-37-5-55 20-29-27-41-15-62zm-89 159c-33-1-43-36-11-48 17-5 16-44 36-34 19 17 0 47 14 69-3 14-30 9-39 13zm-111-399c22-35-45-74 28-83 26 4 5 39 22 54 8 10 17 16 15 31 0 27-35 23-52 35-32 13-28-20-13-37zm-188-118c-11-2-21 5-31 9-9 4-23-10-14-18 30-5 81-44 104-11 8 14 14 29 30 36 29 7-2 41-18 39-48 4-25-53-71-55zm-269 341c-3 17-27 19-41 24-23-13 45-65 41-24zm7-35c-13 4-18-25-5-27 12 1 38-15 41 3-5 14-25 16-36 24zm55-65c-16 0-28-36-9-39 35 1 56-30 64 23-2 18-40 8-55 16zm12 96c-1-26 29-24 46-35 10-7 34-2 28 13l-13 24c-10 37 36 65-37 65-7-1-10-8-11-15 2-19-11-34-13-52zm14 206c-10-1-7-13-5-19 12-73-4-43 76-57 47-20 6-53 24-74 17-9 54-65 56-14 1 26 15 50 24 74 29 33 75-14 48-47-10-18 0-42-17-58-9-8-14-18-11-31 4-17 3-40-14-50-5-5-23-8-19-17 7-7 19-16 27-8 7 11 13 24 27 26 25 2 44-1 66 14 29 11 53-28 34-50-12-19-53-51-41-74 18 15 13 27 46 29 24 2 30 39 58 33 64-14 27 23 61 37 31 1 24-29 6-42-8-12 4-27 5-39 21-28 33 23 39 38 5 20-17 40 0 59 28 22 12 52 29 79 8 18-18 24-26 9-14-19-41-22-56-6-13 19-2 48-25 63-17 12-33-16-53-14-16 0-30-6-42-16-6-8 9-13 13-19 29-25 19-58-19-64-24-3-41 25-34 46 1 18 30 22 30 37-31 21-11 47-21 76-5 27 10 55 15 82 8 15-10 18-21 21-23 10-27 40-49 53-42 25-54-74-5-61v1c66 3 44-85-14-57-34 4-25-53-76-22-10 7-22 11-34 11-41 0-31 43-54 50-16-1-32-1-48 1zm33 130c-2-30 39-30 60-37 31 8 81-19 73 36-8 17-39-17-61 7-10 8-19 17-30 24-10 7-13 19-16 30-10 20-46 12-55-6-18-24 31-24 29-54zm-380 985c-8 17-33 10-47 15-21 0-19-40-45-45-21-2-26-32-1-31 33 11 57-3 91 17 16 9 4 31 2 44zm263-431c19-16 44-27 48 7-2 52-64 49-63 85-1 11 4 25-7 32-20 19-51 1-35-23 16-15 15-38 31-53 15-12 11-35 26-48zm-214-238c13-24 36-47 65-44 16 4 45-33 52-7-4 19 3 36 16 49 19 20 45-31 62-11 8 21-1 66-31 50-12-10-20-35-39-27-19 5-39 7-51 24-23 13-56-3-62 36-2 8 5 28-9 27-21-6-30-27-27-47h-1c-4-23 18-32 25-50zm-28 296c62-23 17-33 19-62 16-24-5-57 23-74 20-13 3-43 19-51 53 3 47-67 76-24 4 19 23 42 41 22 10-24 21-24 35-2-2 23-35 36-48 55-14 21 10 35 29 31 34-5 32 29-1 24-28-4-41 48-57 28-7-12 1-26 0-39-1-43-63-50-75-12-8 16 0 31 9 44 11 16 2 34 7 51 5 18-6 35-8 53-4 20-32 48-32 11 1-29-57-33-37-55zm-180 169c12-1 21 8 31 13 21 12 51-10 40-33-6-17-22-20-38-21-18-5-27-26-45-35-4-12 20-9 27-13 25-3 30 39 58 30 29-9 24 6 22 28-9 118 123-21 35-38-9-2-23 7-30-1 0-12-8-46 9-46 30 5 49 32 78 36 9 1 20 4 19 16-1 73 54 70 52 110-34 45 5 44 5 80-13 21 18 33 4 45-24 11-10-19-16-30-10-15-28-24-35-41-5-13-16-25-32-24-21 0-43 8-64-3-12-7-26-7-39-2-22 7-44-8-67 0-16-1-43-10-47-27 0-21 8-44 33-44zM766 161c15 37 72 20 62-20-3-20-26-28-33-47-7-14-17-25-35-25-24 0-45 27-31 50 10 16 29 23 37 42zM38 3087c-14-18-26-17-38-12v65c29 3 55-22 38-53zM459 43c21-2 33-20 33-41V0H385c8 12 18 23 22 35 11 16 35 9 52 8zM195 31c13 1 24 7 29 19 20 23-18 57-29 37-10-39-45-34-62-67-11-17-40-21-59-5-17 16-50 11-56 39-2 16-9 20-18 18v56c14-6 26-3 35 14 1 16-33 31-5 49 9 4 16 0 21-5 14-11-5-28 3-39 34-12 40-50 59-41 10 7 30 27 9 34-64 20-17 62-40 76-44 0-53 30-38 68-4 23-32 15-44 37v239c22 28 60 11 66-17 10-25 37-40 48-65 26-18 50 9 67-39 17-37 36-21 65-23 32-9 35-51 11-70-8-12 2-49 16-52 35-8 10 18 9 36-7 38 48 52 66 21 6-8 7-27 20-24 24 12 56 1 51-30-16-30 7-57 31-25 25 21-8 73 36 80 9 1 26-3 22 11-5 20-15 30-28 9-23-28-67-1-83 23-10 19-29 11-44 6-47-9-45 76 1 61 15-5 29-5 44 1 17 8 35-10 53-2 23 12 51-2 49-30-5-30 15-10 30-5 13 5 21 14 23 28 7 25 34 34 40 60 15 31 74 3 51-27-26-21-22-52-48-68-20-13-7-42-25-57-10-19-54-7-47-24 27-26 66-14 46-71-3-19 24-27 24-47 5-34 32 5 36 20 12 27 44 21 68 25 22 2 38-24 24-41-9-12-25-14-33-26-14-20 22-31 14-52-8-18-3-38-9-57-1-7-4-18 4-23 19-4 34-27 11-39-24-11-34 44-58 9a68 68 0 01-16-36H517c2 6 5 11 9 16 21 32 7 83 65 60 23-4 30 26 39 42 4 24-37 26-34 52 1 23-6 33-26 15-15-24 45-37-7-88-17-13-41 11-57-4-27-40-84-2-48 34 31 23-2 59 47 77 4 3 9 9 6 14-10 5-25-12-42-4-44 29-49-29-73-53-34-42 33-52 17-92-5-22-24-22-42-16-17 6-19 24-23 40-8 17-34 4-49 11-9 2-16-2-21-11-6-33 72-4 12-80-6-7-13-11-20-13h-97c0 14 3 27 22 31zm-86 397c-5 30-45 9-54 40-3 9-12 29-22 15-18-23-36-55 1-68 19-5 20-35 40-32 18 6 36 23 35 45zm249-173c16 1 21 16 12 27-6 8-9 25-21 25-14-4-27-12-42-13-19-10 44-36 51-39zm-76-73c9-29 62-9 40 14-30 16-72 28-81 65-8 17-34 8-43 25-10 15-9 39-33 31-18-4-42 10-57-7-12-17 20-37 9-62-1-7-6-18 2-22 11-4 30-13 37-1 4 17 12 34 31 35s29-23 21-38c-11-16-11-28 8-38 22-11 45 28 66-2zM2488 88c-22 14-8 58-38 39-19-11-43-2-63-12s-46 10-37 31c4 11 13 16 22 20 16 7 25 20 35 33 8 13 4 32 20 40 4 4 14 7 12 14-7 17-13 42 8 53 8 7 34 0 28 17-7 17-9 36-19 52-5 9-10 17-8 27 14 63 67 4 80 40 8 41 36 22 47 47-3 32 31 44 35 73 2 19 32 24 29 40-14 15-29 30-29 52-2 16-19 26-11 43 7 34 80 3 59 51-15 22-45 29-64 48-26 18-16 61 16 63 16 2 28-8 40-17 25-14 55 6 83-6 31 0 25-49 56-45 13 3 28 6 40-4 10-9 6-24 1-34-7-16-26-8-40-13-12-5-2-17 1-25 7-16-14-35-28-23-7 6-8 15-11 22-3 12-25 20-30 6 2-22-2-41-15-58 5-21 45 11 61 0 32-14 21-53-6-68-13-15 15-21 25-22 38 3 53 59 93 59 23 1 35-31 18-47l-29-25c-27-15-62-13-80-42-54-43-56 65-123 12-12-10-22-20-26-35-2-25-37-20-42-41 4-56-46-36-45-67 6-23 36-21 54-15 18 10 6 41 29 49 26 9 17 22 24 41 9 16 36 7 34-12-9-24-9-27 13-42 18-17 10-44-11-52-16-5-33 4-49 0-18-6-5-30-14-43-12-28-49-28-69-9-17 11-38 4-57 9-28 4-28-6-15-29 11-14 29 6 44 1 40 1 21-72 63-60 18 10 32 37 56 24 28-22 46 14 40 39 1 21 26 25 37 39 51 46 58-62 102 4 24 25 61 5 87-5 23 1 29 58 74 23 41-53 71 45 46 74-17 37 40 45 42 83 2 43-27 11-48 8-20-5-23-31-41-39-25-17 24-72-49-75-39 5-85-45-117-3-11 21-30 0-49 2-32 1-64 39-35 67 16 20 44-3 60 16 11 14 28 23 46 15 38-30 39 22 85 3 2 0 5 1 6 3-4 15-21 23-23 39-8 31 24 37 44 49 26 15 5 45 17 67 7 13-6 22-16 29-38 30-2 46-29 87-10 26 17 42 31 60 10 11 29 16 43 3 16-30 79-39 43-84-48-32 33-48 0-88-27-26-30-53 3-74 17-8 19-45 34-43 63 28 48-29 57-68 10-25-28-37-20-59 22-27 7-53-22-68-26-20 2-37 25-30 17 4 28-13 44-16 18-1 12 20 13 32 0 22 26 41 47 29 13-5 20-27 36-22 59 19 42 42-7 58-25 11-53-23-74 9-33 48 64 65 14 109-22 38 45 59 50 17 3-12-9-27 3-36 22-19 67-2 72-40 2-14-4-37 14-40 10-2 25-1 23 12-9 27 0 51 18 71 8 18-24 46-39 28-33-34-72 20-75 51 6 42 50 28 66 1 26-23 1 33 30 48 5 5 14 11 10 19-24 24-23 67 18 67 11-1 22-6 32 0 15 13 37 10 51 22 6 11 36 19 31 31-36 53-38-25-71 15-5 15-13 26-26 34-20 17-14 52 14 54 52 4 24-46 47-65 17-7 21 24 32 32 13 22-61 46-4 90 17 10 45-2 48 25 4 30 49 26 26 60-18 55 51 34 61 75 2 3-1 7-3 8-36 3-37 34-55 57-25 39 5 34-49 36-13 4-22 21-15 35 7 15 29 17 31 36 0 15 6 27 22 29 31 11 41-33 20-48-11-7-24-15-19-30 20-22 72 39 97-11 10-20 32-32 31-58 7-30-59-32-11-57 17-11 11-38 32-44 26-2 8 31-5 38-18 20-7 56 22 58 31 6 43-25 48-50 10-20 25-16 19 7 0 29 24 41 43 37 25-1 35-31 61-30 20 2 28-23 46-23 16 2 35-4 38-22 5-45-34-27-42-46 12-68 26-33 50-74l7-8v-80c-22-1-46-2-55 20-3 8 2 17 5 24 14 22-2 57-30 52-23-3-36 19-54 29-28 5-12-32-6-46 12-20 63-4 59-58-4-12-11-25 0-36 16-17 25-52 55-38 9 9 18 13 26 16v-82c-2-3-4-6-5-11-3-15-13-23-23-33-5-21 32-31-3-61-15-12-34-1-45 12-10 12-24-3-23-15 0-18 1-39-19-46-62-12-21 48-50 45-38-27-53 16-88 10-6-1-15-7-12-14 11-19 3-43 17-61 35-30-12-67-36-86-28-16-21-56-48-70-52-18-41 38-65 39-45-19-51 27-93 19-34 0-16 59-35 56-26-23-46-30-35-68 6-13-15-29-1-37 6-1 7 7 7 11 6 32 62 41 66 3 7-31-29-45-54-33-17-1-14-32-20-44-3-13 3-26 9-37 30-28 8-74-33-65-34 16-65-17-87 27-14 17-42 1-55 20-9 12-22 22-36 11-36-18 16-66-53-76-18-1-24-25-41-26-39 4-34 49-72 55-29 10-48-37-78-14-8 4-17 21-27 12-50-65-51 24-99 15-20 0-30-21-49-26-57-15 20-61-39-80-48 7-45-64-6-68 32 6 60 52 94 25 10-9 16-22 30-27 12-2 15 15 16 24-5 16-18 29-27 44-7 7-18 3-28 3-19 0-37 20-31 39 4 20 29 31 47 20 18-10 18-38 44-30 22 6 37-18 58-14 32 12 51-32 71-9 14 16 40 17 50-4 8-24-7-57 23-71 22-10 15-36 26-53 8-15 5-29 1-44h-248v7c7 33-22 13-40 21-21 11-42-2-64-1-15-1-22-8-24-23l1-4h-98c-6 38 41 36 21 71-4 9-5 19-4 29 1 36-43 61 8 90 13 12 39-11 41 15-1 7-10 4-14 3-20-14-39 27-54 2-45-78-48-30-117-49-35-1-27 42-45 60-13 16-16 47-42 26-3-2-5-6-2-10 36-27-1-56 7-89 4-10 15-1 22 1 45 20 43-30 75-25 67 33 63-23 78-68 6-22-15-34-33-40-7-6-10-11-10-16h-130l-6 8c-6 42 61 50 23 80zm1087 750c-21-6-17-26-22-42-5-26-60-22-20-51 25-4 23 52 84 18 19-5 31 20 45 29 4 4 4 10 1 14-22 16-14 58-44 59-18-3-27-22-44-27zm38-176c7-12 35-17 34 3-9 16 3 46-14 55-16-4-27-23-42-31-2-11 16-18 22-27zm280 381c-6 12-16 22-24 33-11 9-28-6-23-19 8-29 28-46 47-14zm-116-138c8-16 21-27 38-34 33-15 15-59-11-72-16-21 16-50-23-66-27-12-52 27-35 49 3 6 17 16 8 22-27 6-33-26-41-45-7-26-19-54 20-54 61 20 78-50 124-10 41 23 44-23 68-24 40 13 15 46-16 49-37 9-22 49-36 75-7 26 10 43-22 60-26 33 8 34-48 54-30 25 13 50-28 98-32 20-12-71-75-50-26 8-46 27-57 51-12 13-27-8-38-13-12-11 7-26 12-36 17-19 52-18 56-49 18-82 43 62 104-5zm-180-398c11-13 19-52 37-23 24 21 12 43 31 60 19 10 23 33-3 33-60 0 8-44-43-59-34-19-42 35-18 48 17 6 26 18 5 27-12 1-33 15-41 2-2-26-27-42-28-67 2-35 43-10 60-21zm-180 139c23-15 27-38 23-63 14-48 49 10 66 26 24 24 59-17 59 31 4 45-40 0-47 38-2 8-2 19-12 21-26 6-37-33-65-24-16 4-38-14-24-29zM2916 33c39 3 72-17 109-17 19 3 22 34 33 49 1 16-22 19-31 31-23 17-32-35-63-27-18-1-48 21-58-1-2-12-10-39 10-35zm-177 193c3-16 23 1 22 12-4 12 0 35-20 34-22-6 0-31-2-46zM2565 35c20-3 23 25 5 27-21 1-31-26-5-27zM3772 552c-1 47 73 58 71 8 11-45-66-46-71-8zM4000 678v-10 10zM3859 219c-20 9-29 24-54 16-30-7-41 40-15 51 29 14 42-27 74-13 42 3 36-65-5-54zM4000 3120v-77a62 62 0 000 77zM3438 50c31 28-11 48-24 15-3-22-24-38-46-31-28 6-22 47-51 50-18 2-12-26-15-38 5-16 25-29 31-46h-141c5 27-35 28-32 57 12 43 60 44-8 76-28 10-32 43-9 61 11 7 27 0 40 0 11-1 21-6 28-15 13-19 41-25 46-50-2-19 34-43 44-24 3 34-37 79 24 87 13 0 26 4 39 7 20 3 42-19 35-37-9-17-42-24-26-48 5-8 16-8 20 0 19 22 10 56 37 71 20 16 54 2 54-25 3-18-14-29-17-46 2-18 55 14 53-42-3-26-23-46-25-72h-81c7 14-1 38 24 50zM3909 14c-23-5-42 16-46 39-5 14-23 12-34 19l-33 16c-25 9-24 64-51 20-28-44-95 17-116-31-9-12-20-16-34-15-24 3-35 31-23 51 19 22-1 47-6 70-10 5-23-7-34-5-20 0-31 19-33 37-4 21-29 33-25 57 5 16-7 34 3 49 15 21 37 0 38-20 8-24 28-24 37-1 17 28-20 51-17 78 19 75 105 1 95-48-4-20 13-16 22-6 17 25 61 4 64 30-5 27 1 53 28 64 23 21 6 66 56 59 62-18 36 45 54 61 17 11 38 19 56 5 50-50 36 51 78 55l12 2V431c-33-19 5-46-11-71a58 58 0 01-4-78c6-4 11 1 15 5v-34c-4 7-9 13-16 12-56-55-69 4-103 42-20 50 31 42 46 69 4 11 10 21 16 30 10 18-15 36-6 56 20 63-43 15-42-12 1-12 2-23-3-34-6-24-44-17-45-37 11-25 0-58-31-55-15 1-39 19-48-3-8-23-15-51-25-72-20-19-42 25-65 8-43-32-42-16-84-4-11-3-47 4-38-15 26-75 3-30 85-36 30 5 37-38 65-33 26 4 11 40 29 54 35 27 57-23 64-51 4-18 17-25 33-28 20-4 28 19 43 27 13 7 17 21 22 34 11 19 42 23 53 3 32-41-49-53-9-85 23-18-9-56 21-57 12-4 26-7 38-12V0h-32c-20 12-45 19-59 14zM63 3996l8 4h111c1-9 6-17 21-24 33-35-15-42-14-65 6-12 9-25 7-39-3-20 13-44-4-61-19-22-41-5-63-1-35-10-1-32 14-43 61-110-156-32-73-103 22-16 59 31 77-25 7-34-16-96-52-51-8 12-14 38-33 32-16-10-57-7-30-33 17-22 27-48 33-75 32-35 46 64 90 43 38-10 33-65-5-70-35-4-21-47-55-56-12-4-24-10-35-16-14-11 6-29 10-41 16-14 36 4 47-28 11-12 34 7 50 4 19 2 11 22 6 34-9 88 127 45 59-24-23-12-1-37-18-53-117-63-79 36-110 24-14-3-25 5-34 14-17 8-37-15-54 0-44 38 17 55 9 75-8 11-16 11-25 6v54l4 3c1 3-1 6-4 7v251c16 4 27 15 35 31 18 30-58 53-1 85 48-7 31 13 66 15 26-5 38-11 40 22 4 21 38 26 22 48-6 12-2 25 0 37-2 12-21 9-23-1-5-38-30-37-46-63-6-13-11-29-27-34-19-10-39-7-60-11l-6-1v133h45c7-4 13-6 18-4zM3945 1143c5 34 32 31 55 39v-100c-22 18-60 24-55 61zM3905 1820c13 5 12 20 15 31 11 45 76 34 77-5l3-18v-130h-1c-30 10-57 64-88 59-22-3-35-32-59-25-10 3-24 9-26 20-4 49 48 49 79 68zM3799 20c8 19 37 12 35-9 0-5-2-8-5-11h-25c-5 4-8 11-5 20zM3534 13c30 37 54-11 78 3 23 30 49 39 76 9 19-12 57 43 85-19l1-6h-250l10 13zM3406 1187c22 23 48-8 60-26 20-23 61-1 60-49-9-61-39-80-96-50-24 13-21 40-32 61-14 20-8 46 8 64zM2536 768c44 14 63-32 50-65-2-16 12-29 9-46h1c7-74-97-68-81 7 17 35-30 87 21 104zM3310 976c0 32 49 33 50 0 1-34-50-33-50 0zM3375 857c-13-12-8-30-8-46 1-25 0-63-34-64-9 0-22 6-29-3-26-29 3-91-51-94-33 6-59-25-65-55-24-59-93-14-59 37 1 37-26 37-1 84-2 14-29 9-36 24-14 20 6 48 29 43 44-12 8-50 22-60 17-3 47-12 55 10 4 92 91-2 103 56 4 17-5 37 6 53 3 5 3 12 2 18-8 24-3 53 22 63 40 16 73-34 44-66zM3252 223c-1 21 36 24 35 0 1-24-36-22-35 0zM3413 1833c49-17 3-77-33-35-52 2 24-93-73-85v-1c-24-4-57 9-50 38 3 24 45 24 35 49-13 18-28 41-10 61 45 49 88 9 85 54 22 81 99-32 31-47-9-1-22 2-25-9-16-66 15-21 40-25zM3737 1587c-3-30-49-27-51-1-1 40 54 39 51 1zM3453 1044c8-13 18-24 34-17 20 4 34-25 15-36-9-5-19 0-28 3-15 5-27-14-42-12-71 9-9 97 21 62zM3409 909c-26 1-16 37 5 35 24-1 19-39-5-35zM3814 1693c9-7 19-15 24-26 7-16 21-24 36-31 11-4 17 10 24 16 41 32 61-41 102-22v-70c-19 0-40 6-55 15-18 20-50 29-33-10 6-19 26-27 36-44 7-10 16-16 27-18 9-2 18-4 25-9v-86c-17 8-13 38-33 42-12 1-35-8-20-21 21-21 24-65 53-77v-87c-12 5-25 10-39 4-22-10 9-65-55-49-21 6-38-15-59-11-8 0-14-3-19-9-18-29-48-19-59 10-16 16-22-34-45-33-13-2-32 1-36 15-7 19 2 38 19 48 16 5 32 50 10 54-12 2-23 5-34 9-23 3-33-33-60-21-34 11-70 46-54 84 10 23-12 48 11 66 15 20-14 42-19 13-1-11 7-24-2-33-15-11-14-31-26-44-12-10-5-22 2-33 20-38-26-56-52-72-34-15-44 26-67 41-19 12-23 40-49 42-24 8-29 37-16 58 6 13-1 26 1 38 1 19 23 30 38 19 36-45 18-14 61-2 10 2 20 6 20 17 0 21 10 41 2 61-3 14 5 27 7 40 1 13-16 14-25 15-29-3-31-28-10-46 20-25-14-62-42-46-44 27 12 53-15 79-9 12-16 36 1 44 16 10 52-2 47 27-2 12-13 19-19 29-19 32 22 45 47 48 73 4 7-88 52-74 21 20 61 17 65-16-4-36 25-53 57-44 25-1 20-31 31-46 12-20 2-42-19-51-21-12 16-34-7-69-4-16 17-20 29-19 18 5 15 32 32 40s14 19 7 34c-11 24 12 51 36 47 21-4 57-8 68 15 0 17 27 29 17 46-12 27-42 32-60 52-12 15-25 0-38-4-30-18-37 42-60 27-17-29-62-34-72-2-3 12-3 27-17 32s-29 13-31 29c-6 40 47 50 60 18 2-36 48-45 55-7 1 28 29 55 61 36 11-6 19-21 33-17 17 6 34 8 49-5 17-16-15-41 2-56zm-329-303c-24-4-27-35-1-37 31-3 24 39 1 37zm129 142c-2 19-25 6-24-9 1-13 5-41 25-32 21 6-1 27-1 41zm169-106c37 48-64 53-33 3 8-39-27-35-36-53 69-51-16-72 74-81 12 25-17 33 17 75 1 19-36 30-22 56zm27-152c-13 7-14-16-13-24 4-15 23-10 23 4 0 9-3 15-10 20zm88-7c6 2 30 9 22 18l-35 6c-20-3 0-27 13-24zm-64 238c3-19-5-30-12-44 2-27 39-26 16-66-16-20 3-28 19-37 14-10 49 45 32 56-30 17-38 39-14 66 28 31-44 68-41 25zm-77 204c-23-5 16-51 22-17-2 9-13 15-22 17zM2765 1851c-7-11 0-22 2-34 6-28-25-42-46-29-21 14-20-12-17-26 2-23-24-40-43-25-13 13-19 32-40 35-40 16-6 51 2 77 8 28 39 44 67 35 19-2 37 27 23 41-11 12-36 22-29 41 8 23 35 23 56 28 30 7 53-28 40-55-27-32 10-57-15-88zM3940 4000h60v-31c-24-3-37 27-60 31zM2713 2384v-1c-23-3-40 13-46 35-8 24 27 38 14 68-6 16-6 36 10 46 18 14 36 2 51-10 50-22 28 60 72 61 27 5 43-30 32-52-9-15-1-38-17-47-21-12-29-39-54-45-17-4-31-16-32-34 2-14 19-6 28-9 65-15 12-62 34-76 16-13 32-23 53-21 27-6 14-39-7-36-16 7-30 9-46 3-46 0-19 39-33 55-65 17-16 65-59 63zM2288 2522c102 80 39-63 145 32 8 13 19 26 36 25 29 1 42-38 24-59-12-14-37-6-49-23-21-28-59-55-83-14-14 12-25-10-34-19-40-37-84 30-39 58zM2894 2360c-17-9-38-37-57-19-13 13 2 30 9 42 7 11 1 24-3 35-10 20 2 41 1 63 0 4 1 9 4 12 99 63 65-53 86-49 57 3 46 27 57 70 9 23-13 58-25 19-61-75-93 62-16 41 55-41 12 46 46 57 31 17 74-16 69-50-8-24 0-47 2-71 1-6-2-16 6-18 65 10 78 13 82-57 11-13 26 9 39 10 15 4 23 16 34 26 30 27 69 12 59-32 5-67-26-62-79-65-23-7-35 22-54 20-54-41-100-55-77 33 7 19-6 36-10 54-10 14-34-10-33-23 7-35 0-60-38-66-21-12 8-47-17-62-21-12-23-40-43-51-15-8-38 1-43 18-5 15 5 30 15 41 11 12 9 29 16 43 10 19-16 49-19 15 2-14 2-28-11-36zM3194 2292c-22-1-26 35-2 35 23 3 25-34 2-35zM2692 2630c13 40 79 32 77-13 4-67-93-43-77 13zM2350 2387c49-32 37 21 63 36 29 9 20 51 52 54 17 2 24 18 37 26 26 13 54-2 59-30 6-14-6-26-10-39 5-19 24 9 24 18 11 40 71 44 81 2 7-20 4-23-12-36-26-15-24-56-58-60-19-4-33 23-52 8-39-29-45-30-85-4-66 11-22-49-97-63-45-1-30 50-42 77-6 26 28 32 40 11zM2833 3584c1 23 35 22 36 0 2-22-36-26-36 0zM3305 3993c-19-12-14-25-5-42 11-26-15-53-39-51-23 0-35 24-51 37-9 9-7 25-3 36 3 9 3 18 2 27h101l-5-7zM3131 2995c9-12 1-29-15-29-34 3-7 58 15 29zM3213 2108c-4-38-64-21-49 14 5 33 53 13 49-14zM2419 2174a36 36 0 00-51-2c-6 5-9 11-10 19 1 24-34 11-36 35-4 14 14 29 27 20 10-5 12-20 24-21 15 1 44 4 39 25-18 40 14 62 49 39 6-1 7 8 10 12 19 38 63-11 22-22-10-3-22 9-29 2-12-22-6-37 0-58 2-31-30-30-45-49zM2572 2343c55-19 19-84-24-57-26 18-7 57 24 57zM1213 1457c-35 6-39 50-1 56 41 7 43-59 1-56zM1234 31c-29 1-39 36-25 57 91 94-4 69 34 110 18 14 33-6 34-23 4-16 24-18 37-23 76-14-1-46 8-65 11-17 21-46 46-39 16 2 12 18 14 30 3 23 36 29 48 8 16-29 24-67 52-86h-209c2 5 4 9 8 13 6 31-30 20-47 18zM1680 378c0-24-36-24-36-1-1 22 35 24 36 1zM3954 3957c15-6 32-1 46-6v-163l-6 5c-19 12-6 40-24 52-28 8-27 39-47 55-26 22-3 66 31 57zM1204 0h-74c5 38 70 44 74 0zM1293 1350c13-2 16-24 32-20 25 7 50 15 75 20 30-2 40-41 10-54-25-20-53-58-85-25-16 26-34 16-58 6-26-9-55 11-52 39 0 35 49 41 78 34zM1447 1324c7 6 15 13 24 8 17-8 13-32 29-42 12-9 19-23 18-38-12-96-106-56-66 25 10 16-18 32-5 47zM1668 1284c-18 3-20 45-40 30-10-15-18-39-40-37-18 2-30 14-30 31-3 19 17 31 18 50 0 10 5 17 11 23 8 8 19 17 13 30-15 19 7 48 27 28 10-10 2-31 21-30 22 1 48-9 50-34 0-25 20-37 21-62-1-21-26-41-51-29zM317 1907c-46 3-90 51-33 79 8 3 15 7 21 13 17 18 47 4 42-21 2-32 18-66-30-71z";
}
function LevelConsts(e) {
  (STATE.mode = "constructing"),
    (FIELD.tileWidth = ResetConsts.resize()),
    (FIELD.tileHeight = FIELD.tileWidth),
    (SCENARIO.journal = !1);
  var t = !1;
  if ("tut1" === e) {
    (t = !0),
      (SCENARIO.title = "T.A: Wired"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send bits from A to D using blue wire."),
      SCENARIO.info.push("• Send qubits from B to C using red wire."),
      SCENARIO.info.push(
        "• Wires are selected via the top-right menu and placed by left-click + drag.",
      ),
      SCENARIO.info.push(
        "• Remove wires by right-click + drag or using the erasor tool (`E` key).",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 1, 1, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, -1, -1, -1, 0, 0])),
      (SCENARIO.menuGrey = [
        [0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (var i = 0; i < 10; i++) {
      var a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a);
      var r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(r);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 30),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  } else if ("tut2" === e) {
    (t = !0),
      (SCENARIO.title = "T.B: Gate Keeping"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Invert bits from A and send to D."),
      SCENARIO.info.push(
        "• Rotate qubits from B by -π/2 (or -90°) and send to C.",
      ),
      SCENARIO.info.push(
        "• Suitable inversion and rotation gates have been pre-placed.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 1, 1, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, -1, -1, -1, 0, 0])),
      (SCENARIO.menuGrey = [
        [0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.editable[99] = 2),
      (SCENARIO.editable[156] = 2),
      (SCENARIO.editable[99] = 2),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 10; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a), SCENARIO.CINPUTS[1].push(1 - a);
      r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(r), SCENARIO.QINPUTS[1].push((r + 12) % 16);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 30),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  } else if ("tut3" === e) {
    (t = !0),
      (SCENARIO.title = "T.C: The Manipulator"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send bits from A to D WITHOUT inversion."),
      SCENARIO.info.push("• Send qubits from B to C WITHOUT rotation."),
      SCENARIO.info.push("• Left-click on gates to edit their properties."),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 1, 1, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "fixed",
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.editable[99] = 2),
      (SCENARIO.editable[156] = 2),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 10; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a), SCENARIO.CINPUTS[1].push(a);
      r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(r), SCENARIO.QINPUTS[1].push(r);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 30),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  } else if ("tut4" === e) {
    (t = !0),
      (SCENARIO.title = "T.D: CTRL-Z"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send bits from A to D WITHOUT inversion."),
      SCENARIO.info.push("• Send qubits from B to C WITHOUT rotation."),
      SCENARIO.info.push(
        "• Pre-existing gates cannot be edited on this level.",
      ),
      SCENARIO.info.push(
        "• Use mouse scroll or L/R arrow keys to re-orient gates before placing.",
      );
    var s = [
      55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, 1, 23, 22, 22, 22, 22, 22, 25, -1, -1, -1, -1, -1, 4, 2, 2, 2, 2, 2,
      78, -1, -1, 4, 2, 5, -1, 53, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
      -1, -1, -1, 1, -1, 63, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
      -1, 4, 2, 6, -1, -1, -1, 53, 24, 22, 22, 22, 22, 12, 22, 22, 22, 22, 22,
      94, 1, -1, -1, -1, 63, -1, 23, 26, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
      21, 1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 6, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
      77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      57,
    ];
    (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 1, 1, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "partial",
        s,
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.editable[139] = 1),
      (SCENARIO.editable[156] = 1),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 10; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a), SCENARIO.CINPUTS[1].push(1 - a);
      r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(r), SCENARIO.QINPUTS[1].push((r + 12) % 16);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 30),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  } else if ("tut5" === e) {
    (t = !0),
      (SCENARIO.title = "T.E: Wasted Potential"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Incinerate all bits and qubits."),
      SCENARIO.info.push(
        "• Wires and gates can be removed by right-click + drag or via the eraser tool (`E` key).",
      ),
      SCENARIO.info.push(
        "• Gates with GREEN tabs can connect to both blue and red wires.",
      ),
      (SCENARIO.channelsDir = [-1, -1, 1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 1, 1, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, -1, -1, -1, 0, 0])),
      (SCENARIO.menuGrey = [
        [0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.victoryCond = 1),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 10; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a), SCENARIO.CINPUTS[1].push(1 - a);
      r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(r), SCENARIO.QINPUTS[1].push((r + 12) % 16);
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates() < 2;
    }),
      (SCENARIO.starText =
        "Star bonus: complete with a single incinerator and no other gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 30),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  } else if ("tut6" === e) {
    (t = !0),
      (SCENARIO.title = "T.F: Making Amends"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• The manager has prepared a contraption for you to run! Access by pressing the purple `blueprint-Z` button on the bottom-left of the console.",
      ),
      SCENARIO.info.push(
        "• The contraption has been built in the wrong spot and must be moved! Hold SHIFT then click+drag to select a region to duplicate (or hold CTRL/CMD while clicking to reposition items).",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, 0, -1, 0, 0, 0])),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 30; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a);
    }
    for (i = 0; i < 30; i++) {
      a = SCENARIO.CINPUTS[0][i];
      i % 4 == 1
        ? SCENARIO.CINPUTS[1].push(1 - a)
        : SCENARIO.CINPUTS[1].push(a),
        i % 2 == 1 &&
          1 === SCENARIO.CINPUTS[1][i] &&
          (SCENARIO.CINPUTS[1][i - 1] = 1 - SCENARIO.CINPUTS[1][i - 1]);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 30),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  } else if ("class1" === e) {
    (t = !0),
      (SCENARIO.title = "CI.A: Straight Shooter"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Set all bits from A to the 1-state, then send to C.",
      ),
      SCENARIO.info.push(
        "• For more information about a gate press the ? icon once selected to open the corresponding handbook entry.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, 0, -1, 0, 0, 0], 0)),
      (SCENARIO.menuGrey = [
        [0, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 30; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a), SCENARIO.CINPUTS[1].push(1);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 80;
    }),
      (SCENARIO.starText = "Star bonus: complete in 80 or fewer ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 30),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  } else if ("class2" === e) {
    (t = !0),
      (SCENARIO.title = "CI.B: Zippidty-split"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Combine A and B into a single stream by alternating entries (starting with an entry from A).",
      ),
      SCENARIO.info.push(
        "• Output the combined stream to C and an identical copy of the stream to D.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 24; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a);
      r = Math.round(Math.random());
      SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[2].push(a),
        SCENARIO.CINPUTS[2].push(r);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 85;
    }),
      (SCENARIO.starText = "Star bonus: complete in 85 or fewer ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 60),
      (SCENARIO.numCorrect = 60),
      (SCENARIO.maxTicks = 9999);
  } else if ("class3" === e) {
    (t = !0),
      (SCENARIO.title = "CI.C: The ol'Switch-a-roo"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• For each `0` bit from A, send a bit from B to C."),
      SCENARIO.info.push("• For each `1` bit from A, send a bit from B to D."),
      SCENARIO.info.push(
        "• You may incinerate un-needed bits from A after use.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 44; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a);
      r = Math.round(Math.random());
      SCENARIO.CINPUTS[1].push(r),
        0 === a ? SCENARIO.CINPUTS[2].push(r) : SCENARIO.CINPUTS[3].push(r);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 175;
    }),
      (SCENARIO.starText = "Star bonus: complete in 175 or fewer ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  } else if ("class4" === e) {
    (t = !0),
      (SCENARIO.title = "CI.D: nSync"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Combine A and B into a single stream by alternating entries (starting with an entry from A) and output to C.",
      ),
      SCENARIO.info.push(
        "• Note: channel B is here much slower to produce bits than channel A.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 44; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a);
      r = Math.round(Math.random());
      SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[2].push(a),
        SCENARIO.CINPUTS[2].push(r);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 125;
    }),
      (SCENARIO.starText = "Star bonus: complete in 125 or fewer ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  } else if ("class5" === e) {
    (t = !0),
      (SCENARIO.title = "CI.E: The Waiting game"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Send A to C (12 bits total), then afterwards send B to C.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a), SCENARIO.CINPUTS[2].push(a);
    }
    SCENARIO.CINPUTS[2].push(1),
      SCENARIO.CINPUTS[2].push(0),
      SCENARIO.CINPUTS[2].push(1),
      SCENARIO.CINPUTS[2].push(0),
      SCENARIO.CINPUTS[2].push(1),
      SCENARIO.CINPUTS[2].push(1);
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[1].push(a), SCENARIO.CINPUTS[2].push(a);
    }
    (SCENARIO.starCond = function () {
      return 1 === Helper.countGates("delay");
    }),
      (SCENARIO.starText = "Star bonus: use only a single delay gate."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 24),
      (SCENARIO.numCorrect = 24),
      (SCENARIO.maxTicks = 9999);
  } else if ("class6" === e) {
    (t = !0),
      (SCENARIO.title = "CI.F: Genesis"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Output to C and D bits matching the requested outputs shown.",
      ),
      SCENARIO.info.push(
        "• Hint: the `creation` gate can be configured to produce different output patterns.",
      ),
      (SCENARIO.channelsDir = [1, 1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [0, 0, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [0, 0, -1, -1, 0, 0], 0)),
      (SCENARIO.menuGrey = [
        [0, 1, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 30; i++)
      SCENARIO.CINPUTS[0].push(1),
        SCENARIO.CINPUTS[1].push(1),
        SCENARIO.CINPUTS[1].push(0);
    (SCENARIO.starCond = function () {
      return Helper.countGates(["cCreate"]) <= 1;
    }),
      (SCENARIO.starText = "Star bonus: use only a single creation gate."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 60),
      (SCENARIO.numCorrect = 60),
      (SCENARIO.maxTicks = 9999);
  } else if ("class7" === e) {
    (t = !0),
      (SCENARIO.title = "CI.G: The Count"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Send the first 8 bits from A to C, and then send the rest from A to D.",
      ),
      SCENARIO.info.push(
        "• Hint: the `creation` gate can be configured to produce a finite number of outputs.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 30; i++) {
      var o = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(o);
    }
    (SCENARIO.starCond = function () {
      return RBOARD[TIMER.tick].bitList.length <= 1;
    }),
      (SCENARIO.starText = "Star bonus: finish with 1 or fewer bits in play."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 40),
      (SCENARIO.numCorrect = 40),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle1" === e) {
    (t = !0),
      (SCENARIO.title = "CII.A: Bandwidth"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send bits from A to C and bits from B to D."),
      SCENARIO.info.push(
        "• Note: channel B is here much slower to produce bits than channel A.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, -1, -1],
        [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 2),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 100; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(a), SCENARIO.CINPUTS[1].push(r);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 650;
    }),
      (SCENARIO.starText = "Star bonus: success in fewer than 650 ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 200),
      (SCENARIO.numCorrect = 200),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle2" === e) {
    (t = !0),
      (SCENARIO.title = "CII.B: Half Adder"),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Adder_(electronics)#Half_adder"),
      (SCENARIO.info = []),
      SCENARIO.info.push("For each bit-pair from (A,B):"),
      SCENARIO.info.push("• Output their `XOR` to C:"),
      SCENARIO.info.push(
        "   (0,0)--> 0  (0,1)--> 1        (1,0)--> 1  (1,1)--> 0",
      ),
      SCENARIO.info.push("• Output their `AND` to D:"),
      SCENARIO.info.push(
        "   (0,0)--> 0  (0,1)--> 0        (1,0)--> 0  (1,1)--> 1",
      ),
      SCENARIO.info.push(
        "Hint: use bit-controls with inversion and re-zero gates.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 0, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 296; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[2].push((a + r) % 2),
        SCENARIO.CINPUTS[3].push(Math.floor((a + r) / 2));
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates(["switch"]) <= 2;
    }),
      (SCENARIO.starText = "Star bonus: use 2 or fewer control gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 200),
      (SCENARIO.numCorrect = 200),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle3" === e) {
    (t = !0),
      (SCENARIO.title = "CIII.B: AND Frugality"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Output to D the logical AND of A with B:"),
      SCENARIO.info.push(
        "   (0,0)--> 0  (0,1)--> 0        (1,0)--> 0  (1,1)--> 1",
      ),
      SCENARIO.info.push(
        "• Due to a critical shortage, `re-zero` gates are currently unavailable.",
      ),
      (SCENARIO.channelsDir = [-1, -1, 1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 0, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, 0, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 100; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[3].push(Math.floor((a + r) / 2));
    }
    (SCENARIO.starCond = function () {
      return 0 === Helper.countGates(["delay"]);
    }),
      (SCENARIO.starText = "Star bonus: don't use any delay gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle3B" === e) {
    (t = !0),
      (SCENARIO.title = "CIII.C: XOR Frugality"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Output to D the logical XOR of A with B:"),
      SCENARIO.info.push(
        "   (0,0)--> 0  (0,1)--> 1        (1,0)--> 1  (1,1)--> 0",
      ),
      SCENARIO.info.push(
        "• Due to a critical shortage, `invert` gates are currently unavailable.",
      ),
      (SCENARIO.channelsDir = [-1, -1, 1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 0, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, 0, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 1, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 100; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[3].push((a + r) % 2);
    }
    (SCENARIO.starCond = function () {
      return 0 === Helper.countGates(["cCreate"]);
    }),
      (SCENARIO.starText = "Star bonus: don't use any creation gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle4" === e) {
    (t = !0),
      (SCENARIO.title = "CII.C: Memory"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• For each bit from input stream A: output a `0` to C if it matches the previous bit in the stream, else output a `1` to C if they differ.",
      ),
      SCENARIO.info.push(
        "• Assume that the memory is initialized in the `0` state.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, 0, -1, 0, 0, 0], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      SCENARIO.CINPUTS[0].push(0),
      SCENARIO.CINPUTS[1].push(0);
    for (i = 0; i < 50; i++) {
      var n = SCENARIO.CINPUTS[0].length;
      (a = SCENARIO.CINPUTS[0][n - 1]), (r = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(r),
        a === r ? SCENARIO.CINPUTS[1].push(0) : SCENARIO.CINPUTS[1].push(1);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 400;
    }),
      (SCENARIO.starText = "Star bonus: success in fewer than 400 ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle5" === e) {
    (t = !0),
      (SCENARIO.title = "CII.D: Ternary"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Output every THIRD bit from A to D, and output the rest to C.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 50; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      var l = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[0].push(r),
        SCENARIO.CINPUTS[0].push(l),
        SCENARIO.CINPUTS[1].push(a),
        SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[2].push(l);
    }
    (SCENARIO.starCond = function () {
      return 0 === Helper.countGates("trash");
    }),
      (SCENARIO.starText = "Star bonus: don't use any incinerators."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 60),
      (SCENARIO.numCorrect = 60),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle6" === e) {
    (t = !0),
      (SCENARIO.title = "CII.E: Repetition"),
      (SCENARIO.archive = "https://en.wikipedia.org/wiki/Repetition_code"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send A to C."),
      SCENARIO.info.push(
        "• The channels across the board each have a 20% chance of flipping bits that pass through.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, 0, 0, 0],
        0,
        "correctionC",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 8),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 500; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a);
    }
    (SCENARIO.starCond = function () {
      return RBOARD[TIMER.tick].success >= 480;
    }),
      (SCENARIO.starText = "Star bonus: get 480 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 500),
      (SCENARIO.numCorrect = 440),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle7" === e) {
    (t = !0),
      (SCENARIO.title = "CII.F: Swap Meet"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send bits from A to D and send bits from B to C."),
      SCENARIO.info.push(
        "• Temporary safety regulations prevent direct wire crossings.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "canal",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 8),
      (SCENARIO.scoreHeightRaw = 5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++) {
      var h = Math.floor(2 * Math.random());
      SCENARIO.CINPUTS[0].push(h);
      r = Math.floor(2 * Math.random());
      SCENARIO.CINPUTS[1].push(r);
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates(["switch"]) <= 3;
    }),
      (SCENARIO.starText = "Star bonus: use 3 or  fewer control gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("classPuzzle8" === e)
    (t = !0),
      (SCENARIO.title = "CIII.A: Strict Equality"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Inputs A and B both contain a sequence of 8 bits."),
      SCENARIO.info.push(
        "• Output a `1` if the sequences from A and B are identical, else output a `0`.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return 0 === Helper.countGates(["delay"]);
      }),
      (SCENARIO.starText = "Star bonus: don't use any delay gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 10),
      (SCENARIO.successRep = 10),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("classPuzzle9" === e)
    (t = !0),
      (SCENARIO.title = "CIII.D: Haystack"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Input A contains a total of 10 bits."),
      SCENARIO.info.push(
        "• If the input contains a sequence of 4 or more `1` in a row then output a `1`, else output a `0`.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, 0, -1, 0, 0, 0], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return Helper.countGates(["switch"]) <= 5;
      }),
      (SCENARIO.starText = "Star bonus: use 5 or  fewer control gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 10),
      (SCENARIO.successRep = 10),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("vaziraniClassic" === e)
    (t = !0),
      (SCENARIO.title = "CII.G: Quality Control"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Devices take as input three control bits (top channels) and a target bit (bottom).",
      ),
      SCENARIO.info.push(
        "• From bottom-to-top control channels: output a `1` if the channel implements a controlled inversion on the target bit. Output a `0` if the channel does not effect the target bit.",
      ),
      (SCENARIO.channelsDir = [1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [0, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [0, 0, -1, 0, 0, 0],
        0,
        "deviceA",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 1),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 3),
      (SCENARIO.numCorrect = 3),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 10),
      (SCENARIO.successRep = 10),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("quant1" === e) {
    (t = !0),
      (SCENARIO.title = "QI.A: Inversion"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "▲ Access the journal notes   | via the yellow `J` button  | for additional level clues | and advice.",
      ),
      SCENARIO.info.push(
        "• Send A to C and send B to D after inverting the tranformations enacted on them.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "inversion",
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.device = 10),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++) {
      (r = Math.floor(16 * Math.random())),
        (l = Math.floor(16 * Math.random()));
      SCENARIO.QINPUTS[0].push(r), SCENARIO.QINPUTS[1].push(l);
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates() <= 8;
    }),
      (SCENARIO.starText = "Star bonus: use only two gates."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("quant2" === e) {
    (t = !0),
      (SCENARIO.title = "QI.B: Wires Crossed"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send bits from A to C."),
      SCENARIO.info.push(
        "• Send qubits (guaranteed to be either state ◀ or ▶) from B to D.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [2, 1, 2, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "cross",
      )),
      (SCENARIO.menuGrey = [
        [0, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0],
      ]),
      (SCENARIO.division = 6),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++) {
      (r = Math.round(Math.random())), (l = 4 + 8 * Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(r), SCENARIO.QINPUTS[0].push(l);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 130;
    }),
      (SCENARIO.starText = "Star bonus: success in fewer than 130 ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("quant3A" === e)
    (t = !0),
      (SCENARIO.title = "QI.C: Dice Roll"),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Quantum_logic_gate#Measurement"),
      (SCENARIO.info = []),
      SCENARIO.info.push("Adjust the measurement gates such that:"),
      SCENARIO.info.push("• 69% (±3%) of outputs to C are in the `1` state."),
      SCENARIO.info.push("• 75% (±3%) of outputs to D are in the `1` state."),
      SCENARIO.info.push(
        "Hint: use the state analyzer (click on a qubit while constructing or while factory is paused) to examine measurement outcome probs.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 2, 2, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "fixed",
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.editable[104] = 2),
      (SCENARIO.editable[161] = 2),
      (SCENARIO.editable[164] = 2),
      (SCENARIO.editable[202] = 2),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 2e3),
      (SCENARIO.numCorrect = 2e3),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.victoryCond = 2),
      (SCENARIO.outputC = [66, 72]),
      (SCENARIO.outputD = [72, 78]);
  else if ("quant3" === e) {
    (t = !0),
      (SCENARIO.title = "QI.D: Lossy"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Send A to C. Qubits in A start in either state ▲ or ▶.",
      ),
      SCENARIO.info.push(
        "• Correct transfer of all qubits is not possible; just do as well as you can!",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 0, 1, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, 0, 0, 0],
        (partition = [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0]),
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 2),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 300; i++) {
      l = 4 * Math.round(Math.random());
      SCENARIO.QINPUTS[0].push(l);
    }
    (SCENARIO.starCond = function () {
      return 0 === Helper.countGates(["rotate", "qFlip"]);
    }),
      (SCENARIO.starText = "Star bonus: don't use any rotate or flip gates."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 300),
      (SCENARIO.numCorrect = 240),
      (SCENARIO.maxTicks = 9999);
  } else if ("quant4" === e) {
    (t = !0),
      (SCENARIO.title = "QI.E: Straight Shooter II"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Set all qubits from A to state ▲ and then output to C.",
      ),
      SCENARIO.info.push(
        "• Hint: recall that a measurement will output qubits either aligned or anti-aligned with the measurement axis.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 0, 1, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, 0, -1, 0, 0, 0], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 50; i++) {
      l = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(l), SCENARIO.QINPUTS[1].push(0);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 250;
    }),
      (SCENARIO.starText = "Star bonus: success in 250 or fewer ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  } else if ("quant5" === e) {
    (t = !0),
      (SCENARIO.title = "QI.F: Quantum Control"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Output to C qubits with rotation that is the sum of the rotations from A and B (starting from 12'o'clock).",
      ),
      SCENARIO.info.push(
        "• Input A only contains qubits in state ▲ or ▼, while B only contains state ▲ or ▶.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 1, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++) {
      (r = 8 * Math.round(Math.random())), (l = 4 * Math.round(Math.random()));
      SCENARIO.QINPUTS[0].push(r),
        SCENARIO.QINPUTS[1].push(l),
        SCENARIO.QINPUTS[2].push(r + l);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("quant6" === e) {
    (t = !0),
      (SCENARIO.title = "QI.G: Quantum Control II"),
      (SCENARIO.archive = "https://en.wikipedia.org/wiki/Controlled_NOT_gate"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Output to C qubits with rotation that is the sum of the rotations from A and B (starting from 12'o'clock).",
      ),
      SCENARIO.info.push(
        "• Input A only contains qubits in state ▲ or ▼, while B only contains state ▲ or ▶.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 1, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++) {
      (r = 8 * Math.round(Math.random())), (l = 4 * Math.round(Math.random()));
      SCENARIO.QINPUTS[0].push(r),
        SCENARIO.QINPUTS[1].push(l),
        SCENARIO.QINPUTS[2].push(r + l);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("quant6B" === e) {
    (t = !0),
      (SCENARIO.title = "QI.H: Superposition"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Qubits from A begin in the (▲,▼) basis, while those from B begin in the (◀,▶) basis.",
      ),
      SCENARIO.info.push(
        "• Transform inputs from A to match with the expected outputs at C, and inputs from B to match with the expected outputs at D.",
      ),
      SCENARIO.info.push(
        "• Hint: clicking on a qubit allows you to change its basis.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++)
      SCENARIO.QINPUTS[0].push(0), SCENARIO.QINPUTS[1].push(0);
    (SCENARIO.starCond = function () {
      return (
        Helper.countGates("qFlip") <= 3 && Helper.countGates("rotate") <= 1
      );
    }),
      (SCENARIO.starText = "Star bonus: use only one 'flip' and one 'rotate'."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 200),
      (SCENARIO.numCorrect = 200),
      (SCENARIO.maxTicks = 9999);
  } else if ("quant7" === e) {
    (t = !0),
      (SCENARIO.title = "QII.A: Measure x1, Cut x2"),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Quantum_logic_gate#The_effect_of_measurement_on_entangled_states"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Inputs from A and B each contain 50 qubits, which are then entangled in pairs.",
      ),
      SCENARIO.info.push("• Output to C and D each 50 qubits in the ▲ state."),
      SCENARIO.info.push(
        "• Only a single measurement gate (pre-placed) is given.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (FIELD.channelsDir = [...SCENARIO.channelsDir]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "onetwo",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 6),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++) SCENARIO.QINPUTS[0].push(0);
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 250;
    }),
      (SCENARIO.starText = "Star bonus: success in 250 or fewer ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantChallengeA" === e) {
    (t = !0),
      (SCENARIO.title = "QIII.A: Try,Try,Try Again"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Flip the (◀ and ▶) qubits from A and output to C.",
      ),
      SCENARIO.info.push(
        "• Methods for creating new qubits as well as qubit rotation / flip gates have been disabled.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, 0, -1, 0, 0, 0], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 400; i++) {
      h = Math.round(Math.random());
      SCENARIO.QINPUTS[0].push(4 + 8 * h),
        SCENARIO.QINPUTS[1].push(4 + 8 * (1 - h));
    }
    (SCENARIO.starCond = function (e) {
      return 100 === e;
    }),
      (SCENARIO.starText = "Star bonus: achieve perfect success rate."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 70),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantChallengeB" === e) {
    (t = !0),
      (SCENARIO.title = "QII.F: Analysis"),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Quantum_logic_gate#Unitary_inversion_of_gates"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Undo the (hidden) unitary transforms on the qubits from A and B, then output to C and D respectively.",
      ),
      SCENARIO.info.push(
        "• Hint: try to find a controlled flip or rotate that the reduces the created qubits back to their original state ▲.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "analysis",
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 4),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 400; i++) {
      a = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(a);
      r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[1].push(r), SCENARIO.QINPUTS[2].push(0);
    }
    (SCENARIO.starCond = function (e) {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 200),
      (SCENARIO.numCorrect = 200),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantChallengeC" === e) {
    (t = !0),
      (SCENARIO.title = "QII.G: Magic Mirror"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Send to C qubits in their ORIGINAL state as first output from A.",
      ),
      SCENARIO.info.push(
        "Hint: the action of a (free or controlled) `rotate` or `flip` gate can always be undone by another gate of the same type.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, -1, 1]),
      (SCENARIO.channelsCol = [1, 1, 1, 0, 1, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, -1, 0],
        [0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0],
        "halffrozen",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 7),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 50; i++) {
      a = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(a);
      r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[1].push(r);
      l = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[2].push(l);
    }
    (SCENARIO.starCond = function (e) {
      return !0;
    }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantChallengeD" === e) {
    (t = !0),
      (SCENARIO.title = "QII.H: Even Odds"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Qubits from α and β begin in either EVEN (a▲▲+b▼▼) or ODD (a▲▲-b▼▼) superpositions, with `a` and `b` as positive numbers.",
      ),
      SCENARIO.info.push(
        "• Output to C either `0` or `1` bits for each EVEN or ODD superposition respectively.",
      ),
      SCENARIO.info.push(
        "• Hint: try viewing the qubits in the (◀,▶) basis.",
      ),
      (SCENARIO.channelsDir = [1, 1, -1, 1, -1, -1]),
      (SCENARIO.channelsCol = [0, 0, 2, 0, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [0, 0, -1, 0, -1, -1],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 200; i++) {
      a = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(a);
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates("measure") <= 1;
    }),
      (SCENARIO.starText = "Star bonus: use only a single measure gate."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 200),
      (SCENARIO.numCorrect = 165),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantChallengeE" === e) {
    (t = !0),
      (SCENARIO.title = "QIII.B: Swap Meet II"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Send qubits from A to D and send qubits from B to C.",
      ),
      SCENARIO.info.push(
        "• Temporary safety regulations prevent direct wire crossings.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, 0],
        0,
        "canal",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 8),
      (SCENARIO.scoreHeightRaw = 5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 100; i++) {
      h = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(h);
      r = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[1].push(r);
    }
    (SCENARIO.starCond = function () {
      return Helper.checkFlipAlign();
    }),
      (SCENARIO.starText =
        "Star bonus: don't use flip gates with vertical or horizontal alignment."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantChallengeF" === e)
    (t = !0),
      (SCENARIO.title = "QIII.C: Relay"),
      (SCENARIO.info = []),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Quantum_network#Quantum_repeaters"),
      SCENARIO.info.push(
        "• A Bell pair is an even superposition of ▲▲ and ▼▼ states.",
      ),
      SCENARIO.info.push(
        "• Generate Bell pairs and output half of each to C and D.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [1, 1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [0, 0, 1, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [0, 0, -1, -1, 0, 0],
        0,
        "relay",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 9),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  else if ("quantChallengeG" === e) {
    (t = !0),
      (SCENARIO.title = "H.D: Back-to-front"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• For each `0` from B: output a ▼ qubit to C."),
      SCENARIO.info.push("• For each `1` from B: output a ▶ qubit to C."),
      (SCENARIO.archive = "https://en.wikipedia.org/wiki/Phase_kickback"),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 2, 1, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
        "btf",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 50; i++) {
      h = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(h),
        0 === h
          ? SCENARIO.QINPUTS[0].push(8)
          : 1 === h && SCENARIO.QINPUTS[0].push(4);
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates("qFlip") <= 2;
    }),
      (SCENARIO.starText = "Star bonus: use two or fewer flip gates"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantErrorA" === e) {
    (t = !0),
      (SCENARIO.title = "H.C: Correction I"),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Quantum_error_correction#Bit_flip_code"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send qubits from A to C."),
      SCENARIO.info.push(
        "• The channels across the board each have a 25% chance of rotating qubits (with rotation of either 90°, 180° or 270°).",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 0, 1, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, 0, 0, 0],
        0,
        "correctionB",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 5),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 1e3; i++) {
      h = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(h);
    }
    (SCENARIO.starCond = function (e) {
      return RBOARD[TIMER.tick].success >= 96;
    }),
      (SCENARIO.starText = "Star bonus: 96 or more correct outputs."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 85),
      (SCENARIO.maxTicks = 9999);
  } else if ("quantErrorB" === e) {
    (t = !0),
      (SCENARIO.title = "H.C+: Correction II"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Send qubits from A to C."),
      SCENARIO.info.push(
        "• The channels across the board rotate any qubit that passes through by a random angle.",
      ),
      SCENARIO.info.push(
        "• Qubits from α and β begin in (perfect) bell pairs.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, -1, -1]),
      (SCENARIO.channelsCol = [1, 0, 0, 0, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, 0, -1, -1],
        0,
        "correctionD",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 9),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 96; i++) {
      h = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(h);
    }
    (SCENARIO.starCond = function (e) {
      return RBOARD[TIMER.tick].success >= 100;
    }),
      (SCENARIO.starText = "Star bonus: perfect success rate."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 80),
      (SCENARIO.maxTicks = 9999);
  } else if ("adderB" === e) {
    (t = !0),
      (SCENARIO.title = "QII.C: Drive-by XOR"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Send A to C and send B to D. Send the logical-XOR of (A,B) to β:",
      ),
      SCENARIO.info.push(
        "   (▲,▲)--> ▲  (▲,▼)--> ▼        (▼,▲)--> ▼  (▼,▼)--> ▲",
      ),
      SCENARIO.info.push(
        "• Channel α contains ancilla qubits (initialised in the ▲ state) for your use.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, -1, -1]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 1, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, -1, -1],
        0,
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 96; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.QINPUTS[0].push(8 * a),
        SCENARIO.QINPUTS[1].push(8 * r),
        SCENARIO.QINPUTS[2].push(((a + r) % 2) * 8);
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates("qControl") < 3;
    }),
      (SCENARIO.starText = "Star bonus: use no more than two control gates."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 300),
      (SCENARIO.numCorrect = 300),
      (SCENARIO.maxTicks = 9999);
  } else if ("adderC" === e) {
    (t = !0),
      (SCENARIO.title = "QII.D: Drive-by AND"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Send A to C and send B to D. Send the logical-AND of (A,B) to β:",
      ),
      SCENARIO.info.push(
        "   (▲,▲)--> ▲  (▲,▼)--> ▲        (▼,▲)--> ▲  (▼,▼)--> ▼",
      ),
      SCENARIO.info.push(
        "• Channel α contains ancilla qubits (initialised in the ▲ state) for your use.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, -1, -1]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 1, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, -1, -1],
        0,
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 96; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.QINPUTS[0].push(8 * a),
        SCENARIO.QINPUTS[1].push(8 * r),
        SCENARIO.QINPUTS[2].push(8 * (a + r > 1.5));
    }
    (SCENARIO.starCond = function () {
      return 0 === Helper.countGates("qFlip");
    }),
      (SCENARIO.starText = "Star bonus: use no qubit flip gates."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 300),
      (SCENARIO.numCorrect = 300),
      (SCENARIO.maxTicks = 9999);
  } else if ("measure" === e) {
    (t = !0),
      (SCENARIO.title = "QII.B: Discernment"),
      (SCENARIO.archive = "https://en.wikipedia.org/wiki/Quantum_tomography"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Inputs A and B contain a copy of the same set of qubits.",
      ),
      SCENARIO.info.push(
        "• Output to C a `0` for every ▲-qubit from A/B and a `1` for every ▶-qubit.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 0, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 296; i++) {
      h = Math.round(Math.random());
      SCENARIO.QINPUTS[0].push(4 * h), SCENARIO.CINPUTS[0].push(h);
    }
    (SCENARIO.starCond = function () {
      return Helper.countGates("measure") <= 1;
    }),
      (SCENARIO.starText = "Star bonus: use only a single measure gate."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 300),
      (SCENARIO.numCorrect = 270),
      (SCENARIO.maxTicks = 9999);
  } else if ("measureB" === e) {
    (t = !0),
      (SCENARIO.title = "QIII.E: Cascade"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Input A consists of a sequence of groups, with each group containing 4 identical qubits.",
      ),
      SCENARIO.info.push(
        "• Output to C a `0` for each group of ▲-qubits and a `1` for each group of ▶-qubits.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(!0, [-1, 0, -1, 0, 0, 0], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 400; i++) {
      h = Math.round(Math.random());
      SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.CINPUTS[0].push(h);
    }
    (SCENARIO.starCond = function () {
      return RBOARD[TIMER.tick].success >= 390;
    }),
      (SCENARIO.starText = "Star bonus: get 390 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 400),
      (SCENARIO.numCorrect = 370),
      (SCENARIO.maxTicks = 9999);
  } else if ("preDenseB" === e) {
    (t = !0),
      (SCENARIO.title = "H.A: Superdense?"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "Input β contains 400 random bits. For each bit `i` from β:",
      ),
      SCENARIO.info.push(
        "• if i=0, then send a bit from A to C and discard a bit from B.",
      ),
      SCENARIO.info.push(
        "• if i=1, then send a bit from B to C and discard a bit from A.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, -1]),
      (SCENARIO.channelsCol = [2, 2, 2, 0, 0, 2]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, 0, -1],
        [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 2),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 400; i++) {
      (a = Math.round(Math.random())),
        (r = Math.round(Math.random())),
        (l = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[2].push(l),
        0 === l ? SCENARIO.CINPUTS[3].push(a) : SCENARIO.CINPUTS[3].push(r);
    }
    (SCENARIO.starCond = function (e) {
      return e >= 340;
    }),
      (SCENARIO.starText = "Star bonus: get 340 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 400),
      (SCENARIO.numCorrect = 325),
      (SCENARIO.maxTicks = 9999);
  } else if ("simpleDistill" === e)
    (t = !0),
      (SCENARIO.title = "QIII.D: Distillary"),
      (SCENARIO.info = []),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Entanglement_distillation"),
      SCENARIO.info.push(
        "• A Bell pair is an even superposition of ▲▲ and ▼▼ states.",
      ),
      SCENARIO.info.push(
        "• Tranform the 3-qubit entangled states into a Bell pair on 2 of the qubits.",
      ),
      SCENARIO.info.push("• Output half of each Bell pair to C and to D."),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [1, 1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, -1, 0, 0],
        0,
        "simpleDistill",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 3),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      (SCENARIO.overlayType = "standard"),
      (SCENARIO.maxTrials = 50),
      (SCENARIO.numCorrect = 50),
      (SCENARIO.maxTicks = 9999);
  else if ("dense" === e) {
    (t = !0),
      (SCENARIO.title = "H.A+: Super-dense!"),
      (SCENARIO.info = []),
      (SCENARIO.archive = "https://en.wikipedia.org/wiki/Superdense_coding"),
      SCENARIO.info.push(
        "• Send an identical copy of A into C (100 bits total).",
      ),
      SCENARIO.info.push(
        "• Send an identical copy of B into D (100 bits total).",
      ),
      SCENARIO.info.push(
        "• Only 100 qubits total can be sent across the partition.",
      ),
      SCENARIO.info.push(
        "• Qubits from α and β begin in (perfect) bell pairs.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, -1, -1, -1]),
      (SCENARIO.channelsCol = [2, 2, 2, 2, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, -1, -1, -1],
        [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 2),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], [], []]);
    for (i = 0; i < 296; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[1].push(r);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 1e3;
    }),
      (SCENARIO.starText = "Star bonus: success in fewer than 1000 ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 200),
      (SCENARIO.numCorrect = 200),
      (SCENARIO.maxTicks = 9999);
  } else if ("teleport" === e) {
    (t = !0),
      (SCENARIO.title = "H.B: Beam me up"),
      (SCENARIO.info = []),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Quantum_teleportation"),
      SCENARIO.info.push("• Output an identical copy of A into C."),
      SCENARIO.info.push(
        "• Only classical bits can be sent across the partition.",
      ),
      SCENARIO.info.push(
        "• Qubits from α and β begin in (perfect) bell pairs.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, -1, -1]),
      (SCENARIO.channelsCol = [1, 0, 0, 0, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, 0, -1, -1],
        [0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0],
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 1),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 96; i++) {
      h = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(h);
    }
    (SCENARIO.starCond = function () {
      return TIMER.victoryTick <= 500;
    }),
      (SCENARIO.starText = "Star bonus: success in fewer than 500 ticks"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("distill" === e) {
    (t = !0),
      (SCENARIO.title = "H.B+: Beam me up II"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Output an identical copy of A into C."),
      SCENARIO.info.push(
        "• Only classical bits can be sent across the partition.",
      ),
      SCENARIO.info.push(
        "• Qubits in α and β begin in (weakly) entangled pairs.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, -1, -1]),
      (SCENARIO.channelsCol = [1, 0, 0, 0, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, 0, -1, -1],
        [0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0],
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 1),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 96; i++) {
      h = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(h);
    }
    (SCENARIO.starCond = function () {
      return 20 == RBOARD[TIMER.tick].success;
    }),
      (SCENARIO.starText = "Star bonus: achieve perfect success rate"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 20),
      (SCENARIO.numCorrect = 15),
      (SCENARIO.maxTicks = 9999);
  } else if ("vaziraniQuantum" === e)
    (t = !0),
      (SCENARIO.title = "H.D+: Quality Control II"),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Bernstein%E2%80%93Vazirani_algorithm"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• From bottom-to-top on control channels: output a `1` if the channel implements a controlled flip on the target qubit. Output a `0` if the channel does not effect the target qubit.",
      ),
      SCENARIO.info.push(
        "• Each device can only be tested with a single input.",
      ),
      (SCENARIO.channelsDir = [1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [0, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [0, 0, -1, 0, 0, 0],
        0,
        "deviceA",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 1),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 3),
      (SCENARIO.numCorrect = 3),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 10),
      (SCENARIO.successRep = 10),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("quantumAdv1" === e)
    (t = !0),
      (SCENARIO.title = "H.E: Correlation"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Inputs from A/B are either entangled states (▲▲+▼▼) or they are in an unentangled state.",
      ),
      SCENARIO.info.push(
        "• Output a `0` for an entangled state or a `1` for an unentangled state.",
      ),
      SCENARIO.info.push(
        "• You are give 10 identical copies of each input state.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
        "threebox",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 10),
      (SCENARIO.device = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return SCENARIO.correctReps >= 30;
      }),
      (SCENARIO.starText = "Star bonus: 30 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 32),
      (SCENARIO.successRep = 26),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("quantumAdv2" === e)
    (t = !0),
      (SCENARIO.title = "H.E+: Correlation II"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Inputs from A/B are either entangled states, (▲▲+▼▼) or (▲▼-▼▲), or they are in an (unknown) product state.",
      ),
      SCENARIO.info.push(
        "• Output a `0` for an entangled state or a `1` for a product state.",
      ),
      SCENARIO.info.push(
        "• You are give 11 identical copies of each input state.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
        "threebox",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 10),
      (SCENARIO.device = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return SCENARIO.correctReps >= 30;
      }),
      (SCENARIO.starText = "Star bonus: 30 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 32),
      (SCENARIO.successRep = 26),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("quantumAdv3" === e)
    (t = !0),
      (SCENARIO.title = "QIII.G: Statistics"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Inputs from A/B are either in an unknown maximally entangled state or they are in product state (of ▲▲, ▶▶, ▼▼ or ◀◀ qubits).",
      ),
      SCENARIO.info.push(
        "• Output a `0` for an entangled state or a `1` for a product state.",
      ),
      SCENARIO.info.push(
        "• You are give 12 identical copies of each input state.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
        "cornerbox",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 11),
      (SCENARIO.device = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return SCENARIO.correctReps >= 46;
      }),
      (SCENARIO.starText = "Star bonus: 46 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 50),
      (SCENARIO.successRep = 38),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("entChallengeA" === e) {
    (t = !0),
      (SCENARIO.title = "QII.E: Lock and Key"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• The device measures a pair of qubits on either the horizontal or vertical axis (randomly chosen), then returns `0` if both measurements produce the same result.",
      ),
      SCENARIO.info.push(
        "• Construct a two-qubit input for the device such that the output is always a `0`.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [0, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [0, 0, 0, 0, 0, 0],
        0,
        "key",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 12),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 400; i++) SCENARIO.CINPUTS[0].push(0);
    (SCENARIO.starCond = function (e) {
      return 0 === Helper.countGates(["rotate"]);
    }),
      (SCENARIO.starText = "Star bonus: use no rotate gates."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 100),
      (SCENARIO.numCorrect = 100),
      (SCENARIO.maxTicks = 9999);
  } else if ("entChallengeB" === e)
    (t = !0),
      (SCENARIO.title = "H.F: GHZ"),
      (SCENARIO.info = []),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/Greenberger%E2%80%93Horne%E2%80%93Zeilinger_state"),
      SCENARIO.info.push("You are initially given (8 copies of) either:"),
      SCENARIO.info.push("• a GHZ state, (▲▲▲▲+▼▼▼▼)."),
      SCENARIO.info.push("• a product of two bell-pair states."),
      SCENARIO.info.push("• a product state of four qubits."),
      SCENARIO.info.push(
        "Output a `0` for a GHZ state else output a `1` for all other states.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
        "GHZ",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 13),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return SCENARIO.correctReps >= 30;
      }),
      (SCENARIO.starText = "Star bonus: achieve perfect success rate."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 30),
      (SCENARIO.successRep = 25),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("entChallengeC" === e)
    (t = !0),
      (SCENARIO.title = "H.F+: GHZ II"),
      (SCENARIO.info = []),
      SCENARIO.info.push("You are initially given (8 copies of) either:"),
      SCENARIO.info.push("• a GHZ state, (▲▲▲▲+▼▼▼▼)."),
      SCENARIO.info.push(
        "• a product of two bell-pair states or a product state of four qubits.",
      ),
      SCENARIO.info.push(
        "Output a `0` for a GHZ state else output a `1` for all other states.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [1, 1, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
        "GHZ",
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 13),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return SCENARIO.correctReps >= 45;
      }),
      (SCENARIO.starText = "Star bonus: get at least 45 correct!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 50),
      (SCENARIO.successRep = 42),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("extraA" === e) {
    (t = !0),
      (SCENARIO.title = "Clone-a-saurus"),
      (SCENARIO.info = []),
      (SCENARIO.archive = "https://en.wikipedia.org/wiki/No-cloning_theorem"),
      SCENARIO.info.push(
        "• Input A consists of a sequence of groups, with each group containing 4 identical qubits in ▲, ▶, ▼ or ◀ state.",
      ),
      SCENARIO.info.push(
        "• Output to each C and D an identical copy of the inputs from A.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, -1, 1, 1]),
      (SCENARIO.channelsCol = [1, 0, 1, 1, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, -1, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 500; i++) {
      h = Math.floor(4 * Math.random());
      SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h);
    }
    (SCENARIO.starCond = function (e) {
      return e >= 900;
    }),
      (SCENARIO.starText = "Star bonus: get 900 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1e3),
      (SCENARIO.numCorrect = 750),
      (SCENARIO.maxTicks = 9999);
  } else if ("extraB" === e)
    (t = !0),
      (SCENARIO.title = "Refinery"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Channels α and β contain 500 weakly entangled qubit pairs.",
      ),
      SCENARIO.info.push(
        "• Output to A/C strongly entangled qubit pairs (Ent > 0.85 in the qubit analyzer).",
      ),
      SCENARIO.info.push(
        "• The scenario ends when 2 or fewer qubits remain on the board.",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, -1, -11]),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, 0, -1, 0, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.device = 11),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.victoryCond = 3),
      (SCENARIO.starCond = function (e) {
        return e >= 50;
      }),
      (SCENARIO.starText = "Star bonus: 50 or more entangled pairs."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 9999),
      (SCENARIO.numCorrect = 30),
      (SCENARIO.maxTicks = 9999);
  else if ("extraC" === e) {
    (t = !0),
      (SCENARIO.title = "Addition++"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Inputs A and B each represent an integer, ranged 0-15, encoded as a 4-bit binary string (from least to most significant bit). ",
      ),
      SCENARIO.info.push(
        "• Output to C the product of the integers from A and B, encoded as an 8-bit binary string (from least to most significant bit).",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (a = [], r = [], i = 0; i < 4; i++)
      a.push(Math.round(Math.random())),
        r.push(Math.round(Math.random())),
        SCENARIO.CINPUTS[0].push(a[i]),
        SCENARIO.CINPUTS[1].push(r[i]);
    var d = a[0] + 2 * a[1] + 4 * a[2] + 8 * a[3],
      u = r[0] + 2 * r[1] + 4 * r[2] + 8 * r[3],
      c = (d * u).toString(2),
      I = c.length;
    SCENARIO.CINPUTS[2] = [0, 0, 0, 0, 0, 0, 0, 0];
    for (i = 0; i < I; i++) SCENARIO.CINPUTS[2][i] = parseInt(c[I - i - 1]);
    (SCENARIO.starCond = function () {
      return FIELD.cleanTiles >= (FIELD.cols - 2) * (FIELD.rows - 2) * 0.4;
    }),
      (SCENARIO.starText = "Star bonus: use <60% of floor space (current:"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 8),
      (SCENARIO.numCorrect = 8),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 16),
      (SCENARIO.successRep = 16),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0),
      (SCENARIO.victoryCond = 4);
  } else if ("binaryencode" === e)
    (t = !0),
      (SCENARIO.title = "CIII.E: Unary <<< Binary"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Input A contains a string of N bits in state `1` (with 4 < N < 16) followed by a `0` bit.",
      ),
      SCENARIO.info.push(
        "• Output to C the integer N encoded as a 4-bit binary string (from least to most significant bit).",
      ),
      (SCENARIO.channelsDir = [-1, 1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 0, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return FIELD.cleanTiles >= (FIELD.cols - 2) * (FIELD.rows - 2) * 0.6;
      }),
      (SCENARIO.starText = "Star bonus: use <40% of floor space (current:"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 4),
      (SCENARIO.numCorrect = 4),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 10),
      (SCENARIO.successRep = 10),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0),
      (SCENARIO.victoryCond = 4);
  else if ("adder" === e) {
    (t = !0),
      (SCENARIO.title = "CIII.F: Calculon"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Inputs A and B each contain a 64-bit string representing an integer in binary (from least to most significant bit).",
      ),
      SCENARIO.info.push(
        "• Output to C the 64-bit string corresponding to the sum of the input integers (from least to most significant bit).",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    var E = 0;
    for (i = 0; i < 58; i++) {
      if (57 === i) (a = 0), (r = 0), (l = (a + r + E) % 2);
      else
        (a = Math.round(Math.random())),
          (r = Math.round(Math.random())),
          (l = (a + r + E) % 2);
      SCENARIO.CINPUTS[0].push(a),
        SCENARIO.CINPUTS[1].push(r),
        SCENARIO.CINPUTS[2].push(l),
        (E = Math.floor((a + r + E) / 2));
    }
    (SCENARIO.starCond = function () {
      return FIELD.cleanTiles >= (FIELD.cols - 2) * (FIELD.rows - 2) * 0.6;
    }),
      (SCENARIO.starText = "Star bonus: use <40% of floor space (current:"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 64),
      (SCENARIO.numCorrect = 64),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.victoryCond = 4);
  } else if ("extraD" === e)
    (t = !0),
      (SCENARIO.title = "Magnum Opus"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Input A contains a string of at least 15 bits, while input B contains a string of exactly 9 bits.",
      ),
      SCENARIO.info.push(
        "• Output to C a `1` if ANY substring from A exactly matches B, else ouput a `0`.",
      ),
      SCENARIO.info.push(
        "• Four sequential `1` bits (uniquely) marks the termination of the string from A.",
      ),
      (SCENARIO.channelsDir = [-1, -1, -1, 1, 1, 1]),
      (SCENARIO.channelsCol = [2, 2, 2, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [-1, -1, -1, 0, 0, 0],
        0,
      )),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = "Star bonus: freebie! You deserve it..."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.repetitions = 25),
      (SCENARIO.successRep = 25),
      (SCENARIO.currentRep = 1),
      (SCENARIO.correctReps = 0);
  else if ("chsh" === e)
    (t = !0),
      (SCENARIO.title = "QIII.F: Jolly Cooperation"),
      (SCENARIO.archive =
        "https://en.wikipedia.org/wiki/CHSH_inequality#CHSH_game"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Adjust the measurement gates to win >84% of rounds.",
      ),
      SCENARIO.info.push(
        "• Each round, Alice and Bob each RECEIVE a random bit from the center, then must SEND another bit back to the center.",
      ),
      SCENARIO.info.push(
        "• To win the round: sent bits must DIFFER if the received bits were both '1' state, else sent bits must MATCH.",
      ),
      (SCENARIO.journal = !0),
      (SCENARIO.channelsDir = [1, 1, 1, 1, -1, -1]),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(
        !0,
        [0, 0, 0, 0, 0, 0],
        0,
        "fixed",
      )),
      (SCENARIO.menuGrey = [
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]),
      (SCENARIO.editable[138] = 2),
      (SCENARIO.editable[174] = 2),
      (SCENARIO.editable[146] = 2),
      (SCENARIO.editable[186] = 2),
      (SCENARIO.editable[177] = 2),
      (SCENARIO.editable[183] = 2),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = "Star bonus: freebie!"),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1800),
      (SCENARIO.numCorrect = 1800),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.victoryCond = 2),
      (SCENARIO.outputC = [84, 100]),
      (SCENARIO.outputD = [0, 100]),
      (SCENARIO.device = 12);
  else if ("freeA" === e) {
    (t = !0),
      (SCENARIO.disableOverlay = !0),
      (SCENARIO.title = "Free-form"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Template used for level design."),
      SCENARIO.info.push(
        "• Overlay is semi-transparent in order to faciliate placement of hidden elements.",
      ),
      (SCENARIO.channelsDir = [0, 0, 0, 0, 0, 0]),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!1, [1, 1, 1, 1, 1, 1], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.device = 10),
      (SCENARIO.QINPUTS = [[], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 400; i++) {
      h = Math.floor(4 * Math.random());
      SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.QINPUTS[0].push(4 * h),
        SCENARIO.CINPUTS[0].push(h);
    }
    (SCENARIO.starCond = function () {
      return RBOARD[TIMER.tick].success >= 390;
    }),
      (SCENARIO.starText = "Star bonus: get 390 or more correct."),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1e3),
      (SCENARIO.numCorrect = 1e3),
      (SCENARIO.maxTicks = 9999),
      (SCENARIO.starCond = function () {
        return !0;
      }),
      (SCENARIO.starText = ""),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 200),
      (SCENARIO.numCorrect = 200),
      (SCENARIO.maxTicks = 9999);
  } else if ("freeB" === e) {
    (t = !0),
      (SCENARIO.disableOverlay = !0),
      (SCENARIO.title = "Free-form"),
      (SCENARIO.info = []),
      SCENARIO.info.push(
        "• Each round, Alice and Bob each RECEIVE a random bit from the center, then SEND another bit back to the center.",
      ),
      SCENARIO.info.push(
        "• To win the round: sent bits must DIFFER if the received bits were both '1' state, else sent bits must MATCH.",
      ),
      SCENARIO.info.push("• Adjust the measurements to maximize the win rate."),
      (SCENARIO.channelsDir = [0, 0, 0, 0, 0, 0]),
      (SCENARIO.channelsCol = [1, 1, 1, 1, 1, 1]),
      (SCENARIO.hasEntanglers = !0),
      (SCENARIO.editable = BoardData.makeEditable(!1, [1, 1, 1, 1, 1, 1], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 96; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.QINPUTS[0].push(8 * a),
        SCENARIO.QINPUTS[1].push(8 * r),
        SCENARIO.QINPUTS[2].push(8 * (a + r));
      var S = Math.round(Math.random()),
        f = Math.round(Math.random());
      SCENARIO.CINPUTS[0].push(S),
        SCENARIO.CINPUTS[1].push(f),
        SCENARIO.CINPUTS[2].push((S + f) % 2);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = ""),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 20),
      (SCENARIO.numCorrect = 15),
      (SCENARIO.maxTicks = 9999);
  } else if ("freeC" === e) {
    (t = !0),
      (SCENARIO.disableOverlay = !1),
      (SCENARIO.title = "Free-form"),
      (SCENARIO.info = []),
      SCENARIO.info.push("• Empty factory for testing and experimentation."),
      (SCENARIO.channelsDir = [1, 1, 1, 1, 1, 1]),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (SCENARIO.hasEntanglers = !1),
      (SCENARIO.editable = BoardData.makeEditable(!0, [1, 1, 1, 1, 1, 1], 0)),
      (SCENARIO.menuGrey = [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ]),
      (SCENARIO.division = 0),
      (SCENARIO.scoreHeightRaw = 4.5),
      (SCENARIO.scoreHeight = SCENARIO.scoreHeightRaw * FIELD.tileHeight),
      (SCENARIO.QINPUTS = [[], [], [], []]),
      (SCENARIO.CINPUTS = [[], [], []]);
    for (i = 0; i < 96; i++) {
      (a = Math.round(Math.random())), (r = Math.round(Math.random()));
      SCENARIO.QINPUTS[0].push(8 * a),
        SCENARIO.QINPUTS[1].push(8 * r),
        SCENARIO.QINPUTS[2].push(8 * (a + r));
      (S = Math.round(Math.random())), (f = Math.round(Math.random()));
      SCENARIO.CINPUTS[0].push(S),
        SCENARIO.CINPUTS[1].push(f),
        SCENARIO.CINPUTS[2].push((S + f) % 2);
    }
    (SCENARIO.starCond = function () {
      return !0;
    }),
      (SCENARIO.starText = ""),
      SCENARIO.overlayType,
      (SCENARIO.maxTrials = 1),
      (SCENARIO.numCorrect = 1),
      (SCENARIO.maxTicks = 9999);
  }
  return (
    !!t &&
    (ResetConsts.all(),
    Menu.initialize(),
    Timer.initialize(),
    ResetConsts.refresh(),
    CTRLMENU.reset(CANV.menu2),
    !0)
  );
}
function LevelGates(e, t, i) {
  var a = !1,
    r = [],
    s = [],
    o = [];
  if (((solution = !1), void 0 === i && (i = STATE.blueprint), "tut1" === e)) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", -2.7488935718910694, !1],
        [18, 4, 1, 3, "halt", -2.7488935718910694, !0],
        [0, 10, 3, 1, "move", -1.1780972450961722, !1],
        [18, 3, 1, 3, "halt", -1.1780972450961722, !0],
        [0, 11, 3, 1, "move", 2.356194490192345, !1],
        [18, 2, 1, 3, "halt", 2.356194490192345, !0],
        [0, 12, 3, 1, "move", 1.5707963267948966, !1],
        [18, 1, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 13, 3, 1, "move", -1.5707963267948968, !1],
        [18, 0, 1, 3, "halt", -1.5707963267948968, !0],
      ]);
    var n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ],
      l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
      ];
  } else if ("tut2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 4, 1, 3, "halt", 0, !0],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", -0.39269908169872486, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 2, 1, 3, "halt", 0, !0],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [18, 1, 1, 3, "halt", -1.1780972450961722, !0],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
        [18, 0, 1, 3, "halt", -2.356194490192345, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, 62, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, -1.5707963267948968, 0, 2, -1],
        [4, 8, "rotate", "free", 0, -1.5707963267948966, 0, 0, -1],
        [4, 5, "cInvert", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("tut3" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 1, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 2, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [18, 1, 1, 3, "halt", 0.3926990816987241, !0],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
        [18, 0, 1, 3, "halt", -0.7853981633974486, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, 22, 22, 22, 52, 22, 22, 22, 25, 4, 2, 2, 2, 2, 2,
        2, 2, 2, 78, -1, -1, -1, -1, -1, -1, -1, 4, 13, 6, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 4, 2, 2, 2, 62, 2, 2, 6, 23, 22, 22, 22, 22, 22, 22,
        22, 22, 22, 94, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [4, 8, "rotate", "free", 0, -1.5707963267948966, 0, 0, -1],
        [4, 5, "cInvert", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("tut4" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 1, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 2, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [18, 1, 1, 3, "halt", 0.3926990816987241, !0],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
        [18, 0, 1, 3, "halt", -0.7853981633974486, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, 22, 22, 22, 22, 22, 25, -1, -1, -1, -1, -1, 4, 2,
        2, 2, 2, 2, 78, -1, -1, 4, 2, 5, -1, 53, -1, -1, -1, -1, -1, 1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, 63, -1, -1, -1, -1, -1, -1, -1, 1, -1,
        -1, -1, -1, -1, -1, 4, 2, 6, -1, -1, -1, 53, 24, 22, 22, 22, 22, 12, 22,
        22, 22, 22, 22, 94, 1, -1, -1, -1, 63, -1, 23, 26, -1, -1, -1, -1, 1,
        -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 6, -1,
        -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [4, 7, "rotate", "free", 1, 1.5707963267948966, 0, 0, -1],
        [4, 9, "rotate", "free", 1, 0.7853981633974483, 0, 0, -1],
        [6, 6, "cInvert", "free", 1, 0, 0, 0, -1],
        [6, 8, "cInvert", "free", 1, 0, 0, 0, -1],
      ]);
  } else if ("tut5" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 0, 1, 3, "move", 1, 0, !1],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 23, 22, 22, 22, 22, 22, 25, -1, -1, -1, -1, -1, 4,
        2, 2, 2, 2, 10, -1, -1, -1, 4, 2, 5, -1, 53, -1, -1, -1, -1, -1, 1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, -1, 63, -1, 53, -1, -1, -1, -1, -1, 1,
        -1, -1, -1, -1, -1, -1, 4, 2, 6, -1, 63, -1, 53, 24, 22, 22, 22, 22, 12,
        22, 22, 22, 22, 30, -1, 1, -1, -1, -1, 63, -1, 23, 26, -1, -1, -1, -1,
        1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 6, -1,
        -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [4, 7, "rotate", "free", 1, 1.5707963267948966, 0, 0, -1],
        [4, 9, "rotate", "free", 1, 0.7853981633974483, 0, 0, -1],
        [6, 6, "cInvert", "free", 1, 0, 0, 0, -1],
        [6, 8, "cInvert", "free", 1, 0, 0, 0, -1],
        [4, 8, "rotate", "free", 1, 3.9269908169872414, 0, 0, -1],
        [6, 7, "cInvert", "free", 1, 1, 0, 0, -1],
      ]);
  } else if ("tut6" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (o = []);
    if (2 === i)
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 54, 40, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 24, 52, 40, 89, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 44, 22, 47, 22, 52, 22, 44, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 54, 42, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
        (l = [
          [0, 0, "cCreate", "free", 1, 0, 0, 1, 24],
          [18, 0, "cCreate", "free", 1, 1, 0, 2, 24],
          [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
          [13, 8, "cCreate", "free", 0, 1, 0, 0, -1],
          [14, 8, "switch", "free", 0, 1, 0, 1, -1],
          [15, 8, "trash", "free", 0, 0.785398163397, 0, 0, -1],
          [14, 9, "cInvert", "free", 0, 1, 0, 0, -1],
          [14, 9, "cInvert", "free", 0, 0, 1, 0, -1],
          [15, 9, "switch", "free", 0, 1, 0, 1, -1],
          [16, 9, "delay", "free", 0, 0, 0, 3, -1],
          [11, 10, "cCombine", "free", 0, 0, 0, 0, -1],
          [13, 10, "cCombine", "free", 0, 0, 0, 0, -1],
          [13, 10, "cCombine", "free", 3, 0, 1, 0, -1],
          [15, 10, "cInvert", "free", 0, 1, 0, 0, -1],
          [15, 10, "cInvert", "free", 0, 0, 1, 0, -1],
          [17, 10, "cCombine", "free", 0, 0, 0, 0, -1],
          [12, 11, "cCreate", "free", 0, 1, 0, 0, -1],
          [13, 11, "switch", "free", 2, 1, 0, 1, -1],
          [14, 11, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        ]);
    else
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
        (l = [
          [0, 0, "cCreate", "free", 1, 0, 0, 1, 24],
          [18, 0, "cCreate", "free", 1, 1, 0, 2, 24],
          [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        ]);
  } else if ("class1" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 24],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 24],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("class2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, -1, "halt", 0, 0, !1],
      [0, 8, 3, -1, "halt", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 1, 1, -1, "halt", 1, 0, !1],
      [0, 12, 3, -1, "halt", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 9, 3, 1, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [1, 0, 2, -1, "wait", 1, 0, !1],
      [1, 13, 2, -1, "wait", 0, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [18, 0, 1, 3, "halt", 0, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        24, 89, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 23, 89, 56, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [1, 13, "delay", "transform", 0, 0, 0, 3, -1],
        [1, 0, "delay", "transform", 0, 0, 0, 3, -1],
        [2, 0, "cCreate", "free", 2, 0, 0, 1, 12],
        [2, 13, "cCreate", "free", 2, 1, 0, 1, 12],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 24],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 2, 0, 2, 24],
      ]);
  } else if ("class3" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 1, 0, !1],
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [0, 9, 3, 1, "move", 0, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [0, 11, 3, 1, "move", 1, 0, !1],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 0, 0, !1],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [0, 13, 3, 1, "move", 0, 0, !1],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 44],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("class4" === e) {
    a = !0;
    (s = [
      [0, 8, 3, -1, "halt", 0, 0, !1],
      [18, 5, 1, 4, "move", 1, 0, !0],
      [0, 4, 1, -1, "halt", 1, 0, !1],
      [0, 12, 3, -1, "halt", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, -1, "halt", 1, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 0, 2, -1, "halt", 1, 0, !1],
      [1, 13, 2, -1, "wait", 0, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 1, 1, -1, "halt", 1, 0, !0],
      [18, 0, 1, -1, "halt", 0, 0, !0],
    ]),
      (n = [
        24, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 89, 56, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [2, 13, "cCreate", "free", 2, 1, 0, 1, 22],
        [1, 13, "delay", "transform", 0, 1, 0, 3, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 44],
        [1, 0, "cCreate", "free", 2, 0, 0, 1, 22],
      ]);
  } else if ("class5" === e) {
    a = !0;
    (s = [
      [0, 8, 3, 2, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 0, 0, !1],
      [0, 10, 3, 1, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 6],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 6],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 18],
      ]);
  } else if ("class6" === e) {
    a = !0;
    (s = [
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 9, 3, 1, "halt", 0, 0, !0],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 24],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 24],
      ]);
  } else if ("class7" === e) {
    a = !0;
    (s = [
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 5, 1, 2, "move", 1, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 12, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
      [0, 0, 2, 3, "move", 0, 0, !1],
      [18, 0, 0, 3, "halt", 0, 0, !0],
      [1, 0, 2, 0, "move", 1, 0, !1],
      [17, 0, 0, 2, "halt", 1, 0, !0],
      [2, 0, 2, 0, "move", 1, 0, !1],
      [16, 0, 0, 2, "halt", 1, 0, !0],
      [3, 0, 2, 0, "move", 0, 0, !1],
      [4, 0, 2, 0, "move", 1, 0, !1],
      [5, 0, 2, 0, "move", 1, 0, !1],
      [6, 0, 2, 0, "move", 0, 0, !1],
      [7, 0, 2, 0, "move", 0, 0, !1],
      [8, 0, 2, 0, "move", 0, 0, !1],
    ]),
      (n = [
        24, 22, 22, 22, 22, 22, 22, 22, 56, -1, -1, -1, -1, -1, -1, -1, 54, 22,
        25, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 26],
        [8, 0, "cCreate", "free", 2, 0, 0, 1, 26],
        [16, 0, "cCreate", "free", 0, 0, 0, 2, 0],
      ]);
  } else if ("classPuzzle1" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 23, 89, 57, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 97],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [2, 13, "cCreate", "free", 2, 1, 0, 1, 97],
        [1, 13, "delay", "free", 0, 0, 0, 5, -1],
      ]);
  } else if ("classPuzzle2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, 94],
      ]);
  } else if ("classPuzzle3" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, 94],
      ]);
  } else if ("classPuzzle3B" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, 94],
      ]);
  } else if ("classPuzzle4" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 44],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("classPuzzle5" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 0, 1, 3, "move", 1, 0, !1],
    ]),
      (o = []),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 54],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 36],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 2, 0, 2, 18],
      ]);
  } else if ("classPuzzle6" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 494],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 494],
        [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        [6, 12, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 11, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 10, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 9, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 7, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 8, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 6, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 5, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 4, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 3, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 2, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 1, "cInvert", "free", 0, 0, 0, 3, -1],
      ]);
  } else if ("classPuzzle7" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 0, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 0, 0, !0],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 24, 91, -1, 23, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 44, 26, -1, -1, 24, 44, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 44, 25, -1, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 23, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 44],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 44],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 44],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [2, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [2, 7, "cCombine", "free", 0, 0, 0, 1, -1],
        [16, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [16, 7, "cCombine", "free", 0, 0, 0, 1, -1],
      ]);
  } else if ("classPuzzle8" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 5, 1, 2, "halt", 0, 0, !1],
      [0, 8, 3, 2, "halt", 0, 0, !1],
      [0, 4, 1, 3, "halt", 0, 0, !1],
      [0, 9, 3, 1, "halt", 0, 0, !1],
      [0, 3, 1, 3, "halt", 0, 0, !1],
      [0, 10, 3, 1, "halt", 0, 0, !1],
      [0, 2, 1, 3, "halt", 0, 0, !1],
      [0, 11, 3, 1, "halt", 0, 0, !1],
      [0, 1, 1, 3, "halt", 0, 0, !1],
      [0, 12, 3, 1, "halt", 0, 0, !1],
      [0, 0, 2, 3, "halt", 0, 0, !1],
      [0, 13, 2, 1, "halt", 0, 0, !1],
      [1, 0, 2, 0, "halt", 0, 0, !1],
      [1, 13, 2, 0, "halt", 0, 0, !1],
      [2, 0, 2, 0, "halt", 0, 0, !1],
      [2, 13, 2, 0, "halt", 0, 0, !1],
    ]),
      (n = [
        24, 22, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 56, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 0, 0],
        [2, 0, "cCreate", "free", 2, 0, 0, 0, 0],
        [2, 13, "cCreate", "free", 2, 0, 0, 0, 0],
      ]);
  } else if ("classPuzzle9" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 5, 1, 2, "halt", 0, 0, !1],
      [0, 4, 1, 3, "halt", 0, 0, !1],
      [0, 3, 1, 3, "halt", 0, 0, !1],
      [0, 2, 1, 3, "halt", 0, 0, !1],
      [0, 1, 1, 3, "halt", 0, 0, !1],
      [0, 0, 2, 3, "halt", 0, 0, !1],
      [1, 0, 2, 0, "halt", 0, 0, !1],
      [2, 0, 2, 0, "halt", 0, 0, !1],
      [3, 0, 2, 0, "halt", 0, 0, !1],
      [4, 0, 2, 0, "halt", 0, 0, !1],
    ]),
      (n = [
        24, 22, 22, 22, 22, 22, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 0, 0],
      ]);
  } else if ("vaziraniClassic" === e) {
    a = !0;
    (s = [
      [18, 4, 1, -1, "halt", 1, 0, !0],
      [18, 3, 1, -1, "halt", 1, 0, !0],
      [18, 2, 1, -1, "move", 1, 0, !0],
    ]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, 44, 22, 22, 22, 22, 22, 22, 25, -1, 24, 44, -1,
        -1, -1, 21, -1, -1, -1, -1, 44, 22, 22, 22, 25, -1, 24, 31, 22, 31, 44,
        -1, -1, -1, 21, -1, -1, -1, -1, 44, 25, -1, 24, 31, 22, 31, 31, 22, 31,
        44, -1, -1, -1, 21, -1, -1, -1, -1, -1, 23, 40, 26, 23, 40, 26, 23, 40,
        26, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, 44, 52, 22, 22, 52, 22, 22,
        52, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [6, 5, "switch", "free", 0, 1, 0, 1, -1],
        [9, 5, "switch", "free", 0, 1, 0, 1, -1],
        [12, 5, "switch", "free", 0, 1, 0, 1, -1],
        [12, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [12, 6, "cInvert", "free", 0, 0, 1, 0, -1],
        [9, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 6, "cInvert", "free", 0, 0, 1, 0, -1],
        [6, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [6, 6, "cInvert", "free", 0, 0, 1, 0, -1],
        [4, 4, "cCombine", "free", 0, 0, 0, 1, -1],
        [4, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [4, 2, "cCombine", "free", 0, 0, 0, 1, -1],
        [14, 4, "cCombine", "free", 0, 0, 0, 1, -1],
        [14, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [14, 2, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 0, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 0],
        [13, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [5, 6, "cCombine", "free", 0, 0, 0, 1, -1],
      ]);
  } else if ("quant1" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0.7853981633974484, !1],
      [0, 8, 3, 2, "move", -1.5707963267948966, !1],
      [0, 4, 1, 3, "move", -0.3926990816987246, !1],
      [18, 4, 1, 3, "halt", -0.3926990816987246, !0],
      [0, 9, 3, 1, "move", 2.748893571891069, !1],
      [18, 9, 3, 1, "halt", 2.748893571891069, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [18, 3, 1, 3, "halt", 3.141592653589793, !0],
      [0, 10, 3, 1, "move", 2.748893571891069, !1],
      [18, 10, 3, 1, "halt", 2.748893571891069, !0],
      [0, 2, 1, 3, "move", -1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 11, 3, 1, "move", 1.5707963267948966, !1],
      [18, 11, 3, 1, "halt", 1.5707963267948966, !0],
      [0, 1, 1, 3, "move", 1.1780972450961724, !1],
      [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      [0, 12, 3, 1, "move", 1.1780972450961724, !1],
      [18, 12, 3, 1, "halt", 1.1780972450961724, !0],
      [0, 0, 1, 3, "move", -1.178097245096172, !1],
      [18, 0, 1, 3, "halt", -1.178097245096172, !0],
      [0, 13, 3, 1, "move", -1.178097245096172, !1],
      [18, 13, 3, 1, "halt", -1.178097245096172, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 2, 2, 62, 68, 62, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 4, 2, 2, 62, 68, 62, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 44],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 44],
        [18, 5, "qCompare", "free", 0, 0.7853981633974484, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, -1.5707963267948966, 0, 4, -1],
        [3, 8, "qFlip", "free", 0, 5.497787143782138, 0, 0, -1],
        [4, 8, "rotate", "free", 0, 3.9269908169872414, 0, 0, -1],
        [5, 8, "qFlip", "free", 0, 4.71238898038, 0, 0, -1],
        [3, 5, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [5, 5, "rotate", "free", 0, 5.497787143782138, 0, 0, -1],
        [4, 5, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
      ]);
  } else if ("quant2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 1.5707963267948966, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 9, 3, 1, "halt", 1.5707963267948966, !0],
        [0, 10, 3, 1, "move", -1.5707963267948966, !1],
        [18, 10, 3, 1, "halt", -1.5707963267948966, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 11, 3, 1, "halt", 1.5707963267948966, !0],
        [0, 12, 3, 1, "move", -1.5707963267948966, !1],
        [18, 12, 3, 1, "halt", -1.5707963267948966, !0],
        [0, 13, 3, 1, "move", 1.5707963267948966, !1],
        [18, 13, 3, 1, "halt", 1.5707963267948966, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [9, 10, "cCombine", "free", 0, 0, 0, 1, -1],
        [9, 3, "qCombine", "free", 0, 0, 0, 1, -1],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 44],
        [18, 13, "qCreate", "free", 3, 0, 0, 2, 44],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 44],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 1.5707963267948966, 0, 4, -1],
      ]);
  } else if ("quant3A" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 3, 1, 3, "move", 0, !1],
      [0, 2, 1, 3, "move", 0, !1],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 0, 1, 3, "move", 0, !1],
      [0, 8, 3, 2, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [0, 12, 3, 1, "move", 0, !1],
      [0, 13, 3, 1, "move", 0, !1],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 25, -1, -1,
        -1, -1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 60, 84, 23, 22, 22, 22,
        22, 22, 22, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 4, 2, 2, 2, 2, 2, 2, 2, 2, 60, 5, 4, 60, 84, 24,
        22, 22, 22, 96, 1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 65, 6, 44, 22,
        26, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 3, 2, 60, 84,
        -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "cOneCompare", "free", 0, 0, 0, 0, 0],
        [18, 8, "cOneCompare", "free", 0, 0, 0, 0, 0],
        [0, 0, "qCreate", "free", 1, 0, 0, 0, 994],
        [9, 5, "measure", "free", 0, 0, 0, 0, -1],
        [10, 5, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 13, "qCreate", "free", 3, 0, 0, 0, 994],
        [9, 8, "measure", "free", 0, 0, 0, 0, -1],
        [9, 9, "switch", "free", 3, 1, 0, 1, -1],
        [10, 9, "qCombine", "free", 0, 0, 0, 0, -1],
        [10, 9, "qCombine", "free", 1, 0, 1, 0, -1],
        [9, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [12, 8, "measure", "free", 0, 0, 0, 0, -1],
        [12, 10, "measure", "free", 0, 0, 0, 0, -1],
        [12, 9, "cCombine", "free", 0, 0, 0, 0, -1],
        [13, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [13, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
      ]);
  } else if ("quant3" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 0, !1],
      [18, 3, 1, 3, "halt", 0, !0],
      [0, 2, 1, 3, "move", 1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", 1.5707963267948966, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 300],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 300],
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "qCompare", "free", 0, 1.5707963267948966, 0, 2, -1],
      ]);
  } else if ("quant4" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.1780972450961724, !1],
      [0, 4, 1, 3, "move", -0.7853981633974484, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 0.7853981633974484, !1],
      [18, 3, 1, 3, "halt", 0, !0],
      [0, 2, 1, 3, "move", 1.1780972450961724, !1],
      [18, 2, 1, 3, "halt", 0, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 1.1780972450961724, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 44],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
      ]);
  } else if ("quant5" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 8, 3, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 0, !1],
      [0, 13, 3, 1, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 94],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 2, 0, 2, 94],
      ]);
  } else if ("quant6" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 8, 3, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 0, !1],
      [0, 13, 3, 1, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 94],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 2, 0, 2, 94],
      ]);
  } else if ("quant6B" === e) {
    a = !0;
    (s = []),
      (o = [
        [0, 5, 1, 2, "move", 3.141592653589793, !1],
        [0, 8, 3, 2, "move", 0, !1],
        [0, 4, 1, 3, "move", 3.141592653589793, !1],
        [18, 4, 1, 3, "halt", 3.141592653589793, !0],
        [0, 9, 3, 1, "move", 0.39269908169872403, !1],
        [18, 9, 3, 1, "halt", 0.39269908169872403, !0],
        [0, 3, 1, 3, "move", -2.748893571891069, !1],
        [18, 3, 1, 3, "halt", -2.748893571891069, !0],
        [0, 10, 3, 1, "move", -2.356194490192345, !1],
        [18, 10, 3, 1, "halt", -2.356194490192345, !0],
        [0, 2, 1, 3, "move", 1.9634954084936207, !1],
        [18, 2, 1, 3, "halt", 1.9634954084936207, !0],
        [0, 11, 3, 1, "move", 0.39269908169872403, !1],
        [18, 11, 3, 1, "halt", 0.39269908169872403, !0],
        [0, 1, 1, 3, "move", 0, !1],
        [18, 1, 1, 3, "halt", 0, !0],
        [0, 12, 3, 1, "move", -0.3926990816987246, !1],
        [18, 12, 3, 1, "halt", -0.3926990816987246, !0],
        [0, 0, 1, 3, "move", -1.178097245096172, !1],
        [18, 0, 1, 3, "halt", -1.178097245096172, !0],
        [0, 13, 3, 1, "move", 2.748893571891069, !1],
        [18, 13, 3, 1, "halt", 2.748893571891069, !0],
      ]),
      (n = [
        4, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74,
        5, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 68, 76, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 6,
      ]),
      (l = [
        [18, 5, "qCompare", "free", 0, 3.14159265359, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 0, 0, 4, -1],
        [1, 0, "qFlip", "free", 0, 0, 0, 3, -1],
        [1, 13, "qFlip", "free", 0, 1.570796326795, 0, 3, -1],
        [2, 0, "qCreate", "free", 2, 2, 0, 1, 94],
        [2, 13, "qCreate", "free", 2, 3, 0, 1, 94],
        [17, 0, "qCreate", "free", 0, 0, 0, 2, 94],
        [17, 13, "qCreate", "free", 0, 1, 0, 2, 94],
      ]);
  } else if ("quant7" === e) {
    a = !0;
    (o = [
      [0, 8, 3, 2, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [18, 9, 3, 1, "halt", 0, !0],
      [0, 10, 3, 1, "move", 0, !1],
      [18, 3, 1, 3, "halt", 0, !0],
      [18, 10, 3, 1, "halt", 0, !0],
      [0, 11, 3, 1, "move", 0, !1],
      [18, 2, 1, 3, "halt", 0, !0],
      [18, 11, 3, 1, "halt", 0, !0],
      [0, 12, 3, 1, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [18, 12, 3, 1, "halt", 0, !0],
      [0, 13, 3, 1, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
      [18, 13, 3, 1, "halt", 0, !0],
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 1.5707963267948966, !1],
      [0, 3, 1, 3, "move", 1.5707963267948966, !1],
      [0, 2, 1, 3, "move", 1.5707963267948966, !1],
      [0, 1, 1, 3, "move", 1.5707963267948966, !1],
      [0, 0, 2, 3, "move", 1.5707963267948966, !1],
    ]),
      (n = [
        4, 62, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 5, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, 3, 70, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 4, 68, 2, 64, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [0, 13, "qCreate", "free", 3, 0, 0, 0, 44],
        [2, 6, "qControl", "free", 0, 0, 0, 0, -1],
        [1, 0, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 0, "qCreate", "free", 2, 0, 0, 3, 44],
        [2, 7, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 7, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [4, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [4, 7, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 0, 0, 4, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
        [18, 13, "qCreate", "free", 3, 0, 0, 2, 44],
        [8, 5, "measure", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("quantChallengeA" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", -1.5707963267948966, !1],
      [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
      [0, 3, 1, 3, "move", 1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", 1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 1, 1, 3, "move", 1.5707963267948966, !1],
      [18, 1, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 0, 1, 3, "move", 1.5707963267948966, !1],
      [18, 0, 1, 3, "halt", -1.5707963267948966, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 94],
        [18, 5, "qCompare", "free", 0, -1.5707963267948966, 0, 2, -1],
      ]);
  } else if ("quantChallengeB" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 8, 3, 2, "move", -1.9634954084936211, !1],
      [0, 4, 1, 3, "move", 1.5707963267948966, !1],
      [0, 9, 3, 1, "move", 2.356194490192345, !1],
      [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
      [18, 9, 3, 1, "halt", 2.356194490192345, !0],
      [0, 3, 1, 3, "move", 1.1780972450961724, !1],
      [0, 10, 3, 1, "move", -0.3926990816987246, !1],
      [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
      [18, 10, 3, 1, "halt", -0.3926990816987246, !0],
      [0, 2, 1, 3, "move", -0.3926990816987246, !1],
      [0, 11, 3, 1, "move", -0.7853981633974484, !1],
      [18, 2, 1, 3, "halt", -0.3926990816987246, !0],
      [18, 11, 3, 1, "halt", -0.7853981633974484, !0],
      [0, 1, 1, 3, "move", 3.141592653589793, !1],
      [0, 12, 3, 1, "move", -0.3926990816987246, !1],
      [18, 1, 1, 3, "halt", 3.141592653589793, !0],
      [18, 12, 3, 1, "halt", -0.3926990816987246, !0],
      [0, 0, 1, 3, "move", 2.748893571891069, !1],
      [0, 13, 3, 1, "move", 1.9634954084936207, !1],
      [18, 0, 1, 3, "halt", 2.748893571891069, !0],
      [18, 13, 3, 1, "halt", 1.9634954084936207, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, 74, 2, 2, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 3, 2, 2, 2, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 4, 2, 2, 2, 68, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 79, 1, 74, 2, 2, 72, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 94],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 94],
        [18, 5, "qCompare", "free", 0, 5.497787143782138, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 0.7853981633974483, 0, 4, -1],
        [4, 9, "qControl", "free", 2, 1.5707963267948966, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 2.356194490192345, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [1, 4, "qCreate", "free", 0, 0, 0, 0, -1],
        [4, 5, "qControl", "free", 2, 0.7853981633974483, 0, 0, -1],
        [1, 9, "qCreate", "free", 0, 0, 0, 0, -1],
        [4, 4, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [4, 4, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [0, 0, "qCreate", "free", 1, 0, 0, 4, 94],
        [0, 13, "qCreate", "free", 3, 1, 0, 4, 94],
      ]);
  } else if ("quantChallengeC" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", -2.748893571891069, !1],
      [0, 8, 3, 2, "move", -2.356194490192345, !1],
      [5, 13, 0, 1, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 1.5707963267948966, !1],
      [0, 9, 3, 1, "move", -1.5707963267948966, !1],
      [4, 13, 0, 2, "move", -1.178097245096172, !1],
      [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
      [0, 3, 1, 3, "move", 1.9634954084936207, !1],
      [0, 10, 3, 1, "move", -0.3926990816987246, !1],
      [3, 13, 0, 2, "move", 3.141592653589793, !1],
      [18, 3, 1, 3, "halt", 1.9634954084936207, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", -1.9634954084936211, !1],
      [2, 13, 0, 2, "move", -0.3926990816987246, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 0.3926990816987241, !1],
      [0, 12, 3, 1, "move", -2.748893571891069, !1],
      [1, 13, 0, 2, "move", -2.356194490192345, !1],
      [18, 1, 1, 3, "halt", 0.3926990816987241, !0],
      [0, 0, 1, 3, "move", -2.748893571891069, !1],
      [0, 13, 3, 1, "move", 3.141592653589793, !1],
      [18, 0, 1, 3, "halt", -2.748893571891069, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, 3, 70, 2, 68, 2, 62, 2, 62, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 4, 62, 2, 70, 2, 72, 2, 68, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 4, 6, 4, 2, 68, 2, 62, 2, 72, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 3, 2, 2, 5, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 77, 74, 2, 2, 2, 6, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 44],
        [1, 13, "qCreate", "free", 0, 2, 0, 1, 45],
        [9, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [9, 7, "qCombine", "free", 0, 0, 0, 1, -1],
        [9, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 6, "qControl", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 7, "qControl", "free", 0, 0, 0, 0, -1],
        [6, 7, "qControl", "free", 2, -1.5707963267948966, 0, 0, -1],
        [8, 8, "qControl", "free", 2, -2.356194490192345, 0, 0, -1],
        [4, 6, "qFlip", "free", 0, 0, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [6, 8, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 7, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 7, "rotate", "free", 0, 0.7853981633974483, 1, 0, -1],
        [8, 6, "rotate", "free", 0, 5.497787143782138, 0, 0, -1],
        [6, 6, "rotate", "free", 0, 3.9269908169872414, 0, 0, -1],
        [6, 6, "rotate", "free", 0, 0.7853981633974483, 1, 0, -1],
        [8, 7, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [8, 7, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [18, 5, "qCompare", "free", 0, -2.748893571891069, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
      ]);
  } else if ("quantChallengeD" === e) {
    a = !0;
    s = [
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 2, 1, 3, "halt", 0, 0, !0],
    ];
    var h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    var d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    var u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    var c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 85, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [17, 13, "qCreate", "free", 2, 0, 0, 0, 196],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -2],
        [1, 13, "upgrade", "free", 0, 0.39269908169872414, 0, 2, -1],
        [0, 13, "cCreate", "free", 0, 0, 0, 1, 196],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 196],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("quantChallengeE" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 3.141592653589793, !1],
      [0, 8, 3, 2, "move", 2.356194490192345, !1],
      [0, 4, 1, 3, "move", -2.748893571891069, !1],
      [0, 9, 3, 1, "move", 1.9634954084936207, !1],
      [18, 4, 1, 3, "halt", 1.9634954084936207, !0],
      [18, 9, 3, 1, "halt", -2.748893571891069, !0],
      [0, 3, 1, 3, "move", -0.7853981633974484, !1],
      [0, 10, 3, 1, "move", 2.748893571891069, !1],
      [18, 3, 1, 3, "halt", 2.748893571891069, !0],
      [18, 10, 3, 1, "halt", -0.7853981633974484, !0],
      [0, 2, 1, 3, "move", -1.178097245096172, !1],
      [0, 11, 3, 1, "move", 1.1780972450961724, !1],
      [18, 2, 1, 3, "halt", 1.1780972450961724, !0],
      [18, 11, 3, 1, "halt", -1.178097245096172, !0],
      [0, 1, 1, 3, "move", 2.356194490192345, !1],
      [0, 12, 3, 1, "move", 3.141592653589793, !1],
      [18, 1, 1, 3, "halt", 3.141592653589793, !0],
      [18, 12, 3, 1, "halt", 2.356194490192345, !0],
      [0, 0, 1, 3, "move", 1.1780972450961724, !1],
      [0, 13, 3, 1, "move", 0.3926990816987241, !1],
      [18, 0, 1, 3, "halt", 0.3926990816987241, !0],
      [18, 13, 3, 1, "halt", 1.1780972450961724, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 4, 78, -1, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 64, 6, -1, -1, 4, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 64, 5, -1, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 3, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 44],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 44],
        [18, 13, "qCreate", "free", 3, 0, 0, 2, 44],
        [18, 5, "qCompare", "free", 0, 2.356194490192345, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 3.141592653589793, 0, 4, -1],
        [2, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 7, "qCombine", "free", 0, 0, 0, 1, -1],
        [16, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [16, 7, "qCombine", "free", 0, 0, 0, 1, -1],
      ]);
  } else if ("quantChallengeF" === e) {
    a = !0;
    (n = [
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, 47, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, 67, -1, -1, -1,
      -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    ]),
      (l = [
        [18, 5, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [18, 8, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [0, 13, "qCreate", "free", 3, 0, 0, 0, -1],
        [5, 4, "qCombine", "free", 1, 0, 0, 1, -1],
        [5, 9, "qCombine", "free", 3, 0, 0, 1, -1],
        [10, 4, "cCombine", "free", 3, 0, 0, 1, -1],
        [10, 9, "cCombine", "free", 1, 0, 0, 1, -1],
      ]);
  } else if ("quantChallengeG" === e) {
    a = !0;
    (s = [
      [0, 8, 3, 2, "move", 0, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [0, 13, 3, 1, "move", 0, 0, !1],
    ]),
      (o = [
        [0, 5, 1, 2, "move", 0, !1],
        [0, 4, 1, 3, "move", 0, !1],
        [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 3, 1, 3, "move", 0, !1],
        [18, 3, 1, 3, "halt", 3.141592653589793, !0],
        [0, 2, 1, 3, "move", 0, !1],
        [18, 2, 1, 3, "halt", 3.141592653589793, !0],
        [0, 1, 1, 3, "move", 0, !1],
        [18, 1, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 0, 1, 3, "move", 0, !1],
        [18, 0, 1, 3, "halt", 3.141592653589793, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 2, 2, 2, 2, 2, 70, 2, 2, 2, 2, 2, 70, 2, 2, 2, 2,
        2, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 0, 44],
        [18, 5, "qCompare", "free", 0, 3.141592653589793, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
        [6, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [12, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [0, 13, "cCreate", "free", 3, 0, 0, 1, 44],
      ]);
  } else if ("quantErrorB" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    var I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    var E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (o = [
        [0, 5, 1, 2, "move", (1 * Math.PI) / 8, !1],
        [0, 4, 1, 3, "move", (5 * Math.PI) / 8, !1],
        [18, 4, 1, 3, "halt", (5 * Math.PI) / 8, !0],
        [0, 3, 1, 3, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 2, 1, 3, "move", -1.9634954084936214, !1],
        [18, 2, 1, 3, "halt", -1.9634954084936214, !0],
        [0, 1, 1, 3, "move", 1.1780972450961724, !1],
        [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 5, "qCompare", "free", 0, 3.534291735289, 0, 2, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.570796326795, 0, 0, -2],
        [7, 12, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 11, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 10, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 9, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 8, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 7, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 6, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 5, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 3, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 4, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 2, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 1, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
      ]);
  } else if ("quantErrorA" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", -0.7853981633974484, !1],
      [18, 4, 1, 3, "halt", -2.748893571891069, !0],
      [0, 4, 1, 3, "move", -2.748893571891069, !1],
      [18, 3, 1, 3, "halt", 0.7853981633974484, !0],
      [0, 3, 1, 3, "move", 0.7853981633974484, !1],
      [18, 2, 1, 3, "halt", 0, !0],
      [0, 2, 1, 3, "move", 0, !1],
      [18, 1, 1, 3, "halt", -1.178097245096172, !0],
      [0, 1, 1, 3, "move", -1.178097245096172, !1],
      [18, 0, 1, 3, "halt", 1.9634954084936207, !0],
      [0, 0, 1, 3, "move", 1.9634954084936207, !1],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 3, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [4, 1, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 2, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 3, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 4, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 5, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 6, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 7, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 8, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 9, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 10, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 11, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 12, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 12, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 10, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 8, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 9, "rotate", "free", 0, 0, 0, 1, -1],
        [18, 5, "qCompare", "free", 0, 1.5707963267948966, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 94],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
      ]);
  } else if ("adderB" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 3.141592653589793, !1],
      [0, 8, 3, 2, "move", 3.141592653589793, !1],
      [5, 13, 0, 1, "move", 0, !1],
      [0, 4, 1, 3, "move", 3.141592653589793, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [4, 13, 0, 2, "move", 0, !1],
      [18, 4, 1, 3, "halt", 3.141592653589793, !0],
      [18, 9, 3, 1, "halt", 0, !0],
      [14, 13, 2, 0, "halt", Math.PI, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [3, 13, 0, 2, "move", 0, !1],
      [18, 3, 1, 3, "halt", 3.141592653589793, !0],
      [18, 10, 3, 1, "halt", 0, !0],
      [15, 13, 2, 0, "halt", Math.PI, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [2, 13, 0, 2, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [18, 11, 3, 1, "halt", 0, !0],
      [16, 13, 2, 0, "halt", Math.PI, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 3.141592653589793, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [18, 12, 3, 1, "halt", 3.141592653589793, !0],
      [17, 13, 2, 0, "halt", Math.PI, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, 74, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 78, 2, 2, 2, 76, 77,
      ]),
      (l = [
        [13, 13, "qCompare", "free", 0, 0, 0, 3, -1],
        [18, 5, "qCompare", "free", 0, 3.141592653589793, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 3.141592653589793, 0, 4, -1],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 95],
        [2, 13, "qCreate", "free", 0, 0, 0, 0, 96],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 95],
        [17, 13, "qCreate", "free", 2, 2, 0, 2, 95],
      ]);
  } else if ("adderC" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 3.141592653589793, !1],
      [0, 8, 3, 2, "move", 3.141592653589793, !1],
      [5, 13, 0, 1, "move", 0, !1],
      [0, 4, 1, 3, "move", 3.141592653589793, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [4, 13, 0, 2, "move", 0, !1],
      [18, 4, 1, 3, "halt", 3.141592653589793, !0],
      [18, 9, 3, 1, "halt", 0, !0],
      [14, 13, 2, 0, "halt", 0, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [3, 13, 0, 2, "move", 0, !1],
      [18, 3, 1, 3, "halt", 3.141592653589793, !0],
      [18, 10, 3, 1, "halt", 0, !0],
      [15, 13, 2, 0, "halt", 0, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [2, 13, 0, 2, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [18, 11, 3, 1, "halt", 0, !0],
      [16, 13, 2, 0, "halt", 0, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 3.141592653589793, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [18, 12, 3, 1, "halt", 3.141592653589793, !0],
      [17, 13, 2, 0, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, 74, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 78, 2, 2, 2, 76, 77,
      ]),
      (l = [
        [13, 13, "qCompare", "free", 0, 3.141592653589793, 0, 3, -1],
        [18, 5, "qCompare", "free", 0, 3.141592653589793, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 3.141592653589793, 0, 4, -1],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 95],
        [2, 13, "qCreate", "free", 0, 0, 0, 0, 96],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 95],
        [17, 13, "qCreate", "free", 2, 2, 0, 2, 95],
      ]);
  } else if ("measure" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 8, 3, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [0, 3, 1, 3, "move", 0, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [0, 2, 1, 3, "move", 0, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [0, 1, 1, 3, "move", 1.5707963267948966, !1],
      [0, 12, 3, 1, "move", 1.5707963267948966, !1],
      [0, 0, 1, 3, "move", 1.5707963267948966, !1],
      [0, 13, 3, 1, "move", 1.5707963267948966, !1],
    ]),
      (s = [
        [18, 5, 1, -1, "freeze", 1, 0, !0],
        [18, 4, 1, 3, "halt", 0, 0, !0],
        [18, 3, 1, 3, "halt", 0, 0, !0],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [18, 1, 1, 3, "halt", 1, 0, !0],
        [18, 0, 1, 3, "halt", 1, 0, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 294],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 294],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 294],
      ]);
  } else if ("measureB" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 3, 1, 3, "move", 0, !1],
      [0, 2, 1, 3, "move", 0, !1],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 0, 2, 3, "move", 0, !1],
      [1, 0, 2, 0, "move", 0, !1],
      [2, 0, 2, 0, "move", 0, !1],
      [3, 0, 2, 0, "move", 1.5707963267948966, !1],
      [4, 0, 2, 0, "move", 1.5707963267948966, !1],
      [5, 0, 2, 0, "move", 1.5707963267948966, !1],
      [6, 0, 2, 0, "move", 1.5707963267948966, !1],
      [7, 0, 2, 0, "move", 0, !1],
      [8, 0, 2, 0, "move", 0, !1],
      [9, 0, 2, 0, "move", 0, !1],
      [10, 0, 2, 0, "move", 0, !1],
      [11, 0, 2, 0, "move", 0, !1],
      [12, 0, 2, 0, "move", 0, !1],
      [13, 0, 2, 0, "move", 0, !1],
      [14, 0, 2, 0, "move", 0, !1],
    ]),
      (s = [
        [18, 5, 1, -1, "freeze", 0, 0, !0],
        [18, 4, 1, 3, "halt", 0, 0, !0],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [18, 1, 1, 3, "halt", 0, 0, !0],
      ]),
      (n = [
        4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 76, 55, 1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [17, 0, "qCreate", "free", 2, 0, 0, 1, 1580],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 395],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("preDenseB" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [13, 13, 2, 1, "move", 0, 0, !1],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [14, 13, 2, 0, "move", 1, 0, !1],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [15, 13, 2, 0, "move", 1, 0, !1],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [0, 11, 3, 1, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [16, 13, 2, 0, "move", 0, 0, !1],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [17, 13, 2, 0, "move", 0, 0, !1],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
      [18, 13, 2, 0, "move", 0, 0, !1],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 22, 22, 22, 56,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 394],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 394],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 3, 0, 2, 394],
        [9, 6, "qCombine", "free", 0, 0, 0, 2, 400],
        [18, 13, "cCreate", "free", 2, 2, 0, 1, 394],
      ]);
  } else if ("simpleDistill" === e) {
    a = !0;
    h = new Entangled(3);
    h.setQubits([
      new Qubit(4, 11, 0, 2, "halt", 0),
      new Qubit(4, 10, 0, 2, "halt", 0),
      new Qubit(4, 9, 0, 2, "halt", 0),
    ]);
    r = [h];
    s = [];
    (n = [
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, 75, 75, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 95, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 73, 63, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 73, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 95, -1, 73, 63, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 3, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 3, 2, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1,
    ]),
      (l = [
        [18, 5, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [18, 8, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [1, 7, "qControl", "free", 3, 1.570796326795, 0, 0, -1],
        [4, 9, "qCombine", "free", 0, 0, 0, 1, -1],
        [4, 10, "qCombine", "free", 0, 0, 0, 1, -1],
        [4, 11, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 8, "qControl", "free", 3, 0, 0, 0, -1],
        [3, 8, "rotate", "free", 1, 4.712388980385, 0, 0, -1],
        [3, 8, "rotate", "free", 1, 0.785398163397, 1, 0, -1],
        [1, 9, "qControl", "free", 3, 1.570796326795, 0, 0, -1],
        [2, 7, "rotate", "free", 1, 3.14159265359, 0, 0, -1],
        [2, 7, "rotate", "free", 1, 0.785398163397, 1, 0, -1],
        [2, 9, "rotate", "free", 1, 1.570796326795, 0, 0, -1],
        [2, 9, "rotate", "free", 1, 0.785398163397, 1, 0, -1],
        [3, 2, "qCreate", "free", 1, 0, 0, 5, -1],
        [2, 2, "qCreate", "free", 1, 0, 0, 5, -1],
        [1, 2, "qCreate", "free", 1, 0, 0, 5, -1],
      ]);
  } else if ("dense" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (s = [
        [0, 5, 1, 2, "move", 1, 0, !1],
        [0, 8, 3, 2, "move", 0, 0, !1],
        [18, 5, 1, -1, "freeze", 1, 0, !0],
        [18, 8, 3, -1, "freeze", 0, 0, !0],
        [0, 4, 1, 3, "move", 1, 0, !1],
        [0, 9, 3, 1, "move", 0, 0, !1],
        [18, 4, 1, 3, "halt", 1, 0, !0],
        [18, 9, 3, 1, "halt", 0, 0, !0],
        [0, 3, 1, 3, "move", 1, 0, !1],
        [0, 10, 3, 1, "move", 1, 0, !1],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [18, 10, 3, 1, "halt", 1, 0, !0],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 11, 3, 1, "move", 1, 0, !1],
        [18, 2, 1, 3, "halt", 1, 0, !0],
        [18, 11, 3, 1, "halt", 1, 0, !0],
        [0, 1, 1, 3, "move", 0, 0, !1],
        [0, 12, 3, 1, "move", 0, 0, !1],
        [18, 1, 1, 3, "halt", 0, 0, !0],
        [18, 12, 3, 1, "halt", 0, 0, !0],
        [0, 0, 1, 3, "move", 0, 0, !1],
        [0, 13, 3, 1, "move", 0, 0, !1],
        [18, 0, 1, 3, "halt", 0, 0, !0],
        [18, 13, 3, 1, "halt", 0, 0, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, 74, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, 57,
      ]),
      (l = [
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -2],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [9, 6, "qCombine", "free", 0, 0, 0, 2, 100],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 94],
      ]);
  } else if ("teleport" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (o = [
        [0, 5, 1, 2, "move", (1 * Math.PI) / 8, !1],
        [0, 4, 1, 3, "move", (5 * Math.PI) / 8, !1],
        [18, 4, 1, 3, "halt", (5 * Math.PI) / 8, !0],
        [0, 3, 1, 3, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 2, 1, 3, "move", -1.9634954084936214, !1],
        [18, 2, 1, 3, "halt", -1.9634954084936214, !0],
        [0, 1, 1, 3, "move", 1.1780972450961724, !1],
        [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 2, 2, -1,
      ]),
      (l = [
        [9, 7, "cCombine", "free", 0, 0, 0, 1, -2],
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -2],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 5, "qCompare", "free", 0, (1 * Math.PI) / 8, 0, 2, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, Math.PI / 2, 0, 0, -2],
      ]);
  } else if ("distill" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (o = [
        [0, 5, 1, 2, "move", (1 * Math.PI) / 8, !1],
        [0, 4, 1, 3, "move", (5 * Math.PI) / 8, !1],
        [18, 4, 1, 3, "halt", (5 * Math.PI) / 8, !0],
        [0, 3, 1, 3, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 2, 1, 3, "move", -1.9634954084936214, !1],
        [18, 2, 1, 3, "halt", -1.9634954084936214, !0],
        [0, 1, 1, 3, "move", 1.1780972450961724, !1],
        [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 85, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 15],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 15],
        [18, 5, "qCompare", "free", 0, 0.39269908169872414, 0, 2, -2],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -2],
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -2],
        [9, 7, "cCombine", "free", 0, 0, 0, 1, -2],
        [1, 13, "upgrade", "free", 0, 0.39269908169872414, 0, 1, -1],
        [0, 13, "cCreate", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("vaziraniQuantum" === e) {
    a = !0;
    (s = [
      [18, 4, 1, -1, "halt", 0, 0, !0],
      [18, 3, 1, -1, "halt", 0, 0, !0],
      [18, 2, 1, -1, "move", 0, 0, !0],
    ]),
      (o = []),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, 64, 2, 2, 2, 2, 2, 2, 5, -1, 4, 64, -1, -1, -1,
        21, -1, -1, -1, -1, 64, 2, 2, 2, 5, -1, 4, 11, 2, 11, 64, -1, -1, -1,
        21, -1, -1, -1, -1, 64, 5, -1, 4, 11, 2, 11, 11, 2, 11, 64, -1, -1, -1,
        21, -1, -1, -1, -1, -1, 3, 70, 6, 3, 70, 6, 3, 70, 6, -1, -1, -1, -1,
        91, -1, -1, -1, -1, -1, 64, 68, 2, 2, 68, 2, 2, 68, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [4, 4, "qCombine", "free", 0, 0, 0, 2, 1],
        [4, 3, "qCombine", "free", 0, 0, 0, 2, 1],
        [4, 2, "qCombine", "free", 0, 0, 0, 2, 1],
        [5, 6, "qCombine", "free", 0, 0, 0, 2, 1],
        [13, 6, "qCombine", "free", 0, 0, 0, 2, 1],
        [14, 4, "qCombine", "free", 0, 0, 0, 2, 1],
        [14, 3, "qCombine", "free", 0, 0, 0, 2, 1],
        [14, 2, "qCombine", "free", 0, 0, 0, 2, 1],
        [6, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [9, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [12, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [6, 6, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [6, 6, "qFlip", "free", 0, 1.5707963267948966, 1, 0, -1],
        [9, 6, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [9, 6, "qFlip", "free", 0, 1.5707963267948966, 1, 0, -1],
        [12, 6, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [12, 6, "qFlip", "free", 0, 1.5707963267948966, 1, 0, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 0, -1],
      ]);
  } else if ("quantumAdv1" === e) {
    a = !0;
    s = [[18, 5, 1, -1, "freeze", 0, 0, !0]];
    for (
      var S = [
          [0, 5],
          [0, 4],
          [0, 3],
          [0, 2],
          [0, 1],
          [0, 0],
          [1, 0],
          [2, 0],
          [3, 0],
          [4, 0],
        ],
        f = [2, 3, 3, 3, 3, 3, 0, 0, 0, 0],
        p = [
          [0, 8],
          [0, 9],
          [0, 10],
          [0, 11],
          [0, 12],
          [0, 13],
          [1, 13],
          [2, 13],
          [3, 13],
          [4, 13],
        ],
        T = [2, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        R = ((r = []), 0);
      R < 10;
      R++
    ) {
      var m = new Entangled(2);
      m.setQubits([
        new Qubit(S[R][0], S[R][1], 0, f[R], "halt", 0),
        new Qubit(p[R][0], p[R][1], 0, T[R], "halt", 0),
      ]),
        r.push(m);
    }
    (n = [
      4, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 3,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 3, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1,
    ]),
      (l = [
        [6, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [6, 10, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("quantumAdv2" === e) {
    a = !0;
    for (
      s = [[18, 5, 1, -1, "freeze", 0, 0, !0]],
        S = [
          [0, 5],
          [0, 4],
          [0, 3],
          [0, 2],
          [0, 1],
          [0, 0],
          [1, 0],
          [2, 0],
          [3, 0],
          [4, 0],
          [5, 0],
        ],
        f = [2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0],
        p = [
          [0, 8],
          [0, 9],
          [0, 10],
          [0, 11],
          [0, 12],
          [0, 13],
          [1, 13],
          [2, 13],
          [3, 13],
          [4, 13],
          [5, 13],
        ],
        T = [2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        r = [],
        R = 0;
      R < 11;
      R++
    ) {
      m = new Entangled(2);
      m.setQubits([
        new Qubit(S[R][0], S[R][1], 0, f[R], "halt", 0),
        new Qubit(p[R][0], p[R][1], 0, T[R], "halt", 0),
      ]),
        r.push(m);
    }
    (n = [
      4, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 3,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 3, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1,
    ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [6, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [6, 10, "cCombine", "free", 0, 0, 0, 1, -1],
        [1, 10, "rotate", "free", 1, 0.7853981633974483, 1, 0, -1],
      ]);
  } else if ("quantumAdv3" === e) {
    a = !0;
    for (
      s = [[18, 5, 1, -1, "freeze", 0, 0, !0]],
        S = [
          [0, 5],
          [0, 4],
          [0, 3],
          [0, 2],
          [0, 1],
          [0, 0],
          [1, 0],
          [2, 0],
          [3, 0],
          [4, 0],
          [5, 0],
          [6, 0],
        ],
        f = [2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
        p = [
          [0, 8],
          [0, 9],
          [0, 10],
          [0, 11],
          [0, 12],
          [0, 13],
          [1, 13],
          [2, 13],
          [3, 13],
          [4, 13],
          [5, 13],
          [6, 13],
        ],
        T = [2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        r = [],
        R = 0;
      R < 12;
      R++
    ) {
      m = new Entangled(2);
      m.setQubits([
        new Qubit(S[R][0], S[R][1], 0, f[R], "halt", 0),
        new Qubit(p[R][0], p[R][1], 0, T[R], "halt", 0),
      ]),
        r.push(m);
    }
    (n = [
      4, 2, 2, 2, 2, 2, 2, 10, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, 29, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 3,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 4, 5, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 3, 2, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1,
    ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [1, 10, "rotate", "free", 1, 0.7853981633974483, 1, 0, -1],
      ]);
  } else if ("entChallengeA" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24,
        22, 25, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64,
        60, 84, 23, 52, 22, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        84, 42, 25, 24, 42, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 54, 40, 26, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 64, 60, 84, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 23, 22, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [17, 6, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [16, 6, "switch", "free", 2, 1, 0, 1, -1],
        [16, 5, "cInvert", "free", 0, 1, 0, 0, -1],
        [16, 5, "cInvert", "free", 0, 0, 1, 0, -1],
        [14, 5, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [14, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [13, 6, "switch", "free", 2, 0, 0, 1, -1],
        [13, 7, "switch", "free", 0, 0, 0, 1, -1],
        [13, 5, "measure", "free", 0, 0, 0, 0, -1],
        [13, 5, "measure", "free", 0, 1.57079632679, 1, 0, -1],
        [13, 8, "measure", "free", 0, 0, 0, 0, -1],
        [13, 8, "measure", "free", 0, 1.57079632679, 1, 0, -1],
        [12, 6, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [12, 7, "cCreate", "free", 0, 2, 0, 0, -1],
        [12, 5, "qCombine", "free", 0, 0, 0, 1, -1],
        [12, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 94],
      ]);
  } else if ("entChallengeB" === e) {
    a = !0;
    (s = [[18, 5, 1, -1, "freeze", 0, 0, !0]]), (h = new Entangled(4));
    h.setQubits([
      new Qubit(2, 4, 0, 2, "halt", 0),
      new Qubit(2, 5, 0, 2, "halt", 0),
      new Qubit(2, 8, 0, 2, "halt", 0),
      new Qubit(2, 9, 0, 2, "halt", 0),
    ]);
    d = new Entangled(4);
    d.setQubits([
      new Qubit(1, 4, 0, 2, "halt", 0),
      new Qubit(1, 5, 0, 2, "halt", 0),
      new Qubit(1, 8, 0, 2, "halt", 0),
      new Qubit(1, 9, 0, 2, "halt", 0),
    ]);
    u = new Entangled(4);
    u.setQubits([
      new Qubit(1, 3, 0, 3, "halt", 0),
      new Qubit(0, 5, 0, 2, "halt", 0),
      new Qubit(0, 8, 0, 2, "halt", 0),
      new Qubit(1, 10, 0, 1, "halt", 0),
    ]);
    c = new Entangled(4);
    c.setQubits([
      new Qubit(1, 2, 0, 3, "halt", 0),
      new Qubit(0, 4, 0, 3, "halt", 0),
      new Qubit(0, 9, 0, 1, "halt", 0),
      new Qubit(1, 11, 0, 1, "halt", 0),
    ]);
    I = new Entangled(4);
    I.setQubits([
      new Qubit(1, 1, 0, 3, "halt", 0),
      new Qubit(0, 3, 0, 3, "halt", 0),
      new Qubit(0, 10, 0, 1, "halt", 0),
      new Qubit(1, 12, 0, 1, "halt", 0),
    ]);
    E = new Entangled(4);
    E.setQubits([
      new Qubit(2, 1, 0, 0, "halt", 0),
      new Qubit(0, 2, 0, 3, "halt", 0),
      new Qubit(0, 11, 0, 1, "halt", 0),
      new Qubit(2, 12, 0, 0, "halt", 0),
    ]);
    var g = new Entangled(4);
    g.setQubits([
      new Qubit(2, 2, 0, 1, "halt", 0),
      new Qubit(0, 1, 0, 3, "halt", 0),
      new Qubit(0, 12, 0, 1, "halt", 0),
      new Qubit(2, 11, 0, 3, "halt", 0),
    ]);
    var A = new Entangled(4);
    A.setQubits([
      new Qubit(2, 3, 0, 1, "halt", 0),
      new Qubit(0, 0, 0, 3, "halt", 0),
      new Qubit(0, 13, 0, 1, "halt", 0),
      new Qubit(2, 10, 0, 3, "halt", 0),
    ]);
    (r = [h, d, u, c, I, E, g, A]),
      (n = [
        9, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29,
        1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 4, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 4, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [2, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 5, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 9, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 4, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("entChallengeC" === e) {
    a = !0;
    (s = [[18, 5, 1, -1, "freeze", 0, 0, !0]]), (h = new Entangled(4));
    h.setQubits([
      new Qubit(2, 4, 0, 2, "halt", 0),
      new Qubit(2, 5, 0, 2, "halt", 0),
      new Qubit(2, 8, 0, 2, "halt", 0),
      new Qubit(2, 9, 0, 2, "halt", 0),
    ]);
    d = new Entangled(4);
    d.setQubits([
      new Qubit(1, 4, 0, 2, "halt", 0),
      new Qubit(1, 5, 0, 2, "halt", 0),
      new Qubit(1, 8, 0, 2, "halt", 0),
      new Qubit(1, 9, 0, 2, "halt", 0),
    ]);
    u = new Entangled(4);
    u.setQubits([
      new Qubit(1, 3, 0, 3, "halt", 0),
      new Qubit(0, 5, 0, 2, "halt", 0),
      new Qubit(0, 8, 0, 2, "halt", 0),
      new Qubit(1, 10, 0, 1, "halt", 0),
    ]);
    c = new Entangled(4);
    c.setQubits([
      new Qubit(1, 2, 0, 3, "halt", 0),
      new Qubit(0, 4, 0, 3, "halt", 0),
      new Qubit(0, 9, 0, 1, "halt", 0),
      new Qubit(1, 11, 0, 1, "halt", 0),
    ]);
    I = new Entangled(4);
    I.setQubits([
      new Qubit(1, 1, 0, 3, "halt", 0),
      new Qubit(0, 3, 0, 3, "halt", 0),
      new Qubit(0, 10, 0, 1, "halt", 0),
      new Qubit(1, 12, 0, 1, "halt", 0),
    ]);
    E = new Entangled(4);
    E.setQubits([
      new Qubit(2, 1, 0, 0, "halt", 0),
      new Qubit(0, 2, 0, 3, "halt", 0),
      new Qubit(0, 11, 0, 1, "halt", 0),
      new Qubit(2, 12, 0, 0, "halt", 0),
    ]);
    g = new Entangled(4);
    g.setQubits([
      new Qubit(2, 2, 0, 1, "halt", 0),
      new Qubit(0, 1, 0, 3, "halt", 0),
      new Qubit(0, 12, 0, 1, "halt", 0),
      new Qubit(2, 11, 0, 3, "halt", 0),
    ]);
    A = new Entangled(4);
    A.setQubits([
      new Qubit(2, 3, 0, 1, "halt", 0),
      new Qubit(0, 0, 0, 3, "halt", 0),
      new Qubit(0, 13, 0, 1, "halt", 0),
      new Qubit(2, 10, 0, 3, "halt", 0),
    ]);
    (r = [h, d, u, c, I, E, g, A]),
      (n = [
        9, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29,
        1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 4, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 4, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [2, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 5, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 9, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 4, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("extraA" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", -1.5707963267948966, !1],
      [18, 4, 1, 3, "halt", -1.5707963267948966, !0],
      [18, 9, 3, 1, "halt", -1.5707963267948966, !0],
      [0, 4, 1, 3, "move", -1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [18, 10, 3, 1, "halt", -1.5707963267948966, !0],
      [0, 3, 1, 3, "move", -1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", -1.5707963267948966, !0],
      [18, 11, 3, 1, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", -1.5707963267948966, !1],
      [18, 1, 1, 3, "halt", 3.141592653589793, !0],
      [18, 12, 3, 1, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 3.141592653589793, !1],
      [18, 0, 0, 3, "halt", 3.141592653589793, !0],
      [18, 13, 0, 1, "halt", 3.141592653589793, !0],
      [0, 0, 2, 3, "move", 3.141592653589793, !1],
      [17, 0, 0, 2, "halt", 3.141592653589793, !0],
      [17, 13, 0, 2, "halt", 3.141592653589793, !0],
      [1, 0, 2, 0, "move", 3.141592653589793, !1],
      [16, 0, 0, 2, "halt", 3.141592653589793, !0],
      [16, 13, 0, 2, "halt", 3.141592653589793, !0],
      [2, 0, 2, 0, "move", 3.141592653589793, !1],
    ]),
      (s = []),
      (n = [
        4, 2, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 2, 5,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 2, 6,
      ]),
      (l = [
        [18, 5, "qCompare", "free", 0, -1.570796326795, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, -1.570796326795, 0, 4, -1],
        [16, 0, "qCreate", "free", 0, 0, 0, 2, 492],
        [16, 13, "qCreate", "free", 0, 0, 0, 2, 492],
        [2, 0, "qCreate", "free", 2, 0, 0, 1, 492],
      ]);
  } else if ("extraB" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1,
        -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 85, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [0, 5, "qDubCompare", "free", 0, 2, 0, 1, -1],
        [18, 5, "qDubCompare", "free", 0, 0, 0, 1, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, 496],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.570796326795, 0, 0, -2],
        [1, 13, "upgrade", "free", 0, 0.39269908169, 0, 1, -1],
        [0, 13, "cCreate", "free", 0, 0, 0, 0, 496],
        [9, 12, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 11, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 10, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 9, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 8, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 7, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 5, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 4, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 3, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 2, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 1, "cInvert", "free", 0, 1, 0, 0, -1],
      ]);
  } else if ("extraC" === e) {
    a = !0;
    (o = []),
      (s = [
        [18, 5, 1, 4, "move", 0, 0, !0],
        [0, 5, 1, 2, "move", 0, 0, !1],
        [0, 8, 3, 2, "move", 1, 0, !1],
        [18, 4, 1, 3, "halt", 1, 0, !0],
        [0, 4, 1, 3, "move", 1, 0, !1],
        [0, 9, 3, 1, "move", 1, 0, !1],
        [18, 3, 1, 3, "halt", 0, 0, !0],
        [0, 3, 1, 3, "move", 1, 0, !1],
        [0, 10, 3, 1, "move", 1, 0, !1],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 11, 3, 1, "move", 0, 0, !1],
        [18, 1, 1, 3, "halt", 0, 0, !0],
        [18, 0, 0, 3, "halt", 1, 0, !0],
        [17, 0, 0, 2, "halt", 1, 0, !0],
        [16, 0, 0, 2, "halt", 0, 0, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 22, 22, 22, 22,
        25, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        [13, 0, "cCreate", "free", 0, 2, 0, 2, 0],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 0],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 0],
      ]);
  } else if ("binaryencode" === e) {
    a = !0;
    (o = []),
      (s = [
        [0, 5, 1, 2, "move", 0, 0, !1],
        [18, 5, 1, -1, "freeze", 0, 0, !0],
        [0, 4, 1, 3, "halt", 0, 0, !1],
        [18, 4, 1, 3, "halt", 2, 0, !0],
        [0, 3, 1, 3, "halt", 0, 0, !1],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [0, 2, 1, 3, "halt", 0, 0, !1],
        [18, 2, 1, 3, "halt", 3, 0, !0],
        [0, 1, 1, 3, "halt", 0, 0, !1],
        [0, 0, 1, 3, "halt", 0, 0, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 20],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, -1],
      ]);
  } else if ("adder" === e) {
    a = !0;
    (o = []),
      (s = [
        [18, 5, 1, 4, "move", 1, 0, !0],
        [0, 5, 1, 2, "move", 1, 0, !1],
        [0, 8, 3, 2, "move", 0, 0, !1],
        [18, 4, 1, 3, "halt", 1, 0, !0],
        [0, 4, 1, 3, "move", 0, 0, !1],
        [0, 9, 3, 1, "move", 1, 0, !1],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [0, 3, 1, 3, "move", 0, 0, !1],
        [0, 10, 3, 1, "move", 1, 0, !1],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 11, 3, 1, "move", 1, 0, !1],
        [18, 1, 1, 3, "halt", 1, 0, !0],
        [0, 1, 1, 3, "move", 0, 0, !1],
        [0, 12, 3, 1, "move", 0, 0, !1],
        [18, 0, 1, 3, "halt", 1, 0, !0],
        [0, 0, 1, 3, "move", 0, 0, !1],
        [0, 13, 3, 1, "move", 1, 0, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "transform", 0, 0.785398163397, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 58],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 58],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 58],
      ]);
  } else if ("extraD" === e) {
    a = !0;
    (o = []),
      (s = [
        [18, 5, 1, 4, "move", 1, 0, !0],
        [0, 8, 3, 2, "move", 1, 0, !1],
        [0, 5, 1, 2, "move", 0, 0, !1],
        [0, 9, 3, 1, "move", 1, 0, !1],
        [0, 4, 1, 3, "move", 0, 0, !1],
        [0, 10, 3, 1, "move", 0, 0, !1],
        [0, 3, 1, 3, "move", 0, 0, !1],
        [0, 11, 3, 1, "move", 0, 0, !1],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 12, 3, 1, "move", 1, 0, !1],
        [0, 1, 1, 3, "move", 0, 0, !1],
        [0, 13, 3, 1, "move", 1, 0, !1],
        [0, 0, 1, 3, "move", 1, 0, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "transform", 0, 0.785398163397, 0, 2, -1],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 9],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 100],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 0],
      ]);
  } else if ("chsh" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 91, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 53, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 53, 41, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 22, 22, 22, 26, 21, 23, 22, 22,
        22, 22, 25, -1, -1, -1, -1, -1, -1, 21, -1, 84, -1, -1, -1, 53, 84, -1,
        -1, 84, -1, 21, -1, -1, -1, -1, -1, -1, 47, 22, 61, -1, -1, -1, 53, 41,
        -1, -1, 61, 22, 47, -1, -1, -1, -1, -1, -1, 21, -1, 1, 84, -1, 24, 26,
        21, -1, 84, 1, -1, 21, -1, -1, -1, -1, -1, 84, 60, 2, 67, 41, -1, 21,
        -1, 21, -1, 43, 67, 2, 60, 84, -1, -1, -1, -1, -1, -1, -1, 1, 23, 22,
        51, -1, 51, 22, 26, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
        -1, 90, -1, 90, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        -1, -1, 57, -1, 57, -1, -1, 1, -1, -1, -1, -1, -1, -1, 74, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.570796326795, 0, 0, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [8, 12, "cCreate", "free", 3, 2, 0, 0, -1],
        [10, 12, "cCreate", "free", 3, 2, 0, 0, -1],
        [5, 6, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [3, 7, "cCombine", "free", 3, 0, 0, 0, -1],
        [5, 7, "measure", "free", 1, 0, 0, 0, -1],
        [2, 9, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [3, 9, "measure", "free", 0, 0, 0, 0, -1],
        [5, 9, "qCombine", "free", 3, 0, 0, 0, -1],
        [5, 9, "qCombine", "free", 2, 0, 1, 0, -1],
        [6, 9, "switch", "free", 1, 0, 0, 1, -1],
        [13, 6, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [13, 7, "measure", "free", 1, 0, 0, 0, -1],
        [15, 7, "cCombine", "free", 3, 0, 0, 0, -1],
        [12, 9, "switch", "free", 3, 0, 0, 1, -1],
        [13, 9, "qCombine", "free", 3, 0, 0, 0, -1],
        [13, 9, "qCombine", "free", 0, 0, 1, 0, -1],
        [15, 9, "measure", "free", 0, 0, 0, 0, -1],
        [16, 9, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [8, 11, "delay", "free", 1, 0, 0, 4, -1],
        [10, 11, "delay", "free", 1, 0, 0, 4, -1],
        [8, 10, "cSplit", "free", 3, 0, 0, 0, -1],
        [10, 10, "cSplit", "free", 3, 0, 0, 0, -1],
        [12, 8, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [6, 8, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [9, 7, "cInvert", "free", 1, 0, 0, 1, -1],
        [9, 7, "cInvert", "free", 1, 1, 1, 1, -1],
        [10, 7, "switch", "free", 1, 0, 0, 1, -1],
        [10, 6, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [10, 4, "switch", "free", 1, 1, 0, 1, -1],
        [8, 3, "switch", "free", 3, 1, 0, 1, -1],
        [10, 3, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [8, 2, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [9, 4, "cInvert", "free", 1, 1, 0, 0, -1],
        [9, 4, "cInvert", "free", 1, 0, 1, 0, -1],
        [9, 3, "cInvert", "free", 1, 1, 0, 0, -1],
        [9, 3, "cInvert", "free", 1, 0, 1, 0, -1],
        [9, 6, "cInvert", "free", 1, 0, 0, 0, -1],
        [10, 1, "cOneCompare", "free", 0, 0, 0, 0, 0],
      ]);
  } else if ("freeA" === e) {
    a = !0;
    (o = []),
      (s = []),
      (n = [
        4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 76, 55, 1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [17, 0, "qCreate", "free", 2, 0, 0, 1, 1580],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 395],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("freeB" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 2, 2, -1,
      ]),
      (l = [
        [0, 5, "qDubCompare", "free", 0, 2, 0, 1, -1],
        [18, 5, "qDubCompare", "free", 0, 0, 0, 1, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, Math.PI / 2, 0, 0, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
      ]);
  } else if ("freeC" === e) {
    a = !0;
    (s = []), (o = []), (n = new Array(266).fill(-1)), (l = []);
  }
  return (
    !!a && { tiles: n, allBits: s, allQubits: o, allGates: l, entGroups: r }
  );
}
function LevelRefresh(e, t) {
  if (["tut1", "tut3", "tut4"].indexOf(e) >= 0) {
    for (var i = 0; i < 6; i++) {
      var a = Math.round(Math.random());
      (t.getBit(18, 8 + i).value = 1 - a), (t.getBit(0, 5 - i).value = 1 - a);
    }
    for (i = 0; i < 5; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 9 + i).setPolarize(a), t.getQubit(18, 4 - i).setPolarize(a);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    return t.getQubit(0, 8).setPolarize(a), void (t.getGate(18, 5, 0).rot = a);
  }
  if ("tut2" === e) {
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      (t.getBit(18, 8 + i).value = a), (t.getBit(0, 5 - i).value = 1 - a);
    }
    for (i = 0; i < 5; i++) {
      a = Math.floor(16 * Math.random());
      t.getQubit(0, 9 + i).setPolarize((Math.PI * a) / 8),
        t.getQubit(18, 4 - i).setPolarize((Math.PI * (a - 4)) / 8);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    return (
      t.getQubit(0, 8).setPolarize((Math.PI * a) / 8),
      void (t.getGate(18, 5, 0).rot = (Math.PI * (a - 4)) / 8)
    );
  }
  if ("tut5" === e) {
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      t.getBit(0, 5 - i).value = 1 - a;
    }
    for (i = 0; i < 5; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 9 + i).setPolarize(a);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 8).setPolarize(a);
  } else if ("tut6" === e) {
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      t.getBit(0, 5 - i).value = a;
    }
    for (var r = 0; r < 6; r++) {
      var s = t.getBit(0, 5 - r).value;
      (t.getBit(18, 5 - r).value = s),
        (t.getBit(18, 5 - r).value = r % 4 == 3 ? 1 - s : s),
        r % 2 == 1 &&
          1 === t.getBit(18, 5 - r).value &&
          (t.getBit(18, 6 - r).value = 1 - t.getBit(18, 6 - r).value);
    }
  } else if ("class1" === e)
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      (t.getBit(18, 5 - i).value = 1), (t.getBit(0, 5 - i).value = a);
    }
  else if ("class2" === e) {
    for (a = [], i = 0; i < 6; i++)
      a.push(Math.round(Math.random())),
        (t.getBit(18, 5 - i).value = a[i]),
        (t.getBit(18, 8 + i).value = a[i]);
    (t.getBit(0, 5).value = a[0]),
      (t.getBit(0, 8).value = a[1]),
      (t.getBit(0, 1).value = a[2]),
      (t.getBit(0, 12).value = a[3]),
      (t.getBit(1, 0).value = a[4]),
      (t.getBit(1, 13).value = a[5]);
  } else if ("class3" === e) {
    for (a = [], i = 0; i < 6; i++) a.push(Math.round(Math.random()));
    var o = [0, 1, 0, 1, 0, 1].sort((e, t) => 0.5 - Math.random()),
      n = 0,
      l = 0;
    for (i = 0; i < 6; i++)
      (t.getBit(0, 5 - i).value = o[i]),
        (t.getBit(0, 8 + i).value = a[i]),
        0 === o[i]
          ? ((t.getBit(18, 5 - n).value = a[i]), (n += 1))
          : ((t.getBit(18, 8 + l).value = a[i]), (l += 1));
  } else if ("class4" === e) {
    for (a = [], i = 0; i < 6; i++)
      a.push(Math.round(Math.random())), (t.getBit(18, 5 - i).value = a[i]);
    (t.getBit(0, 4).value = a[0]),
      (t.getBit(0, 8).value = a[1]),
      (t.getBit(0, 2).value = a[2]),
      (t.getBit(0, 12).value = a[3]),
      (t.getBit(0, 0).value = a[4]),
      (t.getBit(1, 13).value = a[5]);
  } else if ("class5" === e) {
    for (a = [], o = [], i = 0; i < 6; i++)
      a.push(Math.round(Math.random())),
        o.push(Math.round(Math.random())),
        (t.getBit(18, 5 - i).value = a[i]),
        (t.getBit(0, 5 - i).value = a[i]),
        (t.getBit(0, 8 + i).value = o[i]);
    for (i = 0; i < 6; i++) SCENARIO.CINPUTS[2][6 + i] = o[i];
  } else if ("class7" === e) {
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      (t.getBit(18, 5 - i).value = a), (t.getBit(0, 5 - i).value = a);
    }
    a = Math.round(Math.random());
    (t.getBit(17, 0).value = a), (t.getBit(1, 0).value = a);
    a = Math.round(Math.random());
    (t.getBit(16, 0).value = a), (t.getBit(2, 0).value = a);
    for (i = 0; i < 6; i++) {
      o = Math.round(Math.random());
      (t.getBit(18, 8 + i).value = o), (t.getBit(3 + i, 0).value = o);
    }
  } else if ("classPuzzle1" === e)
    for (i = 0; i < 6; i++) {
      (a = Math.round(Math.random())), (o = Math.round(Math.random()));
      (t.getBit(18, 5 - i).value = a),
        (t.getBit(0, 5 - i).value = a),
        i % 2 == 0 &&
          ((t.getBit(18, 8 + i).value = o), (t.getBit(0, 8 + i).value = o));
    }
  else if ("classPuzzle2" === e)
    for (i = 0; i < 6; i++) {
      (a = Math.round(Math.random())), (o = Math.round(Math.random()));
      (t.getBit(0, 5 - i).value = a),
        (t.getBit(0, 8 + i).value = o),
        (t.getBit(18, 5 - i).value = (a + o) % 2),
        (t.getBit(18, 8 + i).value = o && a);
    }
  else if ("classPuzzle3" === e)
    for (i = 0; i < 6; i++) {
      (a = Math.round(Math.random())), (o = Math.round(Math.random()));
      (t.getBit(0, 5 - i).value = a),
        (t.getBit(0, 8 + i).value = o),
        (t.getBit(18, 8 + i).value = o && a);
    }
  else if ("classPuzzle3B" === e)
    for (i = 0; i < 6; i++) {
      (a = Math.round(Math.random())), (o = Math.round(Math.random()));
      (t.getBit(0, 5 - i).value = a),
        (t.getBit(0, 8 + i).value = o),
        (t.getBit(18, 8 + i).value = (o + a) % 2);
    }
  else if ("classPuzzle4" === e) {
    var h = 0;
    for (i = 0; i < 5; i++) {
      a = Math.round(Math.random());
      (t.getBit(0, 5 - i).value = a),
        (t.getBit(18, 5 - i).value = Math.abs(a - h)),
        (h = a);
    }
    (t.getBit(0, 0).value = 0), (t.getBit(18, 0).value = a);
  } else if ("classPuzzle5" === e) {
    for (a = [], i = 0; i < 6; i++)
      a.push(Math.round(Math.random())), (t.getBit(0, 5 - i).value = a[i]);
    (t.getBit(18, 5).value = a[0]),
      (t.getBit(18, 4).value = a[1]),
      (t.getBit(18, 3).value = a[3]),
      (t.getBit(18, 2).value = a[4]),
      (t.getBit(18, 8).value = a[2]),
      (t.getBit(18, 9).value = a[5]);
  } else if ("classPuzzle6" === e)
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      (t.getBit(0, 5 - i).value = a), (t.getBit(18, 5 - i).value = a);
    }
  else if ("classPuzzle7" === e)
    for (i = 0; i < 6; i++) {
      (a = Math.round(Math.random())), (o = Math.round(Math.random()));
      (t.getBit(0, 5 - i).value = a),
        (t.getBit(0, 8 + i).value = o),
        (t.getBit(18, 5 - i).value = o),
        (t.getBit(18, 8 + i).value = a);
    }
  else if ("classPuzzle8" === e) {
    for (var d = [], u = 0; u < 8; u++) d.push(Math.round(Math.random()));
    var c = [...d],
      I = Math.round(Math.random());
    if (0 === I) {
      var E = Math.floor(8 * Math.random()),
        S = Math.floor(8 * Math.random());
      Math.round(Math.random())
        ? (c[E] = 1 - c[E])
        : ((c[E] = 1 - c[E]), E !== S && (c[S] = 1 - c[S]));
    }
    (t.getBit(0, 5).value = d[0]),
      (t.getBit(0, 4).value = d[1]),
      (t.getBit(0, 3).value = d[2]),
      (t.getBit(0, 2).value = d[3]),
      (t.getBit(0, 1).value = d[4]),
      (t.getBit(0, 0).value = d[5]),
      (t.getBit(1, 0).value = d[6]),
      (t.getBit(2, 0).value = d[7]),
      (t.getBit(0, 8).value = c[0]),
      (t.getBit(0, 9).value = c[1]),
      (t.getBit(0, 10).value = c[2]),
      (t.getBit(0, 11).value = c[3]),
      (t.getBit(0, 12).value = c[4]),
      (t.getBit(0, 13).value = c[5]),
      (t.getBit(1, 13).value = c[6]),
      (t.getBit(2, 13).value = c[7]),
      (t.getBit(18, 5).value = 0 + I);
  } else if ("classPuzzle9" === e) {
    for (I = Math.round(Math.random()), d = [], u = 0; u < 10; u++)
      d.push(Math.round(Math.random()));
    if (0 === I) {
      var f = 0;
      for (r = 0; r < 10; r++)
        1 === d[r] ? (f += 1) : (f = 0), 4 === f && ((d[r] = 0), (f = 0));
    } else if (1 === I) {
      var p = Math.floor(7 * Math.random());
      (d[p] = 1), (d[p + 1] = 1), (d[p + 2] = 1), (d[p + 3] = 1);
    }
    (t.getBit(0, 5).value = d[0]),
      (t.getBit(0, 4).value = d[1]),
      (t.getBit(0, 3).value = d[2]),
      (t.getBit(0, 2).value = d[3]),
      (t.getBit(0, 1).value = d[4]),
      (t.getBit(0, 0).value = d[5]),
      (t.getBit(1, 0).value = d[6]),
      (t.getBit(2, 0).value = d[7]),
      (t.getBit(3, 0).value = d[8]),
      (t.getBit(4, 0).value = d[9]),
      (t.getBit(18, 5).value = 0 + I);
  } else if ("vaziraniClassic" === e) {
    var T = Math.round(Math.random()),
      R = Math.round(Math.random()),
      m = Math.round(Math.random());
    (t.getGate(6, 6, 1).rot = T),
      (t.getGate(9, 6, 1).rot = R),
      (t.getGate(12, 6, 1).rot = m),
      (t.getBit(18, 4).value = 1 - T),
      (t.getBit(18, 3).value = 1 - R),
      (t.getBit(18, 2).value = 1 - m);
  } else if ("quant1" === e) {
    for (i = 0; i < 5; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 4 - i).setPolarize(a), t.getQubit(18, 4 - i).setPolarize(a);
      o = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 9 + i).setPolarize(o), t.getQubit(18, 9 + i).setPolarize(o);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 5).setPolarize(a), (t.getGate(18, 5, 0).rot = a);
    o = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 8).setPolarize(o), (t.getGate(18, 8, 0).rot = o);
  } else if ("quant2" === e) {
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      (t.getBit(18, 5 - i).value = a), (t.getBit(0, 5 - i).value = a);
    }
    for (i = 0; i < 5; i++) {
      a = (Math.PI * (4 + 8 * Math.round(Math.random()))) / 8;
      t.getQubit(0, 9 + i).setPolarize(a), t.getQubit(18, 9 + i).setPolarize(a);
    }
    a = (Math.PI * (4 + 8 * Math.round(Math.random()))) / 8;
    t.getQubit(0, 8).setPolarize(a), (t.getGate(18, 8, 0).rot = a);
  } else if ("quant3A" === e);
  else if ("quant3" === e) {
    for (i = 0; i < 5; i++) {
      a = (Math.PI * (4 * Math.round(Math.random()))) / 8;
      t.getQubit(0, 4 - i).setPolarize(a), t.getQubit(18, 4 - i).setPolarize(a);
    }
    a = (Math.PI * (4 * Math.round(Math.random()))) / 8;
    t.getQubit(0, 5).setPolarize(a), (t.getGate(18, 5, 0).rot = a);
  } else if ("quant4" === e)
    for (i = 0; i < 6; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 5 - i).setPolarize(a);
    }
  else if ("quant5" === e || "quant6" === e) {
    for (a = [], o = [], i = 0; i < 6; i++)
      a.push(8 * Math.round(Math.random())),
        t.getQubit(0, 5 - i).setPolarize((Math.PI * a[i]) / 8),
        o.push(4 * Math.round(Math.random())),
        t.getQubit(0, 8 + i).setPolarize((Math.PI * o[i]) / 8);
    for (i = 1; i < 6; i++)
      t.getQubit(18, 5 - i).setPolarize((Math.PI * (a[i] + o[i])) / 8);
    t.getGate(18, 5, 0).rot = (Math.PI * (a[0] + o[0])) / 8;
  } else if ("quant6B" === e) {
    (SCENARIO.QINPUTS = [[], [], [], []]), (SCENARIO.CINPUTS = [[], [], []]);
    for (r = 0; r < 96; r++) {
      s = Math.floor(16 * Math.random());
      var g = Math.floor(16 * Math.random());
      SCENARIO.QINPUTS[0].push(s),
        SCENARIO.QINPUTS[1].push(g),
        SCENARIO.QINPUTS[2].push(s + 5),
        SCENARIO.QINPUTS[3].push(16 - g);
    }
    for (i = 1; i < 6; i++) {
      s = Math.floor(16 * Math.random());
      t.getQubit(0, 5 - i).setPolarize(((s + 5) * Math.PI) / 8),
        t.getQubit(18, 5 - i).setPolarize((s * Math.PI) / 8),
        t.getQubit(0, 5 - i).rotateBasis(0),
        (t.getQubit(0, 5 - i).lockedBasis = !0);
    }
    s = Math.floor(16 * Math.random());
    (t.getGate(18, 5).rot = (s * Math.PI) / 8),
      t.getQubit(0, 5).setPolarize(((s + 5) * Math.PI) / 8),
      t.getQubit(0, 5).rotateBasis(0),
      (t.getQubit(0, 5).lockedBasis = !0);
    for (i = 9; i < 14; i++) {
      g = Math.floor(16 * Math.random());
      t.getQubit(18, i).setPolarize((g * Math.PI) / 8),
        t.getQubit(0, i).setPolarize(((16 - g) * Math.PI) / 8),
        t.getQubit(0, i).rotateBasis(Math.PI / 2),
        (t.getQubit(0, i).lockedBasis = !0);
    }
    g = Math.floor(16 * Math.random());
    (t.getGate(18, 8).rot = (g * Math.PI) / 8),
      t.getQubit(0, 8).setPolarize(((16 - g) * Math.PI) / 8),
      t.getQubit(0, 8).rotateBasis(Math.PI / 2),
      (t.getQubit(0, 8).lockedBasis = !0);
  } else if ("quant7" === e)
    for (i = 0; i < 6; i++)
      t.getQubit(0, 5 - i).rotateBasis(0),
        (t.getQubit(0, 5 - i).lockedBasis = !0);
  else if ("quantChallengeA" === e) {
    for (i = 0; i < 5; i++) {
      (a = 4 + 8 * Math.round(Math.random())), (o = 16 - a);
      t.getQubit(0, 4 - i).setPolarize((Math.PI * a) / 8),
        t.getQubit(18, 4 - i).setPolarize((Math.PI * o) / 8);
    }
    (a = 4 + 8 * Math.round(Math.random())), (o = 16 - a);
    t.getQubit(0, 5).setPolarize((Math.PI * a) / 8),
      (t.getGate(18, 5, 0).rot = (Math.PI * o) / 8);
  } else if ("quantChallengeB" === e) {
    for (i = 0; i < 5; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 4 - i).setPolarize(a),
        (t.getQubit(0, 4 - i).lockedBasis = !0),
        t.getQubit(18, 4 - i).setPolarize(a);
      o = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 9 + i).setPolarize(o),
        (t.getQubit(0, 9 + i).lockedBasis = !0),
        t.getQubit(18, 9 + i).setPolarize(o);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 5).setPolarize(a),
      (t.getQubit(0, 5).lockedBasis = !0),
      (t.getGate(18, 5, 0).rot = a);
    o = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 8).setPolarize(o),
      (t.getQubit(0, 8).lockedBasis = !0),
      (t.getGate(18, 8, 0).rot = o);
  } else if ("quantChallengeC" === e) {
    for (i = 0; i < 5; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 4 - i).setPolarize(a), t.getQubit(18, 4 - i).setPolarize(a);
      o = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 9 + i).setPolarize(o);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 5).setPolarize(a), (t.getGate(18, 5, 0).rot = a);
    o = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 8).setPolarize(o),
      t
        .getQubit(5, 13)
        .setPolarize((Math.PI * Math.floor(16 * Math.random())) / 8),
      t
        .getQubit(4, 13)
        .setPolarize((Math.PI * Math.floor(16 * Math.random())) / 8),
      t
        .getQubit(3, 13)
        .setPolarize((Math.PI * Math.floor(16 * Math.random())) / 8),
      t
        .getQubit(2, 13)
        .setPolarize((Math.PI * Math.floor(16 * Math.random())) / 8),
      t
        .getQubit(1, 13)
        .setPolarize((Math.PI * Math.floor(16 * Math.random())) / 8);
  } else if ("quantChallengeD" === e)
    for (i = 0; i < 4; i++) {
      (o = 2 * Math.round(Math.random()) - 1),
        (a = 1 + Math.floor(3 * Math.random()));
      var A = t.entList[i];
      (A.ampsComp = [
        Math.cos((a * Math.PI) / 16),
        0,
        0,
        o * Math.sin((a * Math.PI) / 16),
      ]),
        A.computeRotAmps(),
        A.computeAllEnts();
      var C = 0;
      if (o < 0) C = 1;
      t.getBit(18, 5 - i).value = C;
    }
  else if ("quantChallengeE" === e) {
    for (i = 0; i < 5; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 4 - i).setPolarize(a), t.getQubit(18, 9 + i).setPolarize(a);
      o = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 9 + i).setPolarize(o), t.getQubit(18, 4 - i).setPolarize(o);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 5).setPolarize(a), (t.getGate(18, 8, 0).rot = a);
    o = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 8).setPolarize(o), (t.getGate(18, 5, 0).rot = o);
  } else if ("quantChallengeF" === e);
  else if ("quantChallengeG" === e) {
    for (i = 0; i < 5; i++) {
      a = Math.round(Math.random());
      t.getQubit(18, 4 - i).setPolarize((Math.PI * (4 + 4 * a)) / 8),
        (t.getBit(0, 9 + i).value = 1 - a);
    }
    a = Math.round(Math.random());
    (t.getBit(0, 8).value = 1 - a),
      (t.getGate(18, 5, 0).rot = (Math.PI * (4 + 4 * a)) / 8);
  } else if ("quantErrorA" === e) {
    for (i = 0; i < 5; i++) {
      a = (Math.PI * Math.floor(16 * Math.random())) / 8;
      t.getQubit(0, 4 - i).setPolarize(a), t.getQubit(18, 4 - i).setPolarize(a);
    }
    a = (Math.PI * Math.floor(16 * Math.random())) / 8;
    t.getQubit(0, 5).setPolarize(a), (t.getGate(18, 5, 0).rot = a);
  } else if ("quantErrorB" === e) {
    for (i = 0; i < 4; i++)
      (a = Math.floor(16 * Math.random())),
        t.getQubit(0, 4 - i).setPolarize((Math.PI * a) / 8),
        t.getQubit(18, 4 - i).setPolarize((Math.PI * a) / 8);
    (a = Math.floor(16 * Math.random())),
      t.getQubit(0, 5).setPolarize((Math.PI * a) / 8),
      (t.getGate(18, 5, 0).rot = (Math.PI * a) / 8);
    for (i = 0; i < 3; i++) {
      A = t.entList[i];
      (A.ampsComp = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)]),
        A.computeRotAmps(),
        A.computeAllEnts();
    }
  } else if ("adderB" === e) {
    (a = []), (o = []);
    a.push(Math.round(Math.random())), o.push(Math.round(Math.random()));
    for (i = 1; i < 5; i++)
      a.push(Math.round(Math.random())),
        t.getQubit(0, 5 - i).setPolarize(Math.PI * a[i]),
        t.getQubit(18, 5 - i).setPolarize(Math.PI * a[i]),
        o.push(Math.round(Math.random())),
        t.getQubit(0, 8 + i).setPolarize(Math.PI * o[i]),
        t.getQubit(18, 8 + i).setPolarize(Math.PI * o[i]);
    t.getQubit(0, 5).setPolarize(Math.PI * a[0]),
      (t.getGate(18, 5, 0).rot = Math.PI * a[0]),
      t.getQubit(0, 8).setPolarize(Math.PI * o[0]),
      (t.getGate(18, 8, 0).rot = Math.PI * o[0]),
      (t.getGate(13, 13, 0).rot = Math.PI * ((a[0] + o[0]) % 2)),
      t.getQubit(14, 13).setPolarize(Math.PI * ((a[1] + o[1]) % 2)),
      t.getQubit(15, 13).setPolarize(Math.PI * ((a[2] + o[2]) % 2)),
      t.getQubit(16, 13).setPolarize(Math.PI * ((a[3] + o[3]) % 2)),
      t.getQubit(17, 13).setPolarize(Math.PI * ((a[4] + o[4]) % 2));
  } else if ("adderC" === e) {
    (a = []), (o = []);
    a.push(Math.round(Math.random())), o.push(Math.round(Math.random()));
    for (i = 1; i < 5; i++)
      a.push(Math.round(Math.random())),
        t.getQubit(0, 5 - i).setPolarize(Math.PI * a[i]),
        t.getQubit(18, 5 - i).setPolarize(Math.PI * a[i]),
        o.push(Math.round(Math.random())),
        t.getQubit(0, 8 + i).setPolarize(Math.PI * o[i]),
        t.getQubit(18, 8 + i).setPolarize(Math.PI * o[i]);
    t.getQubit(0, 5).setPolarize(Math.PI * a[0]),
      (t.getGate(18, 5, 0).rot = Math.PI * a[0]),
      t.getQubit(0, 8).setPolarize(Math.PI * o[0]),
      (t.getGate(18, 8, 0).rot = Math.PI * o[0]),
      (t.getGate(13, 13, 0).rot = Math.PI * Math.floor(0.55 * (a[0] + o[0]))),
      t
        .getQubit(14, 13)
        .setPolarize(Math.PI * Math.floor(0.55 * (a[1] + o[1]))),
      t
        .getQubit(15, 13)
        .setPolarize(Math.PI * Math.floor(0.55 * (a[2] + o[2]))),
      t
        .getQubit(16, 13)
        .setPolarize(Math.PI * Math.floor(0.55 * (a[3] + o[3]))),
      t
        .getQubit(17, 13)
        .setPolarize(Math.PI * Math.floor(0.55 * (a[4] + o[4])));
  } else if ("measure" === e)
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      t.getQubit(0, 5 - i).setPolarize((Math.PI * a) / 2),
        t.getQubit(0, 8 + i).setPolarize((Math.PI * a) / 2),
        (t.getBit(18, 5 - i).value = a);
    }
  else if ("measureB" === e) {
    a = Math.round(Math.random());
    t.getQubit(0, 5).setPolarize((Math.PI * a) / 2),
      t.getQubit(0, 4).setPolarize((Math.PI * a) / 2),
      t.getQubit(0, 3).setPolarize((Math.PI * a) / 2),
      t.getQubit(0, 2).setPolarize((Math.PI * a) / 2),
      (t.getBit(18, 5).value = a);
    a = Math.round(Math.random());
    t.getQubit(0, 1).setPolarize((Math.PI * a) / 2),
      t.getQubit(0, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(1, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(2, 0).setPolarize((Math.PI * a) / 2),
      (t.getBit(18, 4).value = a);
    a = Math.round(Math.random());
    t.getQubit(3, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(4, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(5, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(6, 0).setPolarize((Math.PI * a) / 2),
      (t.getBit(18, 3).value = a);
    a = Math.round(Math.random());
    t.getQubit(7, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(8, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(9, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(10, 0).setPolarize((Math.PI * a) / 2),
      (t.getBit(18, 2).value = a);
    a = Math.round(Math.random());
    t.getQubit(11, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(12, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(13, 0).setPolarize((Math.PI * a) / 2),
      t.getQubit(14, 0).setPolarize((Math.PI * a) / 2),
      (t.getBit(18, 1).value = a);
  } else if ("preDenseB" === e)
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      t.getBit(0, 5 - i).value = a;
      o = Math.round(Math.random());
      t.getBit(0, 8 + i).value = o;
      var L = Math.round(Math.random());
      (t.getBit(13 + i, 13).value = L),
        (t.getBit(18, 5 - i).value = 0 === L ? a : o);
    }
  else if ("simpleDistill" === e) {
    A = t.entList[0];
    A.setQubits([t.getQubit(4, 11), t.getQubit(4, 10), t.getQubit(4, 9)]),
      (A.ampsComp = [0.25, 0.75, 0.25, -0.25, 0.25, -0.25, -0.25, 0.25]),
      A.computeRotAmps(),
      A.computeFinalAmps(),
      A.computeAllEnts(),
      (t.getQubit(4, 11).lockedBasis = !0),
      (t.getQubit(4, 10).lockedBasis = !0),
      (t.getQubit(4, 9).lockedBasis = !0);
  } else if ("dense" === e) {
    for (i = 0; i < 6; i++) {
      a = Math.round(Math.random());
      (t.getBit(18, 5 - i).value = a), (t.getBit(0, 5 - i).value = a);
      o = Math.round(Math.random());
      (t.getBit(18, 8 + i).value = o), (t.getBit(0, 8 + i).value = o);
    }
    for (i = 0; i < 3; i++) {
      A = t.entList[i];
      (A.ampsComp = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)]),
        A.computeRotAmps(),
        A.computeAllEnts();
    }
  } else if ("teleport" === e) {
    for (i = 0; i < 4; i++)
      (a = Math.floor(16 * Math.random())),
        t.getQubit(0, 4 - i).setPolarize((Math.PI * a) / 8),
        t.getQubit(18, 4 - i).setPolarize((Math.PI * a) / 8);
    (a = Math.floor(16 * Math.random())),
      t.getQubit(0, 5).setPolarize((Math.PI * a) / 8),
      (t.getGate(18, 5, 0).rot = (Math.PI * a) / 8);
    for (i = 0; i < 3; i++) {
      A = t.entList[i];
      (A.ampsComp = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)]),
        A.computeRotAmps(),
        A.computeAllEnts();
    }
  } else if ("distill" === e) {
    for (i = 0; i < 4; i++)
      (a = Math.floor(16 * Math.random())),
        t.getQubit(0, 4 - i).setPolarize((Math.PI * a) / 8),
        t.getQubit(18, 4 - i).setPolarize((Math.PI * a) / 8);
    (a = Math.floor(16 * Math.random())),
      t.getQubit(0, 5).setPolarize((Math.PI * a) / 8),
      (t.getGate(18, 5, 0).rot = (Math.PI * a) / 8);
    for (i = 0; i < 4; i++) {
      A = t.entList[i];
      (A.ampsComp = [
        Math.cos((1 * Math.PI) / 16),
        0,
        0,
        Math.sin((1 * Math.PI) / 16),
      ]),
        A.computeRotAmps(),
        A.computeAllEnts();
    }
  } else if ("vaziraniQuantum" === e) {
    (T = Math.round(Math.random())),
      (R = Math.round(Math.random())),
      (m = Math.round(Math.random()));
    (t.getGate(6, 6, 0).state = T),
      (t.getGate(9, 6, 0).state = R),
      (t.getGate(12, 6, 0).state = m),
      (t.getBit(18, 4).value = 1 - T),
      (t.getBit(18, 3).value = 1 - R),
      (t.getBit(18, 2).value = 1 - m);
  } else if ("quantumAdv1" === e) {
    var D = Math.max(0, SCENARIO.currentRep - SCENARIO.retard - 1);
    if ("constructing" === STATE.mode) {
      a = Math.round(Math.random());
      var b = Math.floor(16 * Math.random());
    } else if (D < 17) (a = 1), (b = D);
    else (a = 0), (b = 0);
    if (((t.getBit(18, 5).value = a), 0 === a))
      var O = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)];
    else
      O = [
        Math.cos((b * Math.PI) / 16) ** 2,
        Math.cos((b * Math.PI) / 16) * Math.sin((b * Math.PI) / 16),
        Math.cos((b * Math.PI) / 16) * Math.sin((b * Math.PI) / 16),
        Math.sin((b * Math.PI) / 16) ** 2,
      ];
    for (i = 0; i < 10; i++) {
      A = t.entList[i];
      (A.ampsComp = [...O]), A.computeRotAmps(), A.computeAllEnts();
    }
    0 === a ? t.computizeQubits() : t.naturalizeQubits();
  } else if ("quantumAdv2" === e) {
    D = Math.max(0, SCENARIO.currentRep - SCENARIO.retard - 1);
    if ("constructing" === STATE.mode)
      if (Math.round(Math.random())) {
        var M = Math.round(Math.random());
        (a = 0), (b = Math.floor(8 * Math.random()));
      } else
        (a = 1),
          (M = Math.round(Math.random())),
          (b = Math.floor(16 * Math.random()));
    else if (D < 17) (a = 1), (M = 0), (b = D);
    else (a = 0), (M = D % 2), (b = 0);
    if (((t.getBit(18, 5).value = a), 0 === a))
      if (0 === M) O = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)];
      else O = [0, 1 / Math.sqrt(2), -1 / Math.sqrt(2), 0];
    else
      O = [
        Math.cos((b * Math.PI) / 16) ** 2,
        Math.cos((b * Math.PI) / 16) * Math.sin((b * Math.PI) / 16),
        Math.cos((b * Math.PI) / 16) * Math.sin((b * Math.PI) / 16),
        Math.sin((b * Math.PI) / 16) ** 2,
      ];
    for (i = 0; i < 11; i++) {
      A = t.entList[i];
      (A.ampsComp = [...O]), A.computeRotAmps(), A.computeAllEnts();
    }
    0 === a ? t.computizeQubits() : t.naturalizeQubits();
  } else if ("quantumAdv3" === e) {
    if ("constructing" === STATE.mode) {
      (M = Math.round(Math.random())),
        (a = Math.round(Math.random())),
        (b = 4 * Math.floor(4 * Math.random()));
      var v = (1 / 8) * Math.PI * Math.floor(8 * Math.random());
    } else if (SCENARIO.currentRep % 2 == 1)
      (M = 0),
        (a = 0),
        (b = Math.floor(4 * Math.random())),
        (v = (1 / 8) * Math.PI * Math.floor(8 * Math.random()));
    else
      (a = 1),
        (M = Math.round(Math.random())),
        (b = ((SCENARIO.currentRep / 2) % 4) * 4),
        (v = 2 * Math.PI * Math.random());
    if (((t.getBit(18, 5).value = a), 0 === a))
      O = [
        Math.cos(v) / Math.sqrt(2),
        Math.sin(v) / Math.sqrt(2),
        -Math.sin(v) / Math.sqrt(2),
        Math.cos(v) / Math.sqrt(2),
      ];
    else {
      var w = [Math.cos((Math.PI * b) / 16), Math.sin((Math.PI * b) / 16)];
      O = [w[0] ** 2, w[0] * w[1], w[0] * w[1], w[1] ** 2];
    }
    for (i = 0; i < 12; i++) {
      A = t.entList[i];
      (A.ampsComp = [...O]), A.computeRotAmps(), A.computeAllEnts();
    }
    0 === a ? t.computizeQubits() : t.naturalizeQubits();
  } else if ("entChallengeA" === e);
  else if ("entChallengeB" === e) {
    D = Math.max(0, SCENARIO.currentRep - SCENARIO.retard - 1);
    if ("constructing" === STATE.mode) var y = Math.floor(7 * Math.random());
    else if (D % 2 == 0) y = 0;
    else y = 1 + (((D + 1) / 2) % 6);
    var N = Math.ceil(y / 6);
    if (0 === y)
      O = [
        1 / Math.sqrt(2),
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1 / Math.sqrt(2),
      ];
    else if (1 === y) O = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    else if (2 === y)
      O = [0.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0.5];
    else if (3 === y)
      O = [0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5];
    else if (4 === y)
      O = [0.5, 0, 0, 0, 0, 0, 0.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0.5];
    else if (5 === y)
      O = [0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5];
    else if (6 === y) O = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
    for (r = 0; r < 8; r++) {
      var P = t.entList[r];
      (P.ampsComp = [...O]), P.computeRotAmps(), P.computeAllEnts();
    }
    t.getBit(18, 5).value = N;
  } else if ("entChallengeC" === e) {
    D = Math.max(0, SCENARIO.currentRep - SCENARIO.retard - 1);
    if ("constructing" === STATE.mode) y = Math.floor(7 * Math.random());
    else if (D % 2 == 0) y = 0;
    else y = 1 + (((D + 1) / 2) % 6);
    N = Math.ceil(y / 6);
    if (0 === y)
      O = [
        1 / Math.sqrt(2),
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1 / Math.sqrt(2),
      ];
    else if (1 === y) O = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    else if (2 === y)
      O = [0.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0.5];
    else if (3 === y)
      O = [0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5];
    else if (4 === y)
      O = [0.5, 0, 0, 0, 0, 0, 0.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0.5];
    else if (5 === y)
      O = [0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5];
    else if (6 === y) O = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
    for (r = 0; r < 8; r++) {
      P = t.entList[r];
      (P.ampsComp = [...O]), P.computeRotAmps(), P.computeAllEnts();
    }
    t.getBit(18, 5).value = N;
  } else if ("extraA" === e);
  else if ("extraB" === e)
    for (O = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)], r = 0; r < 4; r++) {
      P = t.entList[r];
      (P.ampsComp = [
        Math.cos((1 * Math.PI) / 16),
        0,
        0,
        Math.sin((1 * Math.PI) / 16),
      ]),
        P.computeRotAmps(),
        P.computeAllEnts();
    }
  else if ("extraC" === e) {
    for (s = [], g = [], r = 0; r < 4; r++)
      s.push(Math.round(Math.random())), g.push(Math.round(Math.random()));
    1 === SCENARIO.currentRep ||
      (2 === SCENARIO.currentRep
        ? ((s = [1, 1, 1, 1]), (g = [1, 1, 1, 1]))
        : 3 === SCENARIO.currentRep
          ? (s = [0, 0, 0, 0])
          : 4 === SCENARIO.currentRep && (g = [0, 0, 0, 0]));
    var F = s[0] + 2 * s[1] + 4 * s[2] + 8 * s[3],
      k = g[0] + 2 * g[1] + 4 * g[2] + 8 * g[3],
      x = (F * k).toString(2),
      B = x.length;
    H = [0, 0, 0, 0, 0, 0, 0, 0];
    for (r = 0; r < B; r++) H[r] = parseInt(x[B - r - 1]);
    for (r = 0; r < 4; r++)
      (t.getBit(0, 5 - r).value = s[r]), (t.getBit(0, 8 + r).value = g[r]);
    for (r = 0; r < 6; r++) t.getBit(18, 5 - r).value = H[r];
    (t.getBit(17, 0).value = H[6]), (t.getBit(16, 0).value = H[7]);
  } else if ("binaryencode" === e) {
    var W = 5 + Math.floor(11 * Math.random());
    s = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (r = 0; r < W; r++) s[r] = 1;
    s[W] = 0;
    for (r = 0; r < 6; r++) t.getBit(0, 5 - r).value = s[r];
    if (((SCENARIO.CINPUTS = [[], [], []]), W > 6))
      for (r = 0; r < W - 6; r++) SCENARIO.CINPUTS[0].push(1);
    W > 5 && SCENARIO.CINPUTS[0].push(0);
    (x = W.toString(2)), (B = x.length);
    H = [0, 0, 0, 0];
    for (r = 0; r < B; r++) H[r] = parseInt(x[B - r - 1]);
    for (r = 0; r < 4; r++) t.getBit(18, 5 - r).value = H[r];
  } else if ("adder" === e) {
    var q = 0;
    for (i = 0; i < 6; i++) {
      if (5 === i) {
        (s = 0), (g = 0);
        var H = (s + g + q) % 2;
      } else
        (s = Math.round(Math.random())),
          (g = Math.round(Math.random())),
          (H = (s + g + q) % 2);
      (t.getBit(0, 5 - i).value = s),
        (t.getBit(0, 8 + i).value = g),
        (t.getBit(18, 5 - i).value = H),
        (q = Math.floor((s + g + q) / 2));
    }
  } else if ("extraD" === e) {
    var U = 15 + Math.floor(20 * Math.random()),
      _ = Math.round(Math.random()),
      G = !1;
    3 === SCENARIO.currentRep && ((G = !0), (_ = 1));
    var V = Helper.genSequenceBits(U, _, G);
    t.getBit(18, 5).value = _;
    for (i = 0; i < 6; i++)
      (t.getBit(0, 5 - i).value = V[0].shift()),
        (t.getBit(0, 8 + i).value = V[1].shift());
    (SCENARIO.CINPUTS[0] = V[0]), (SCENARIO.CINPUTS[1] = V[1]);
  } else if ("chsh" === e)
    for (i = 0; i < 3; i++) {
      A = t.entList[i];
      (A.ampsComp = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)]),
        A.computeRotAmps(),
        A.computeAllEnts();
    }
  else if ("freeA" === e);
  else if ("freeB" === e)
    for (O = [1 / Math.sqrt(2), 0, 0, 1 / Math.sqrt(2)], r = 0; r < 4; r++) {
      P = t.entList[r];
      (P.ampsComp = [
        Math.cos((4 * Math.PI) / 16),
        0,
        0,
        Math.sin((4 * Math.PI) / 16),
      ]),
        P.computeRotAmps(),
        P.computeAllEnts();
    }
}
function LevelSelect() {
  (STATE.mode = "levelSelect"),
    (FIELD.tileWidth = ResetConsts.resize()),
    (FIELD.tileHeight = FIELD.tileWidth),
    ResetConsts.levelSelect();
}
function LevelTitle() {
  (STATE.mode = "title"),
    (FIELD.tileWidth = 2 * ResetConsts.resize()),
    (FIELD.tileHeight = FIELD.tileWidth),
    (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
    (SCENARIO.xCameraLocs = [
      5, 6, 7, 8, 8, 9, 9, 10, 10, 10, 11, 12, 13, 13, 13, 12, 12, 11, 11, 11,
      12, 12, 13, 13, 12, 12, 11, 11, 10, 9, 9, 8, 8, 8, 8, 8, 7, 7, 7, 6, 6, 5,
      5, 5, 5, 5, 5, 5, 6,
    ]),
    (SCENARIO.yCameraLocs = [
      4, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 7, 7, 8, 9, 9, 9, 9, 8, 7, 6, 6, 5, 4, 4,
    ]),
    ResetConsts.title(),
    Timer.initTitle(),
    (IBOARD = new Board(CANV.interface.ctx, FIELD.cols, FIELD.rows));
  for (
    var e = [
        [5, 4, 3, 2, "move", 0, !1],
        [6, 3, 0, -1, "wait", 0, !1],
        [15, 7, 1, -1, "wait", 1.5707963267948966, !1],
        [11, 3, 0, -1, "wait", 1.5707963267948966, !1],
      ],
      t = 0;
    t < e.length;
    t++
  ) {
    var i = e[t].pop(),
      a = new Qubit(...e[t]);
    (a.isGhost = i), IBOARD.setQubit(a);
  }
  var r = [
    [6, 6, 3, -1, "move", 0, 0, !1],
    [1, 2, 1, -1, "wait", 0, 0, !1],
    [1, 1, 1, 3, "halt", 0, 0, !1],
  ];
  for (t = 0; t < r.length; t++) {
    i = r[t].pop();
    var s = new Bit(...r[t]);
    (s.isGhost = i), IBOARD.setBit(s);
  }
  IBOARD._tiles = [
    4, 2, 2, 2, 2, 2, 60, 2, 2, 5, 4, 2, 62, 2, 2, 2, 2, 5, 84, 1, 55, -1, 84,
    4, 5, 21, -1, -1, 63, 1, 24, 42, 22, 22, 40, 84, 1, 21, 83, 81, -1, 43, 63,
    1, 23, 52, 22, 12, 12, 26, 4, 89, 68, 60, 2, 6, 21, 1, 23, 89, 47, 1, 3, 80,
    2, 70, 6, 3, 80, 6, 24, 42, 22, 40, 22, 26, 3, 2, 2, 60, 6, 4, 82, 2, 68, 5,
    24, 82, 22, 48, 25, 4, 62, 2, 5, 4, 2, 2, 13, 87, 33, 25, 84, 25, 3, 60, 84,
    -1, 21, 86, 1, 4, 2, 6, 1, 24, 22, 49, -1, 69, 41, -1, 23, 25, 21, 24, 52,
    26, 1, 1, 3, 68, 5, 3, 32, 60, 13, 84, 83, 81, 4, 5, 53, 23, 31, 42, 84, 83,
    81, 84, 42, 61, -1, 21, 23, 31, 52, 33, 26, 1, 63, 41, -1, 23, 85, 5, 1, 1,
    -1, -1, 1, -1, 21, -1, 21, -1, 3, 68, 6, 3, 60, 2, 89, 70, 6, 73, 63, -1,
    -1, 1, -1, 23, 22, 84, 40, 22, 42, 40, 22, 49, 4, 80, 68, 62, 6, 3, 68, 2,
    6, -1, -1, 4, 2, 65, 2, 2, 62, 5, 23, 33, 82, 22, 42, 25, 24, 42, 52, 25,
    -1, -1, 1, -1, 1, -1, 4, 2, 6, -1, 3, 2, 62, 2, 13, 13, 2, 5, 21, -1, 74,
    64, 2, 64, 2, 6, -1, 20, -1, -1, -1, -1, -1, 23, 26, -1, 3, 84,
  ];
  var o = [
    [6, 3, "sync", "pretransform", 0, 0, 0, 0, -2],
    [6, 4, "sync", "free", 2, 0, 0, 0, -2],
    [8, 3, "qControl", "free", 0, 1.5707963267948966, 0, 0, -2],
    [8, 4, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -2],
    [8, 4, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -2],
    [10, 5, "measure", "free", 0, 0, 0, 0, -2],
    [13, 4, "cSplit", "free", 0, 0, 0, 0, -2],
    [11, 5, "trash", "free", 0, 0, 0, 0, -2],
    [14, 5, "upgrade", "free", 1, 0.7853981633974483, 0, 0, -2],
    [12, 7, "switch", "free", 2, 1, 0, 0, -2],
    [12, 6, "cInvert", "free", 0, 1, 0, 0, -2],
    [12, 6, "cInvert", "free", 0, 0, 1, 0, -2],
    [13, 7, "trash", "free", 0, 0, 0, 0, -2],
    [12, 8, "upgrade", "free", 0, 5.497787143782138, 0, 0, -2],
    [12, 9, "qControl", "free", 0, 0, 0, 0, -2],
    [12, 10, "qFlip", "free", 0, 5.497787143782138, 0, 0, -2],
    [12, 10, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -2],
    [15, 7, "sync", "pretransform", 1, 0, 0, 0, -2],
    [14, 7, "sync", "free", 3, 0, 0, 0, -2],
    [14, 9, "qControl", "free", 3, 0.7853981633974483, 0, 0, -2],
    [15, 9, "rotate", "free", 1, 2.356194490192345, 0, 0, -2],
    [15, 9, "rotate", "free", 1, 0.7853981633974483, 1, 0, -2],
    [18, 7, "measure", "free", 1, 1.5707963267948966, 0, 0, -2],
    [17, 7, "switch", "free", 2, 1, 0, 0, -2],
    [16, 7, "trash", "free", 0, 0, 0, 0, -2],
    [17, 6, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -2],
    [17, 6, "qFlip", "free", 0, 0, 1, 0, -2],
    [11, 9, "delay", "free", 0, 0, 0, 1, -2],
    [13, 11, "switch", "free", 2, 0, 0, 0, -2],
    [13, 10, "rotate", "free", 0, 3.9269908169872414, 0, 0, -2],
    [13, 10, "rotate", "free", 0, 2.356194490192345, 1, 0, -2],
    [16, 11, "switch", "free", 2, 1, 0, 0, -2],
    [16, 10, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -2],
    [16, 10, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -2],
    [18, 13, "trash", "free", 0, 0, 0, 0, -2],
    [12, 12, "rotate", "free", 0, 2.748893571891069, 0, 0, -2],
    [8, 9, "rotate", "free", 1, 3.141592653589793, 1, 0, -2],
    [11, 10, "sync", "free", 0, 0, 0, 0, -2],
    [11, 11, "sync", "free", 2, 0, 0, 0, -2],
    [17, 11, "cInvert", "free", 0, 0, 0, 0, -2],
    [9, 9, "measure", "free", 0, 0, 0, 0, -2],
    [9, 8, "switch", "free", 1, 1, 0, 0, -2],
    [7, 5, "trash", "free", 0, 0, 0, 0, -2],
    [9, 7, "cInvert", "free", 1, 0, 0, 0, -2],
    [8, 8, "rotate", "free", 1, 0, 0, 0, -2],
    [8, 8, "rotate", "free", 1, 3.141592653589793, 1, 0, -2],
    [9, 10, "cSplit", "free", 1, 0, 0, 0, -2],
    [6, 10, "switch", "free", 2, 1, 0, 0, -2],
    [6, 9, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -2],
    [6, 9, "qFlip", "free", 0, 0, 1, 0, -2],
    [16, 3, "switch", "free", 0, 1, 0, 0, -2],
    [16, 4, "rotate", "free", 0, 0, 0, 0, -2],
    [16, 4, "rotate", "free", 0, 0.7853981633974483, 1, 0, -2],
    [18, 0, "trash", "free", 0, 0, 0, 0, -2],
    [11, 3, "sync", "pretransform", 0, 0, 0, 0, -2],
    [11, 4, "sync", "free", 2, 0, 0, 0, -2],
    [14, 3, "switch", "free", 2, 1, 0, 0, -2],
    [13, 2, "delay", "free", 0, 0, 0, 1, -2],
    [14, 2, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -2],
    [14, 2, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -2],
    [15, 1, "switch", "free", 0, 1, 0, 0, -2],
    [15, 2, "measure", "free", 0, 0.7853981633974483, 0, 0, -2],
    [15, 2, "measure", "free", 0, 0.7853981633974483, 1, 0, -2],
    [16, 1, "trash", "free", 0, 0, 0, 0, -2],
    [2, 13, "qCombine", "free", 0, 0, 0, 0, -2],
    [1, 13, "qCreate", "free", 0, 0, 0, 0, 1],
    [4, 10, "switch", "free", 0, 0, 0, 0, -2],
    [4, 11, "qCombine", "free", 1, 0, 0, 0, -2],
    [4, 11, "qCombine", "free", 2, 0, 1, 0, -2],
    [4, 13, "qCombine", "free", 0, 0, 0, 0, -2],
    [7, 10, "switch", "free", 0, 1, 0, 0, -2],
    [7, 11, "rotate", "free", 0, 0, 0, 0, -2],
    [7, 11, "rotate", "free", 0, 3.9269908169872414, 1, 0, -2],
    [6, 7, "sync", "free", 1, 0, 0, 0, -2],
    [5, 7, "sync", "free", 3, 0, 0, 0, -2],
    [6, 6, "switch", "free", 1, 0, 0, 0, -2],
    [5, 6, "qFlip", "free", 1, 0, 0, 0, -2],
    [5, 6, "qFlip", "free", 1, 0, 1, 0, -2],
    [3, 10, "trash", "free", 0, 0, 0, 0, -2],
    [3, 4, "measure", "free", 0, 0, 0, 0, -2],
    [3, 2, "switch", "free", 3, 0, 0, 0, -2],
    [4, 2, "rotate", "free", 1, 0, 0, 0, -2],
    [4, 2, "rotate", "free", 1, 3.141592653589793, 1, 0, -2],
    [3, 1, "trash", "free", 0, 0, 0, 0, -2],
    [3, 3, "cCombine", "free", 3, 0, 0, 0, -2],
    [2, 3, "delay", "free", 0, 0, 0, 7, -2],
    [6, 0, "measure", "free", 0, 0.7853981633974483, 0, 0, -2],
    [7, 2, "cInvert", "free", 0, 0, 0, 0, -2],
    [12, 1, "switch", "free", 2, 1, 0, 0, -2],
    [12, 0, "rotate", "free", 0, 0, 0, 0, -2],
    [12, 0, "rotate", "free", 0, 0.7853981633974483, 1, 0, -2],
    [9, 1, "rotate", "free", 1, 5.105088062083414, 0, 0, -2],
    [4, 5, "upgrade", "free", 2, 0.7853981633974483, 0, 0, -2],
    [2, 7, "measure", "free", 0, 3.9269908169872414, 0, 0, -2],
    [4, 7, "trash", "free", 0, 0, 0, 0, -2],
    [3, 6, "cSplit", "free", 1, 0, 0, 0, -2],
    [0, 2, "sync", "free", 3, 0, 0, 0, -2],
    [1, 2, "sync", "pretransform", 1, 0, 0, 0, -2],
    [1, 1, "cCreate", "free", 1, 0, 0, 0, -1],
    [4, 8, "cInvert", "free", 0, 0, 0, 0, -2],
  ];
  for (t = 0; t < o.length; t++) {
    var n = o[t].pop(),
      l = new Gate(...o[t]);
    (l.counterMax = n), IBOARD.setGate(l);
  }
  (RBOARD[0] = IBOARD.copy()), (RBOARD[1] = RBOARD[0].copy().updateOneStep());
}
function TutsOpen() {
  if (0 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 1: Bits, wires and outputs"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Bits (orange disks) travel along $$b:blue $$b:wires.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Qubits (green disks) travel along $$r:red $$r:wires.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Only a single bit or qubit can occupy a tile at any time.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " In most levels, the goal is to output a stream of bits or qubits that matches the desired outputs.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Typically you will be given instructions on how the desired output can be achieved.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 84, 2, 2, 5, 24, 22, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 2, 2, 11, 13, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 90, 24, 22, 33, 26, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 77, 23, 25, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 21, 3, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 54, 89, 26, -1, -1, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 116, 21, 53, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 50, 56, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 24, 22, 22, 22, 22, 91, 21, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, 21, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 22, 52, 52, 22, 26, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      var e = [
          [5, 1, 0, -1, "halt", 0, 0, !1],
          [5, 10, 1, -1, "freeze", 0, 0, !0],
          [0, 10, 3, -1, "halt", 0, 0, !1],
          [4, 3, 0, -1, "halt", 1, 0, !1],
          [5, 9, 1, 3, "halt", 0, 0, !0],
          [0, 12, 2, -1, "halt", 0, 0, !1],
          [5, 8, 1, 3, "halt", 0, 0, !0],
          [2, 12, 2, -1, "halt", 0, 0, !1],
          [1, 3, 3, -1, "halt", 0, 0, !1],
          [5, 7, 1, 3, "halt", 1, 0, !0],
          [3, 12, 2, -1, "flip", 0, 0, !1],
          [2, 5, 3, -1, "halt", 1, 0, !1],
          [5, 6, 2, -1, "halt", 0, 0, !0],
          [4, 12, 2, -1, "flip", 0, 0, !1],
          [6, 7, 3, -1, "halt", 1, 0, !0],
          [6, 12, 1, -1, "halt", 1, 0, !1],
          [1, 6, 0, -1, "wait", 1, 0, !1],
          [6, 8, 3, -1, "nullflip", 1, 0, !0],
          [6, 10, 1, -1, "halt", 1, 0, !1],
          [0, 6, 0, -1, "move", 0, 0, !1],
          [7, 9, 2, -1, "move", 1, 0, !1],
        ],
        t = 0;
      t < e.length;
      t++
    ) {
      var i = e[t].pop(),
        a = new Bit(...e[t]);
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    var r = [
      [3, 5, 2, -1, "halt", 0, !1],
      [5, 4, 1, -1, "halt", 1.1780972450961724, !1],
      [4, 2, 0, -1, "halt", 2.356194490192345, !1],
      [1, 2, 0, -1, "halt", 0, !1],
      [0, 3, 3, -1, "wait", -2.356194490192345, !1],
      [0, 4, 3, -1, "move", -2.748893571891069, !1],
    ];
    for (t = 0; t < r.length; t++) {
      i = r[t].pop();
      var s = new Qubit(...r[t]);
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    var o = [
      [0, 4, "qCreate", "free", 3, 2, 0, 0, -1],
      [0, 6, "cCreate", "free", 0, 2, 0, 0, -1],
      [1, 6, "delay", "transform", 0, 1, 0, 2, -1],
      [0, 3, "delay", "transform", 1, 1, 0, 2, -1],
      [6, 1, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
      [0, 1, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
      [6, 9, "cSplit", "free", 2, 0, 0, 0, -1],
      [7, 9, "cCreate", "free", 2, 2, 0, 0, -1],
      [5, 10, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      [6, 8, "cInvert", "transform", 1, 0, 0, 2, -1],
      [3, 12, "cInvert", "transform", 0, 0, 0, 0, -1],
      [4, 12, "cInvert", "transform", 0, 0, 0, 0, -1],
    ];
    for (t = 0; t < o.length; t++) {
      var n = o[t].pop(),
        l = new Gate(...o[t]);
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (1 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 2: Circuit Construction"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Wires are placed by $$d:left-click $$d:+ $$d:dragging once selected from the menu.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Wires (of matching color) can also be created by $$d:drag-clicking on a gate or existing wire.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$d:Right-click $$d:+ $$d:drag or use the $$d:eraser $$d:tool to destroy gates / wires.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " The orientation of a gate can be adjusted using $$d:mouse-scroll or $$d:arrow $$d:keys BEFORE placement.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " The properties/settings of a gate are adjusted by selecting the gate $$d:(left- $$d:click) AFTER placement.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$d:Hold $$d:shift $$d:+ $$d:left-click on an existing gate to copy.",
      ),
      (TUTORIAL.type = "fixed"),
      (TUTORIAL.nFrames = 7),
      (TUTORIAL.timePerTick = 400),
      (TUTORIAL.i0High = -1),
      (TUTORIAL.j0High = -1),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 8, 60, 10, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 116, 75, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 116, 75, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 75,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      o = [
        [4, 3, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 5, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 7, "qCreate", "free", 2, 0, 0, 0, -1],
        [4, 7, "qCreate", "free", 1, 0, 0, 0, -1],
        [1, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [3, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [5, 9, "qCreate", "free", 1, 2, 0, 0, 1],
        [2, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [4, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [5, 11, "qCreate", "free", 3, 2, 0, 0, 1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    (TUTORIAL.grab = {
      type: "qCreate",
      i0: 3,
      j0: 9,
      k0: UBOARD[0].getGate(3, 9),
    }),
      (UBOARD[1] = UBOARD[0].copy()),
      (UBOARD[2] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[2]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 8, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 8, 60, 10, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 116, 75, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 116, 75, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 75,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      o = [
        [4, 3, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 5, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 7, "qCreate", "free", 2, 0, 0, 0, -1],
        [4, 7, "qCreate", "free", 1, 0, 0, 0, -1],
        [1, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [3, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [5, 9, "qCreate", "free", 1, 2, 0, 0, 1],
        [2, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [4, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [5, 11, "qCreate", "free", 3, 2, 0, 0, 1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[2].setGate(l);
    }
    (UBOARD[3] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[3]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 8, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 10, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 116, 75, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 116, 75, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 75,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      o = [
        [4, 3, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 5, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 7, "qCreate", "free", 2, 0, 0, 0, -1],
        [4, 7, "qCreate", "free", 1, 0, 0, 0, -1],
        [1, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [3, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [5, 9, "qCreate", "free", 1, 2, 0, 0, 1],
        [2, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [4, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [5, 11, "qCreate", "free", 3, 2, 0, 0, 1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[3].setGate(l);
    }
    (UBOARD[4] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[4]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 8, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 8, 60, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 116, 75, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 116, 75, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 75,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      o = [
        [4, 3, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 7, "qCreate", "free", 2, 0, 0, 0, -1],
        [4, 7, "qCreate", "free", 1, 0, 0, 0, -1],
        [1, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [3, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [5, 9, "qCreate", "free", 1, 2, 0, 0, 1],
        [2, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [4, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [5, 11, "qCreate", "free", 3, 2, 0, 0, 1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[4].setGate(l);
    }
    (UBOARD[5] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[5]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 8, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 8, 60, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 116, 75, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 116, 75, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 116, 75, 75,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      o = [
        [4, 3, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 7, "qCreate", "free", 2, 0, 0, 0, -1],
        [4, 7, "qCreate", "free", 1, 0, 0, 0, -1],
        [1, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [3, 9, "qCreate", "free", 1, 0, 0, 0, -1],
        [5, 9, "qCreate", "free", 1, 2, 0, 0, 1],
        [2, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [4, 11, "qCreate", "free", 3, 2, 0, 0, 1],
        [5, 11, "qCreate", "free", 3, 2, 0, 0, 1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[5].setGate(l);
    }
    UBOARD[6] = UBOARD[5].copy();
  } else if (2 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 3: Gates"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates act to alter bits / qubits that move over them.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates with $$b:blue coloration (generally) act on bits.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates with $$r:red coloration (generally) act on qubits.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates with $$b:blue or $$r:red tabs must be connected to wires of the same color.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates with $$g:green tabs can be connected to wires of either color.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 22, 52, 22, 52, 22, 89, 56, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 84, 2, 68, 2, 62, 2, 89, 76, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 75, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 90, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 60, 2, 2, 2, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, 2, 2, 84, 22, 22, 89, 56, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      e = [
        [6, 2, 2, -1, "move", 0, 0, !1],
        [6, 10, 2, -1, "move", 0, 0, !1],
        [7, 2, 2, 0, "halt", 0, 0, !1],
        [7, 10, 2, 0, "halt", 1, 0, !1],
      ],
        t = 0;
      t < e.length;
      t++
    ) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [6, 4, 2, -1, "move", 0, !1],
        [0, 7, 1, -1, "move", 3.141592653589793, !1],
        [0, 11, 3, -1, "move", 3.141592653589793, !1],
        [7, 4, 2, 0, "halt", 0, !1],
        [0, 6, 1, 3, "halt", 0, !1],
        [0, 12, 3, 1, "halt", 3.141592653589793, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [0, 2, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 4, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 4, "delay", "reset", 0, 0, 0, 4, -1],
        [6, 2, "delay", "reset", 0, 0, 0, 4, -1],
        [7, 2, "cCreate", "free", 2, 0, 0, 0, -1],
        [7, 4, "qCreate", "free", 2, 0, 0, 0, -1],
        [4, 2, "cInvert", "free", 0, 0, 0, 0, -1],
        [2, 2, "cInvert", "free", 0, 0, 0, 1, -1],
        [2, 4, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 4, "rotate", "free", 0, 4.319689898685965, 0, 0, -1],
        [3, 8, "measure", "free", 0, 0, 0, 0, -1],
        [3, 6, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [7, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 7, "delay", "reset", 1, 0, 0, 4, -1],
        [0, 6, "qCreate", "free", 1, 1, 0, 0, -1],
        [0, 12, "qCreate", "free", 3, 1, 0, 0, -1],
        [0, 11, "delay", "reset", 1, 0, 0, 4, -1],
        [7, 10, "cCreate", "free", 2, 1, 0, 0, -1],
        [6, 10, "delay", "reset", 0, 0, 0, 4, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (3 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 4: Inversion and Re-zero Gates"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$b:Inversion $$b:gates act on bits to flip their state.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Inversion gates can be toggled to act as identity (i.e. to leave bits unchanged).",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$b:Re-zero $$b:gates act on bits to set them in the 0-state.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Re-zero gates can also be toggled to act as identity.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        24, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 23, 22, 22, 52, 22, 22, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 24, 22, 22, 52, 22, 22, 84, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 50, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 22, 52, 22, 22, 84, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 22, 52, 22, 22, 84, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 56, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      e = [
        [0, 4, 3, -1, "halt", 0, 0, !1],
        [0, 2, 1, -1, "halt", 1, 0, !1],
        [0, 10, 3, -1, "halt", 0, 0, !1],
        [0, 8, 1, -1, "halt", 0, 0, !1],
        [0, 5, 3, -1, "wait", 1, 0, !1],
        [0, 1, 1, -1, "wait", 1, 0, !1],
        [0, 11, 3, -1, "wait", 0, 0, !1],
        [0, 7, 1, -1, "wait", 1, 0, !1],
        [0, 6, 2, 1, "move", 0, 0, !1],
        [0, 0, 2, -1, "halt", 1, 0, !1],
        [0, 12, 2, -1, "halt", 1, 0, !1],
        [0, 6, 2, 3, "move", 0, 1, !1],
      ],
        t = 0;
      t < e.length;
      t++
    ) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (r = [], t = 0; t < r.length; t++) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [3, 2, "cInvert", "free", 0, 0, 0, 0, -1],
        [0, 1, "delay", "transform", 1, 0, 0, 3, -1],
        [6, 2, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 4, "cInvert", "free", 0, 1, 0, 0, -1],
        [0, 5, "delay", "transform", 1, 0, 0, 3, -1],
        [6, 4, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 8, "cInvert", "free", 0, 0, 0, 1, -1],
        [6, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 10, "cInvert", "free", 0, 1, 0, 1, -1],
        [6, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 6, "cSplit", "free", 2, 0, 0, 0, -1],
        [1, 6, "cCreate", "create", 2, 1, 0, 0, -1],
        [0, 7, "delay", "transform", 1, 0, 0, 3, -1],
        [0, 11, "delay", "transform", 1, 0, 0, 3, -1],
        [1, 0, "cCreate", "create", 2, 1, 0, 0, -1],
        [1, 12, "cCreate", "create", 2, 1, 0, 0, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (4 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 5: Combiner and Splitter Gates"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$b:Combiners merge up to three wires into a single output wire.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " If multiple bits/quibts are waiting to enter the same combiner then priority if given clockwise from the output direction.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Seperate versions of combiners are available for $$b:bits and for $$r:qubits.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$b:Splitters act to duplicate an input bit across multiple outputs.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Duplicate bits are only created when splitter outputs are connected to compatible wires or gates.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Splitters are not available for qubits (quantum theory forbids it!).",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        24, 89, 56, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 23, 22, 22, 25, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 24, 22, 22, 44, 22, 26, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 90, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 57, 4, 2, 66, 2, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, -1, 3, 2, 2, 5, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 55, 84, -1, -1, 74, 89, 6, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 90, -1, -1, 24, 22, 22, 84, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 23, 22, 22, 48, 22, 22, 84, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 22, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 22, 48, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, 23, 22, 22, 84, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      e = [
        [0, 0, 2, -1, "halt", 1, 0, !1],
        [0, 2, 3, -1, "halt", 0, 0, !1],
        [0, 8, 1, -1, "halt", 0, 0, !1],
        [0, 10, 3, -1, "halt", 0, 0, !1],
        [1, 0, 2, -1, "wait", 1, 0, !1],
        [0, 3, 3, -1, "wait", 0, 0, !1],
        [0, 7, 1, -1, "wait", 0, 0, !1],
        [0, 11, 3, -1, "wait", 1, 0, !1],
      ],
        t = 0;
      t < e.length;
      t++
    ) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [6, 4, 1, -1, "halt", -1.9634954084936214, !1],
        [6, 6, 0, -1, "halt", -2.356194490192345, !1],
        [6, 3, 1, -1, "wait", 2.356194490192345, !1],
        [5, 6, 0, -1, "wait", -1.9634954084936214, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [3, 4, "qCombine", "free", 2, 0, 0, 0, -1],
        [3, 2, "cCombine", "free", 0, 0, 0, 0, -1],
        [5, 0, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [1, 6, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 3, "delay", "transform", 1, 0, 0, 3, -1],
        [6, 2, "qCreate", "create", 1, 2, 0, 0, -1],
        [5, 6, "delay", "transform", 0, 0, 0, 3, -1],
        [4, 6, "qCreate", "create", 0, 2, 0, 0, -1],
        [1, 0, "delay", "transform", 0, 0, 0, 3, -1],
        [2, 0, "cCreate", "create", 2, 2, 0, 0, -1],
        [0, 3, "delay", "transform", 1, 0, 0, 3, -1],
        [0, 4, "cCreate", "create", 3, 2, 0, 0, -1],
        [3, 8, "cSplit", "free", 0, 0, 0, 0, -1],
        [6, 7, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 9, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 7, "delay", "transform", 1, 0, 0, 3, -1],
        [0, 6, "cCreate", "create", 1, 2, 0, 0, -1],
        [3, 10, "cSplit", "free", 0, 0, 0, 0, -1],
        [6, 11, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 11, "delay", "transform", 1, 0, 0, 3, -1],
        [0, 12, "cCreate", "create", 3, 2, 0, 0, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (5 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 6: Creation and Incineration"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Creation gates act to create new $$b:bits or $$r:qubits.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates can be configured to produce in $$d:fixed, $$d:alternating or $$d:random states.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates can be configured to produce indefinitely or to produce a finite number of outputs.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$g:Incinerators act to destroy bits and qubits.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Incinerators can be toggled to display their destroy count.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 22, 56, -1, 74, 2, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 84, 22, 56, -1, 74, 2, 84, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 84, 22, 56, -1, 74, 2, 84, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 54, 89, 25, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 75, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 26, -1, -1, 90, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 2, 6, -1, 4, 2, 6, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, 24, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, 21, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 89, 56, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      e = [
        [3, 6, 0, -1, "halt", 1, 0, !1],
        [3, 12, 2, -1, "halt", 1, 0, !1],
        [2, 6, 0, -1, "wait", 1, 0, !1],
        [4, 12, 2, -1, "wait", 1, 0, !1],
        [1, 2, 2, -1, "halt", 0, 0, !1],
        [1, 3, 2, -1, "halt", 0, 0, !1],
        [1, 4, 2, -1, "halt", 1, 0, !1],
      ],
        t = 0;
      t < e.length;
      t++
    ) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [0, 9, 3, -1, "halt", 0, !1],
        [6, 9, 1, -1, "halt", 1.1780972450961724, !1],
        [0, 10, 3, -1, "wait", -2.356194490192345, !1],
        [6, 8, 1, -1, "wait", -0.39269908169872486, !1],
        [5, 2, 0, -1, "halt", 0, !1],
        [5, 3, 0, -1, "halt", 0, !1],
        [5, 4, 0, -1, "halt", 2.748893571891069, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [2, 2, "cCreate", "create", 2, 0, 0, 0, 6],
        [2, 3, "cCreate", "create", 2, 1, 0, 0, 8],
        [2, 4, "cCreate", "create", 2, 2, 0, 0, -1],
        [4, 2, "qCreate", "create", 0, 0, 0, 0, 6],
        [4, 3, "qCreate", "create", 0, 1, 0, 0, 8],
        [4, 4, "qCreate", "create", 0, 2, 0, 0, -1],
        [6, 4, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 3, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 2, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 2, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 3, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 4, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [1, 6, "cCreate", "create", 0, 2, 0, 0, -1],
        [2, 6, "delay", "transform", 0, 0, 0, 3, -1],
        [0, 11, "qCreate", "create", 3, 2, 0, 0, -1],
        [0, 10, "delay", "transform", 1, 0, 0, 3, -1],
        [5, 12, "cCreate", "create", 2, 2, 0, 0, -1],
        [4, 12, "delay", "transform", 0, 0, 0, 3, -1],
        [6, 8, "delay", "transform", 1, 0, 0, 3, -1],
        [6, 7, "qCreate", "create", 1, 2, 0, 0, -1],
        [2, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 10, "trash", "free", 0, 0.7853981633974483, 0, 1, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (6 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 7: (Bit) Control Gates"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$b:Controls can actively alter the state of gates placed within their $$d:target ring depending on the bits input into the control.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " During construction the yellow $$d:switch icon can be used to toggle between 0-primed or 1-primed $$b:control states, and the $$d:target $$d:gate can be configured separately for each state.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " In the example to the left, the target gate directs bits to left after receiving a $$b:`0` $$b:control-bit   and to the top after receiving a     $$b:`1` $$b:control-bit.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Each time that the target gate is triggered the control returns to the unprimed state and must be re-primed before the target gate will reaccept bit/qubit entry.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 40, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 52, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 22, 22, 25, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 84, 22, 22, 25, -1, -1, 90, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 22, 22, 46, 22, 22, 26, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 22, 22, 42, 22, 22, 25, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      o = [
        [4, 1, "switch", "free", 0, 3, 0, 1, -1],
        [2, 4, "switch", "free", 0, 1, 0, 3, -1],
        [4, 4, "switch", "free", 0, 0, 0, 4, -1],
        [2, 5, "cInvert", "free", 0, 1, 0, 0, -1],
        [2, 5, "cInvert", "free", 0, 0, 1, 0, -1],
        [4, 5, "cInvert", "free", 0, 1, 0, 0, -1],
        [4, 5, "cInvert", "free", 0, 0, 1, 0, -1],
        [0, 9, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [0, 8, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [3, 10, "switch", "free", 2, 2, 0, 1, -1],
        [3, 9, "cCombine", "free", 2, 0, 0, 0, -1],
        [3, 9, "cCombine", "free", 3, 0, 1, 0, -1],
        [0, 10, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [6, 8, "delay", "transform", 1, 4, 0, 6, -1],
        [6, 12, "cCreate", "free", 3, 1, 0, 0, -1],
        [6, 11, "delay", "transform", 1, 1, 0, 6, -1],
        [3, 6, "cCreate", "free", 0, 2, 0, 0, -1],
      ],
        e = [
          [5, 10, 2, 0, "halt", 0, 0, !1],
          [6, 8, 1, -1, "wait", 0, 0, !1],
          [6, 11, 3, -1, "wait", 1, 0, !1],
          [6, 7, 1, 3, "halt", 1, 0, !1],
          [6, 6, 0, 3, "halt", 0, 0, !1],
          [5, 6, 0, 2, "halt", 1, 0, !1],
          [4, 6, 0, 2, "halt", 0, 0, !1],
          [6, 12, 3, 1, "move", 0, 0, !1],
        ],
        t = 0;
      t < e.length;
      t++
    ) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (t = 0; t < o.length; t++) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (7 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 8: Delay, Sync and BtQ Gates"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$g:Delay $$g:gates act to hold bits or qubits in place for a number of ticks (configurable between 0-80 ticks).",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$g:Sync $$g:gates are always placed in pairs. They will only allow passage when both halves of the pair are simultaneously occupied, otherwise bits / qubits will be held in place.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$g:Bit-to-qubit (BtQ) gates transform an incoming bit into an outgoing qubit.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " If the input bit is $$d:'0' state then the outgoing qubit will be $$d:aligned with the gate arrow, else if the input bit is $$d:'1' state the outgoing qubit will be $$d:anti-aligned.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 22, 22, 89, 22, 22, 89, 56, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 84, 2, 2, 80, 2, 2, 89, 89, 76, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 84, 22, 22, 82, 22, 22, 89, 56, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 24, 22, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 23, 22, 22, 85, 2, 2, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 22, 85, 2, 2, 84, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      e = [
        [3, 2, 2, -1, "wait", 0, 0, !1],
        [4, 5, 2, -1, "halt", 1, 0, !1],
        [0, 10, 3, -1, "halt", 1, 0, !1],
        [0, 8, 1, -1, "halt", 0, 0, !1],
        [6, 2, 2, -1, "wait", 1, 0, !1],
        [6, 5, 2, -1, "wait", 0, 0, !1],
        [0, 11, 3, -1, "wait", 1, 0, !1],
        [0, 7, 1, -1, "wait", 0, 0, !1],
        [0, 12, 3, -1, "flip", 0, 0, !1],
        [0, 6, 2, -1, "halt", 0, 0, !1],
        [7, 2, 2, 0, "halt", 0, 0, !1],
        [1, 6, 2, -1, "halt", 0, 0, !1],
        [7, 5, 2, -1, "move", 1, 0, !1],
      ],
        t = 0;
      t < e.length;
      t++
    ) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [6, 4, 2, -1, "wait", 0.3926990816987241, !1],
        [7, 4, 2, 0, "halt", -1.9634954084936211, !1],
        [8, 4, 2, 0, "halt", 1.1780972450961724, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [6, 2, "delay", "transform", 0, 2, 0, 3, -1],
        [3, 2, "delay", "transform", 0, 0, 0, 2, -1],
        [7, 2, "cCreate", "free", 2, 2, 0, 0, -1],
        [0, 2, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 4, "sync", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 5, "sync", "free", 2, 0, 0, 0, -2],
        [0, 5, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 4, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 4, "delay", "transform", 0, 3, 0, 4, -1],
        [6, 5, "delay", "transform", 0, 1, 0, 4, -1],
        [7, 5, "cCreate", "free", 2, 2, 0, 0, -1],
        [8, 4, "qCreate", "free", 2, 2, 0, 0, -1],
        [7, 4, "delay", "free", 0, 0, 0, 2, -1],
        [3, 8, "upgrade", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 10, "upgrade", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 7, "delay", "transform", 1, 0, 0, 3, -1],
        [0, 11, "delay", "transform", 1, 0, 0, 3, -1],
        [0, 12, "cInvert", "transform", 1, 0, 0, 0, -1],
        [0, 13, "cCreate", "create", 3, 0, 0, 0, -1],
        [6, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 6, "cCreate", "create", 2, 0, 0, 0, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (8 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 9: Intro to Qubits"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " An (unentangled) $$r:qubit is depicted as an arrow pointing to edge of a green disk. The ▲ and ▼ states are analogous to `0` and `1` bits.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " In general qubits can be at any angle Θ, although the Qubit Factory often only makes use of qubits at discrete angular increments of π/8.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " The outline color of a qubit denotes the sign of its wavefunction, with $$g:green $$g:for $$g:+ve and $$p:purple $$p:for $$p:-ve. Signs only become important when dealing with superpositions.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Rotation of a qubit through 2π (or 360°) changes its sign. Although weird, this is expected behavior!",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 116, -1, 116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 2, 62, 2, 62, 2, 89, 76, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      e = [],
        r = [
          [6, 10, 2, -1, "move", 0, !1],
          [7, 10, 2, 0, "halt", 0, !1],
          [2, 1, 2, 0, "halt", 0, !1],
          [4, 1, 2, 0, "halt", Math.PI, !1],
          [1, 4, 2, 0, "halt", (0 * Math.PI) / 8, !1],
          [2, 4, 2, 0, "halt", (1 * Math.PI) / 8, !1],
          [3, 4, 2, 0, "halt", (2 * Math.PI) / 8, !1],
          [4, 4, 2, 0, "halt", (3 * Math.PI) / 8, !1],
          [5, 4, 2, 0, "halt", (4 * Math.PI) / 8, !1],
          [1, 5, 2, 0, "halt", (5 * Math.PI) / 8, !1],
          [2, 5, 2, 0, "halt", (6 * Math.PI) / 8, !1],
          [3, 5, 2, 0, "halt", (7 * Math.PI) / 8, !1],
          [4, 5, 2, 0, "halt", (8 * Math.PI) / 8, !1],
          [5, 5, 2, 0, "halt", (9 * Math.PI) / 8, !1],
          [2, 8, 2, 0, "halt", (0 * Math.PI) / 8, !1],
          [4, 8, 2, 0, "halt", (0 * Math.PI) / 8, !1],
        ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i),
        15 === t &&
          ((s._ampsComp = [-1, 0]),
          (s._ampsRot = [-1, 0]),
          (s._ampsFinal = [-1, 0])),
        UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [7, 10, "qCreate", "free", 2, 0, 0, 0, -1],
        [0, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 10, "delay", "reset", 0, 0, 0, 5, -1],
        [2, 10, "rotate", "free", 0, 3.141592653589793, 0, 0, -1],
        [4, 10, "rotate", "free", 0, 3.141592653589793, 0, 0, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (9 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 10: Flip and Rotation Gates"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$r:Flip $$r:gates act to reflect qubits about a chosen axis.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Flip gates can be toggled to act instead as identity (i.e. qubits are unchanged).",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " The sign of the output changes depending on if the qubit is aligned or anti-aligned with the flip axis.",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$r:Rotation $$r:gates act to rotate qubits up to a half-turn in either direction (i.e. within range -π to π).",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Rotation gates act as identity if the rotation angle is set to zero.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 84, 2, 2, 68, 2, 2, 89, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 84, 2, 2, 68, 2, 2, 89, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 2, 2, 68, 2, 2, 87, 89, 56, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 2, 2, 68, 2, 2, 87, 89, 56, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 89, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 3, 2, 2, 62, 2, 2, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 4, 2, 2, 62, 2, 2, 84, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 77, 4, 2, 62, 2, 2, 84, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 3, 89, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (
      e = [
        [6, 4, 2, -1, "upgrade", 0, 0, !1],
        [6, 5, 2, -1, "upgrade", 0, 0, !1],
        [7, 4, 2, -1, "wait", 1, 0, !1],
        [7, 5, 2, -1, "wait", 1, 0, !1],
      ],
        t = 0;
      t < e.length;
      t++
    ) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [5, 1, 2, -1, "halt", -1.178097245096172, !1],
        [5, 2, 2, -1, "halt", 0, !1],
        [0, 6, 2, -1, "halt", -1.9634954084936211, !1],
        [0, 9, 3, -1, "halt", -0.7853981633974484, !1],
        [1, 12, 2, -1, "halt", -2.748893571891069, !1],
        [6, 1, 2, -1, "wait", -1.5707963267948966, !1],
        [6, 2, 2, -1, "wait", -2.356194490192345, !1],
        [1, 6, 2, -1, "wait", 0, !1],
        [0, 10, 3, -1, "wait", -1.9634954084936211, !1],
        [2, 12, 2, -1, "wait", -1.178097245096172, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [3, 5, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [3, 4, "qFlip", "free", 0, 4.71238898038469, 0, 0, -1],
        [0, 4, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 5, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 5, "upgrade", "transform", 2, 0.7853981633974483, 0, 0, -1],
        [6, 4, "upgrade", "transform", 2, 0.7853981633974483, 0, 0, -1],
        [7, 4, "delay", "transform", 0, 0, 0, 3, -1],
        [7, 5, "delay", "transform", 0, 0, 0, 3, -1],
        [8, 4, "cCreate", "create", 2, 1, 0, 0, -1],
        [8, 5, "cCreate", "create", 2, 1, 0, 0, -1],
        [3, 1, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 2, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -1],
        [7, 1, "qCreate", "create", 2, 2, 0, 0, -1],
        [7, 2, "qCreate", "create", 2, 2, 0, 0, -1],
        [0, 2, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 1, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 2, "delay", "transform", 0, 0, 0, 3, -1],
        [6, 1, "delay", "transform", 0, 0, 0, 3, -1],
        [3, 7, "rotate", "free", 0, 2.356194490192345, 0, 0, -1],
        [3, 9, "rotate", "free", 0, 4.71238898038469, 0, 0, -1],
        [1, 6, "delay", "transform", 0, 0, 0, 3, -1],
        [0, 10, "delay", "transform", 1, 0, 0, 3, -1],
        [2, 6, "qCreate", "create", 2, 2, 0, 0, -1],
        [0, 11, "qCreate", "create", 3, 2, 0, 0, -1],
        [6, 7, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 9, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 11, "rotate", "free", 0, 0, 0, 0, -1],
        [6, 11, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 12, "delay", "transform", 0, 0, 0, 3, -1],
        [3, 12, "qCreate", "create", 2, 2, 0, 0, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (10 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 11: Measurements"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$r:Measurements produce output qubits either aligned or anti-aligned with the measurment axis.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " The probability for each outcome depends on the angle Θ between the head of the measurement and the head of the qubit (align prob = cos²(Θ/2), anti-align prob = sin²(Θ/2)).",
      ),
      TUTORIAL.info.push(" "),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Input qubits that are already aligned / anti-aligned with the measurement remain unchanged.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Classical bits corresponding to the measurement outcome (`0` for aligned, `1` for anti-aligned) are output if the $$b:blue tabs are connected to compatible wires or gates.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (SCENARIO.text0 = { i0: 3, j0: 1.25, text: "prob: 0.85" }),
      (SCENARIO.text1 = { i0: 3, j0: 4.75, text: "prob: 0.15" }),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        4, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 90, -1, 0, 116, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 3, 2, 2, 60, 2, 2, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 0, 116, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 4, 2, 2, 60, 2, 2, 84, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, 24, 22, 22, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, 2, 2, 60, 2, 2, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, 23, 22, 22, 84, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (e = [], t = 0; t < e.length; t++) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [0, 3, 1, -1, "halt", 0, !1],
        [2, 10, 0, -1, "halt", 0.7853981633974484, !1],
        [2, 7, 0, -1, "halt", 0, !1],
        [0, 2, 1, -1, "wait", 0, !1],
        [0, 11, 3, -1, "wait", -1.9634954084936211, !1],
        [0, 8, 3, -1, "wait", 3.141592653589793, !1],
        [0, 1, 1, -1, "halt", 0, !1],
        [0, 0, 2, -1, "halt", 0, !1],
        [0, 12, 3, 1, "halt", 1.1780972450961724, !1],
        [0, 9, 3, 1, "halt", 0, !1],
        [4, 2, 1, -1, "halt", Math.PI / 4, !1],
        [4, 4, 1, -1, "halt", (5 * Math.PI) / 4, !1],
        [2, 2, 1, -1, "halt", 0, !1],
        [2, 4, 1, -1, "halt", 0, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [6, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 9, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [1, 0, "qCreate", "create", 2, 0, 0, 0, -1],
        [0, 12, "qCreate", "free", 3, 2, 0, 0, -1],
        [0, 11, "delay", "transform", 1, 2, 0, 3, -1],
        [3, 10, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 11, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 7, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 7, "measure", "free", 0, 0, 0, 0, -1],
        [0, 9, "qCreate", "free", 3, 1, 0, 0, -1],
        [0, 8, "delay", "transform", 1, 2, 0, 3, -1],
        [3, 3, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 3, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 2, "delay", "transform", 1, 0, 0, 3, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (11 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 12: Qubit Control Gates"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$r:Qubit $$r:control $$r:gates affect the action of the (flip or rotate) gate placed within their $$d:target $$d:ring based on the state of the control qubit.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " If the control qubit and gate are aligned then the target gate acts as the identity (i.e. no action), else if they are anti-aligned the target gate acts normally.",
      ),
      TUTORIAL.info.push(""),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Gates will hold a control/target qubit in place until both are occupied simultaneously.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " If the control qubit is neither aligned nor anti-aligned with the control gate then an $$d:entangled $$d:state can be produced (see qubit superpositions / entangled states).",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (SCENARIO.text0 = { i0: 3, j0: 2.5, text: " aligned" }),
      (SCENARIO.text1 = { i0: 3, j0: 3.5, text: "anti-aligned" }),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 84, 2, 68, 2, 62, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 84, 2, 72, 2, 72, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 2, 70, 2, 70, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 2, 68, 2, 62, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 84, 2, 2, 70, 2, 2, 89, 76, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 84, 2, 2, 68, 2, 2, 89, 76, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 84, 2, 2, 70, 2, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 84, 2, 2, 68, 2, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1,
      ]);
    for (e = [], t = 0; t < e.length; t++) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [0, 1, 2, -1, "delete", 0, !1],
        [0, 2, 2, -1, "delete", 0, !1],
        [0, 4, 2, -1, "delete", 3.141592653589793, !1],
        [0, 5, 2, -1, "delete", 0, !1],
        [3, 1, 2, -1, "halt", 0, !1],
        [3, 2, 2, -1, "halt", 0, !1],
        [3, 4, 2, -1, "halt", 3.141592653589793, !1],
        [3, 5, 2, -1, "halt", 3.141592653589793, !1],
        [6, 1, 2, -1, "move", 0, !1],
        [6, 2, 2, -1, "move", 0, !1],
        [6, 4, 2, -1, "move", 3.141592653589793, !1],
        [6, 5, 2, -1, "move", 0, !1],
        [7, 1, 2, 0, "halt", 0, !1],
        [7, 2, 2, 0, "halt", 0, !1],
        [7, 4, 2, 0, "halt", 3.141592653589793, !1],
        [7, 5, 2, 0, "halt", 0, !1],
        [3, 7, 2, -1, "wait", 0, !1],
        [6, 8, 2, -1, "move", 3.141592653589793, !1],
        [6, 10, 2, -1, "move", 1.5707963267948966, !1],
        [6, 11, 2, -1, "move", 0, !1],
        [6, 7, 2, -1, "move", 0, !1],
        [7, 8, 2, 0, "halt", 0, !1],
        [7, 10, 2, 0, "halt", 1.5707963267948966, !1],
        [7, 11, 2, 0, "halt", 0, !1],
        [8, 1, 2, 0, "halt", 0, !1],
        [8, 2, 2, 0, "halt", 0, !1],
        [8, 4, 2, 0, "halt", 0, !1],
        [8, 5, 2, 0, "halt", 0, !1],
        [8, 10, 2, 0, "halt", 0, !1],
        [8, 11, 2, 0, "halt", 0, !1],
        [7, 7, 2, 0, "halt", 0, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [2, 2, "qControl", "free", 2, 0, 0, 0, -1],
        [4, 2, "qControl", "free", 2, 0, 0, 0, -1],
        [2, 1, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 1, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [4, 1, "rotate", "free", 0, 3.141592653589793, 0, 0, -1],
        [4, 1, "rotate", "free", 0, 0.7853981633974483, 1, 0, -1],
        [2, 4, "qControl", "free", 0, 0, 0, 0, -1],
        [4, 4, "qControl", "free", 0, 0, 0, 0, -1],
        [4, 5, "rotate", "free", 0, 3.141592653589793, 0, 0, -1],
        [4, 5, "rotate", "free", 0, 0.7853981633974483, 1, 0, -1],
        [2, 5, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 5, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [0, 5, "trash", "transform", 0, 0.7853981633974483, 0, 0, -1],
        [0, 4, "trash", "transform", 0, 0.7853981633974483, 0, 0, -1],
        [0, 2, "trash", "transform", 0, 0.7853981633974483, 0, 0, -1],
        [0, 1, "trash", "transform", 0, 0.7853981633974483, 0, 0, -1],
        [6, 1, "delay", "reset", 0, 0, 0, 3, -1],
        [6, 2, "delay", "reset", 0, 0, 0, 3, -1],
        [6, 4, "delay", "reset", 0, 0, 0, 3, -1],
        [6, 5, "delay", "reset", 0, 0, 0, 3, -1],
        [8, 1, "qCreate", "free", 2, 0, 0, 0, -1],
        [8, 2, "qCreate", "free", 2, 0, 0, 0, -1],
        [8, 4, "qCreate", "free", 2, 0, 0, 0, -1],
        [8, 5, "qCreate", "free", 2, 0, 0, 0, -1],
        [7, 4, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [7, 2, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -1],
        [7, 1, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -1],
        [7, 5, "qFlip", "free", 0, 1.5707963267948966, 0, 1, -1],
        [3, 7, "qControl", "pretransform", 0, 0, 0, 0, -1],
        [6, 7, "delay", "reset", 0, 0, 0, 2, -1],
        [6, 8, "delay", "reset", 0, 0, 0, 5, -1],
        [7, 7, "qCreate", "free", 2, 1, 0, 0, -1],
        [7, 8, "qCreate", "free", 2, 1, 0, 0, -1],
        [0, 7, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 8, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 8, "qFlip", "free", 0, 1.5707963267948966, 1, 0, -1],
        [3, 10, "qControl", "free", 0, 0, 0, 0, -1],
        [8, 10, "qCreate", "free", 2, 0, 0, 0, -1],
        [6, 10, "delay", "reset", 0, 0, 0, 3, -1],
        [7, 10, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 11, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [3, 11, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [3, 11, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [8, 11, "qCreate", "free", 2, 0, 0, 0, -1],
        [7, 11, "qFlip", "free", 0, 1.5707963267948966, 0, 1, -1],
        [6, 11, "delay", "reset", 0, 0, 0, 3, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (12 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 13: Qubit Superpositions"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " A single $$r:qubit aligned along an axis can be equivalently represented as a weighted sum (or superposition) of qubits aligned along a different axis. The choice of axis is called the $$d:basis.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " As an analogy, this is similar to how single color can be represented as a mixture of two other colors.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " In game, a superposition is shown by a qubit `blinking` through states. The $$d:magnitude of each component is denoted by the dash-length of its border, while the $$d:sign is denoted by color (green +ve / purple -ve).",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Although the $$d:global sign of a state is insignificant, the $$d:relative sign between components is significant.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = new Array(FIELD.cols * FIELD.rows).fill(-1));
    for (e = [], t = 0; t < e.length; t++) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (o = [], t = 0; t < o.length; t++) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (13 === TUTORIAL.current) {
    (TUTORIAL.title = "Handbook 14: Entangled States"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " $$d:Entangled $$d:states can only be produced from unentangled qubits through use of $$r:quantum $$r:control gates. Entangled states of many qubits can be formed through use of multiple quantum control gates.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Entanglement is indicated via a translucent blob surrounding qubits. Qubits that are entangled together possess the same colored blob!",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " Entanglement is removed from any qubit that is measured; however the $$d:OTHER qubits that were entangled also change in response to the measurement result (see Wavefunction Collapse). It follows that measurements of entangled states can exhibit $$d:correlations not possible in non-entangled qubits.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 2, 62, 2, 70, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 2, 70, 2, 68, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 84, 2, 68, 2, 62, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 4, 2, 2, 2, 2, 2, 84, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 3, 2, 2, 70, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 4, 60, 2, 68, 2, 89, 68, 76, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 84, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
      ]);
    for (e = [], t = 0; t < e.length; t++) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (
      r = [
        [6, 2, 2, -1, "move", 1.5707963267948966, !1],
        [6, 4, 2, -1, "move", 0, !1],
        [6, 3, 2, -1, "move", 0, !1],
        [6, 8, 2, -1, "move", 1.5707963267948966, !1],
        [6, 9, 2, -1, "move", 0, !1],
        [7, 2, 2, 0, "halt", 1.5707963267948966, !1],
        [7, 4, 2, 0, "halt", 0, !1],
        [7, 3, 2, 0, "halt", 0, !1],
        [7, 8, 2, 0, "halt", 1.5707963267948966, !1],
        [7, 9, 2, 0, "halt", 0, !1],
        [8, 2, 2, 0, "halt", 0, !1],
        [8, 4, 2, 0, "halt", 0, !1],
        [8, 3, 2, 0, "halt", 0, !1],
        [8, 8, 2, 0, "halt", 0, !1],
        [8, 9, 2, 0, "halt", 0, !1],
      ],
        t = 0;
      t < r.length;
      t++
    ) {
      (i = r[t].pop()), (s = new Qubit(...r[t]));
      (s.isGhost = i), UBOARD[0].setQubit(s);
    }
    for (
      o = [
        [0, 4, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 2, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [8, 2, "qCreate", "free", 2, 0, 0, 0, -1],
        [8, 4, "qCreate", "free", 2, 0, 0, 0, -1],
        [6, 2, "delay", "reset", 0, 0, 0, 5, -1],
        [6, 4, "delay", "reset", 0, 0, 0, 5, -1],
        [8, 3, "qCreate", "free", 2, 0, 0, 0, -1],
        [0, 3, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 3, "delay", "reset", 0, 0, 0, 5, -1],
        [4, 2, "qControl", "free", 0, 0, 0, 0, -1],
        [2, 3, "qControl", "free", 0, 0, 0, 0, -1],
        [7, 2, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 3, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [4, 3, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [2, 4, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 4, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [4, 4, "rotate", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 2, "rotate", "free", 0, 0.7853981633974483, 0, 0, -1],
        [7, 3, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -1],
        [7, 4, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -1],
        [4, 8, "qControl", "free", 0, 0, 0, 0, -1],
        [8, 8, "qCreate", "free", 2, 0, 0, 0, -1],
        [7, 8, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [6, 8, "delay", "reset", 0, 0, 0, 5, -1],
        [6, 9, "delay", "reset", 0, 0, 0, 5, -1],
        [7, 9, "qFlip", "free", 0, 0.7853981633974483, 0, 1, -1],
        [8, 9, "qCreate", "free", 2, 0, 0, 0, -1],
        [4, 9, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [4, 9, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [2, 9, "measure", "free", 0, 0.7853981633974483, 0, 0, -1],
        [7, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [7, 7, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
      ],
        t = 0;
      t < o.length;
      t++
    ) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    var h = new Entangled(3);
    h.setQubits([
      new Qubit(2, 11, 0, 2, "halt", 0),
      new Qubit(3, 11, 0, 2, "halt", 0),
      new Qubit(4, 11, 0, 2, "halt", 0),
    ]),
      (h.ampsComp = [0.5, 0, 0, -0.5, 0, 0.5, 0, 0.5]),
      h.computeRotAmps(),
      h.computeAllEnts(),
      UBOARD[0].setEntGroup(h),
      (UBOARD[1] = UBOARD[0].copy().updateOneStep());
  } else if (14 === TUTORIAL.current) {
    SVG.tutorialB.activate(),
      (SVG.tutorialB.svg.style.zIndex = "31"),
      (TUTORIAL.title = "Handbook 15: State Analyzer"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        "The $$d:state $$d:analyzer, which appears when clicking on a qubit while the factory is paused, provides details about a qubit or entangled state including:",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " the $$d:amplitudes in each of the basis states (together with the ability to alter each qubit basis).",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " the $$d:entanglement $$d:entropy of each qubit; this is a measure of its entanglement on a scale of 0-1.",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " the $$d:expected $$d:results of a single qubit measurement in a specified basis.",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = new Array(FIELD.cols * FIELD.rows).fill(-1));
    for (e = [], t = 0; t < e.length; t++) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (o = [], t = 0; t < o.length; t++) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else if (15 === TUTORIAL.current) {
    SVG.tutorialB.activate(),
      (SVG.tutorialB.svg.style.zIndex = "31"),
      (TUTORIAL.title = "Handbook 16: Wavefunction Collapse"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " When a qubit from an entangled state is measured the remaining qubits collapse into a new state (that depends on the measurement outcome of the first qubit). The new state can be predicted using the state analyzer (by clicking on the $$d:orange $$d:buttons below each qubit).",
      ),
      TUTORIAL.info.push("In the examples on the left:"),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " If qubit-1 is found in state " +
          String.fromCharCode(9650) +
          " after measurement then qubit-2 will collapse into an even superposition, (" +
          String.fromCharCode(9654) +
          " + " +
          String.fromCharCode(9664) +
          ").",
      ),
      TUTORIAL.info.push(
        String.fromCharCode(8226) +
          " If qubit-1 is found in state " +
          String.fromCharCode(9660) +
          " after measurement then qubit-2 will collapse into an odd superposition, (" +
          String.fromCharCode(9654) +
          " - " +
          String.fromCharCode(9664) +
          ").",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[0]._tiles = new Array(FIELD.cols * FIELD.rows).fill(-1));
    for (e = [], t = 0; t < e.length; t++) {
      (i = e[t].pop()), (a = new Bit(...e[t]));
      (a.isGhost = i), UBOARD[0].setBit(a);
    }
    for (o = [], t = 0; t < o.length; t++) {
      (n = o[t].pop()), (l = new Gate(...o[t]));
      (l.counterMax = n), UBOARD[0].setGate(l);
    }
    UBOARD[1] = UBOARD[0].copy().updateOneStep();
  } else
    16 === TUTORIAL.current &&
      ((TUTORIAL.title = "Handbook 0: Controls Reference"),
      (TUTORIAL.info = []),
      TUTORIAL.info.push(
        "Game Controls (during construction phase):                   ---------------------------------------------------------------",
      ),
      TUTORIAL.info.push(" Select, place, interact with objects: $$d:LMB. "),
      TUTORIAL.info.push(
        " Erase objects: $$d:RMB $$d:(or $$d:`E` $$d:key $$d:then $$d:LMB). ",
      ),
      TUTORIAL.info.push(
        " Rotate gate (while placing): $$d:Mouse-scroll $$d:(or $$d:◀/► $$d:keys). ",
      ),
      TUTORIAL.info.push(
        " Toggle control-gate states: $$d:Double-click $$d:(or $$d:ALT/OPT-click).",
      ),
      TUTORIAL.info.push(
        " Copy gate(s): $$d:SHIFT+LMB $$d:(+drag $$d:to $$d:select $$d:larger $$d:region). ",
      ),
      TUTORIAL.info.push(
        " Cut gate(s): $$d:CTRL/CMD+LMB $$d:(+drag $$d:to $$d:select $$d:larger $$d:region). ",
      ),
      TUTORIAL.info.push(
        " Undo/redo last action: $$d:`Z` $$d:/ $$d:`X` $$d:keys. ",
      ),
      TUTORIAL.info.push(
        " Select last/next available gate from menu: $$d:`Q` $$d:/ $$d:`W` $$d:keys. ",
      ),
      TUTORIAL.info.push(
        " Gate hotkeys (rows 1,2,3): $$d:[1-6], $$d:SHIFT+[1-6], $$d:CTRL+[1-6].",
      ),
      TUTORIAL.info.push(" Copy factory layout to clipboard: $$d:CTRL+C. "),
      TUTORIAL.info.push(
        " Paste factory from clipboard: $$d:CTRL+V $$d:(N/A $$d:for $$d:Firefox). ",
      ),
      (TUTORIAL.type = "free"),
      (TUTORIAL.timePerTick = 800),
      (TUTORIAL.grab = 0),
      (TUTORIAL.basis = OPTS.basis),
      (OPTS.basis = "natural"),
      (SCENARIO.channelsCol = [0, 0, 0, 0, 0, 0]),
      (UBOARD[0] = new Board(CANV.tutorialGates.ctx, 19, 14)),
      (UBOARD[1] = UBOARD[0].copy().updateOneStep()));
}
