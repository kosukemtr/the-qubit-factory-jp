function LevelGates(e, t, i) {
  var a = !1,
    r = [],
    s = [],
    o = [];
  if (((solution = !1), void 0 === i && (i = STATE.blueprint), "tut1" === e)) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", -2.7488935718910694, !1],
        [18, 4, 1, 3, "halt", -2.7488935718910694, !0],
        [0, 10, 3, 1, "move", -1.1780972450961722, !1],
        [18, 3, 1, 3, "halt", -1.1780972450961722, !0],
        [0, 11, 3, 1, "move", 2.356194490192345, !1],
        [18, 2, 1, 3, "halt", 2.356194490192345, !0],
        [0, 12, 3, 1, "move", 1.5707963267948966, !1],
        [18, 1, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 13, 3, 1, "move", -1.5707963267948968, !1],
        [18, 0, 1, 3, "halt", -1.5707963267948968, !0],
      ]);
    var n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ],
      l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
      ];
  } else if ("tut2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 4, 1, 3, "halt", 0, !0],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", -0.39269908169872486, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 2, 1, 3, "halt", 0, !0],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [18, 1, 1, 3, "halt", -1.1780972450961722, !0],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
        [18, 0, 1, 3, "halt", -2.356194490192345, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, 62, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, -1.5707963267948968, 0, 2, -1],
        [4, 8, "rotate", "free", 0, -1.5707963267948966, 0, 0, -1],
        [4, 5, "cInvert", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("tut3" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 1, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 2, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [18, 1, 1, 3, "halt", 0.3926990816987241, !0],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
        [18, 0, 1, 3, "halt", -0.7853981633974486, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, 22, 22, 22, 52, 22, 22, 22, 25, 4, 2, 2, 2, 2, 2,
        2, 2, 2, 78, -1, -1, -1, -1, -1, -1, -1, 4, 13, 6, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 4, 2, 2, 2, 62, 2, 2, 6, 23, 22, 22, 22, 22, 22, 22,
        22, 22, 22, 94, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [4, 8, "rotate", "free", 0, -1.5707963267948966, 0, 0, -1],
        [4, 5, "cInvert", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("tut4" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 1, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 2, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [18, 1, 1, 3, "halt", 0.3926990816987241, !0],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
        [18, 0, 1, 3, "halt", -0.7853981633974486, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 23, 22, 22, 22, 22, 22, 25, -1, -1, -1, -1, -1, 4, 2,
        2, 2, 2, 2, 78, -1, -1, 4, 2, 5, -1, 53, -1, -1, -1, -1, -1, 1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, 63, -1, -1, -1, -1, -1, -1, -1, 1, -1,
        -1, -1, -1, -1, -1, 4, 2, 6, -1, -1, -1, 53, 24, 22, 22, 22, 22, 12, 22,
        22, 22, 22, 22, 94, 1, -1, -1, -1, 63, -1, 23, 26, -1, -1, -1, -1, 1,
        -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 6, -1,
        -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 21, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 9],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 9],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [4, 7, "rotate", "free", 1, 1.5707963267948966, 0, 0, -1],
        [4, 9, "rotate", "free", 1, 0.7853981633974483, 0, 0, -1],
        [6, 6, "cInvert", "free", 1, 0, 0, 0, -1],
        [6, 8, "cInvert", "free", 1, 0, 0, 0, -1],
      ]);
  } else if ("tut5" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 0, 1, 3, "move", 1, 0, !1],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 0, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [0, 10, 3, 1, "move", 1.1780972450961724, !1],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [0, 12, 3, 1, "move", 0.3926990816987241, !1],
        [0, 13, 3, 1, "move", -0.7853981633974486, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 23, 22, 22, 22, 22, 22, 25, -1, -1, -1, -1, -1, 4,
        2, 2, 2, 2, 10, -1, -1, -1, 4, 2, 5, -1, 53, -1, -1, -1, -1, -1, 1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, -1, 63, -1, 53, -1, -1, -1, -1, -1, 1,
        -1, -1, -1, -1, -1, -1, 4, 2, 6, -1, 63, -1, 53, 24, 22, 22, 22, 22, 12,
        22, 22, 22, 22, 30, -1, 1, -1, -1, -1, 63, -1, 23, 26, -1, -1, -1, -1,
        1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 6, -1,
        -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 9],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 9],
        [4, 7, "rotate", "free", 1, 1.5707963267948966, 0, 0, -1],
        [4, 9, "rotate", "free", 1, 0.7853981633974483, 0, 0, -1],
        [6, 6, "cInvert", "free", 1, 0, 0, 0, -1],
        [6, 8, "cInvert", "free", 1, 0, 0, 0, -1],
        [4, 8, "rotate", "free", 1, 3.9269908169872414, 0, 0, -1],
        [6, 7, "cInvert", "free", 1, 1, 0, 0, -1],
      ]);
  } else if ("tut6" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (o = []);
    if (2 === i)
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 54, 40, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 24, 52, 40, 89, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 44, 22, 47, 22, 52, 22, 44, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 54, 42, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
        (l = [
          [0, 0, "cCreate", "free", 1, 0, 0, 1, 24],
          [18, 0, "cCreate", "free", 1, 1, 0, 2, 24],
          [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
          [13, 8, "cCreate", "free", 0, 1, 0, 0, -1],
          [14, 8, "switch", "free", 0, 1, 0, 1, -1],
          [15, 8, "trash", "free", 0, 0.785398163397, 0, 0, -1],
          [14, 9, "cInvert", "free", 0, 1, 0, 0, -1],
          [14, 9, "cInvert", "free", 0, 0, 1, 0, -1],
          [15, 9, "switch", "free", 0, 1, 0, 1, -1],
          [16, 9, "delay", "free", 0, 0, 0, 3, -1],
          [11, 10, "cCombine", "free", 0, 0, 0, 0, -1],
          [13, 10, "cCombine", "free", 0, 0, 0, 0, -1],
          [13, 10, "cCombine", "free", 3, 0, 1, 0, -1],
          [15, 10, "cInvert", "free", 0, 1, 0, 0, -1],
          [15, 10, "cInvert", "free", 0, 0, 1, 0, -1],
          [17, 10, "cCombine", "free", 0, 0, 0, 0, -1],
          [12, 11, "cCreate", "free", 0, 1, 0, 0, -1],
          [13, 11, "switch", "free", 2, 1, 0, 1, -1],
          [14, 11, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        ]);
    else
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
        (l = [
          [0, 0, "cCreate", "free", 1, 0, 0, 1, 24],
          [18, 0, "cCreate", "free", 1, 1, 0, 2, 24],
          [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        ]);
  } else if ("class1" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 24],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 24],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("class2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, -1, "halt", 0, 0, !1],
      [0, 8, 3, -1, "halt", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 1, 1, -1, "halt", 1, 0, !1],
      [0, 12, 3, -1, "halt", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 9, 3, 1, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [1, 0, 2, -1, "wait", 1, 0, !1],
      [1, 13, 2, -1, "wait", 0, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [18, 0, 1, 3, "halt", 0, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        24, 89, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 23, 89, 56, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [1, 13, "delay", "transform", 0, 0, 0, 3, -1],
        [1, 0, "delay", "transform", 0, 0, 0, 3, -1],
        [2, 0, "cCreate", "free", 2, 0, 0, 1, 12],
        [2, 13, "cCreate", "free", 2, 1, 0, 1, 12],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 24],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 2, 0, 2, 24],
      ]);
  } else if ("class3" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 1, 0, !1],
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [0, 9, 3, 1, "move", 0, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 1, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [0, 11, 3, 1, "move", 1, 0, !1],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 0, 0, !1],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [0, 13, 3, 1, "move", 0, 0, !1],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 44],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("class4" === e) {
    a = !0;
    (s = [
      [0, 8, 3, -1, "halt", 0, 0, !1],
      [18, 5, 1, 4, "move", 1, 0, !0],
      [0, 4, 1, -1, "halt", 1, 0, !1],
      [0, 12, 3, -1, "halt", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, -1, "halt", 1, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 0, 2, -1, "halt", 1, 0, !1],
      [1, 13, 2, -1, "wait", 0, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 1, 1, -1, "halt", 1, 0, !0],
      [18, 0, 1, -1, "halt", 0, 0, !0],
    ]),
      (n = [
        24, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 89, 56, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [2, 13, "cCreate", "free", 2, 1, 0, 1, 22],
        [1, 13, "delay", "transform", 0, 1, 0, 3, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 44],
        [1, 0, "cCreate", "free", 2, 0, 0, 1, 22],
      ]);
  } else if ("class5" === e) {
    a = !0;
    (s = [
      [0, 8, 3, 2, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 0, 0, !1],
      [0, 10, 3, 1, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 6],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 6],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 18],
      ]);
  } else if ("class6" === e) {
    a = !0;
    (s = [
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 9, 3, 1, "halt", 0, 0, !0],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 24],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 24],
      ]);
  } else if ("class7" === e) {
    a = !0;
    (s = [
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 5, 1, 2, "move", 1, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 10, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 12, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
      [0, 0, 2, 3, "move", 0, 0, !1],
      [18, 0, 0, 3, "halt", 0, 0, !0],
      [1, 0, 2, 0, "move", 1, 0, !1],
      [17, 0, 0, 2, "halt", 1, 0, !0],
      [2, 0, 2, 0, "move", 1, 0, !1],
      [16, 0, 0, 2, "halt", 1, 0, !0],
      [3, 0, 2, 0, "move", 0, 0, !1],
      [4, 0, 2, 0, "move", 1, 0, !1],
      [5, 0, 2, 0, "move", 1, 0, !1],
      [6, 0, 2, 0, "move", 0, 0, !1],
      [7, 0, 2, 0, "move", 0, 0, !1],
      [8, 0, 2, 0, "move", 0, 0, !1],
    ]),
      (n = [
        24, 22, 22, 22, 22, 22, 22, 22, 56, -1, -1, -1, -1, -1, -1, -1, 54, 22,
        25, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 26],
        [8, 0, "cCreate", "free", 2, 0, 0, 1, 26],
        [16, 0, "cCreate", "free", 0, 0, 0, 2, 0],
      ]);
  } else if ("classPuzzle1" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 8, 3, -1, "freeze", 1, 0, !0],
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 23, 89, 57, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 97],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [2, 13, "cCreate", "free", 2, 1, 0, 1, 97],
        [1, 13, "delay", "free", 0, 0, 0, 5, -1],
      ]);
  } else if ("classPuzzle2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, 94],
      ]);
  } else if ("classPuzzle3" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, 94],
      ]);
  } else if ("classPuzzle3B" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 3, 0, 2, 94],
      ]);
  } else if ("classPuzzle4" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 44],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("classPuzzle5" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 0, 1, 3, "move", 1, 0, !1],
    ]),
      (o = []),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 54],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 36],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 13, "cCreate", "free", 3, 2, 0, 2, 18],
      ]);
  } else if ("classPuzzle6" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 1, 0, !1],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 494],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 494],
        [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        [6, 12, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 11, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 10, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 9, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 7, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 8, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 6, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 5, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 4, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 3, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 2, "cInvert", "free", 0, 0, 0, 3, -1],
        [6, 1, "cInvert", "free", 0, 0, 0, 3, -1],
      ]);
  } else if ("classPuzzle7" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 8, 3, -1, "freeze", 0, 0, !0],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 0, 0, !1],
      [18, 9, 3, 1, "halt", 1, 0, !0],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 10, 3, 1, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [18, 11, 3, 1, "halt", 1, 0, !0],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [18, 12, 3, 1, "halt", 0, 0, !0],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 1, 0, !1],
      [18, 13, 3, 1, "halt", 0, 0, !0],
      [18, 0, 1, 3, "halt", 1, 0, !0],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 24, 91, -1, 23, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 44, 26, -1, -1, 24, 44, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 44, 25, -1, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 23, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 44],
        [18, 13, "cCreate", "free", 3, 0, 0, 2, 44],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, 44],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [2, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [2, 7, "cCombine", "free", 0, 0, 0, 1, -1],
        [16, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [16, 7, "cCombine", "free", 0, 0, 0, 1, -1],
      ]);
  } else if ("classPuzzle8" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 5, 1, 2, "halt", 0, 0, !1],
      [0, 8, 3, 2, "halt", 0, 0, !1],
      [0, 4, 1, 3, "halt", 0, 0, !1],
      [0, 9, 3, 1, "halt", 0, 0, !1],
      [0, 3, 1, 3, "halt", 0, 0, !1],
      [0, 10, 3, 1, "halt", 0, 0, !1],
      [0, 2, 1, 3, "halt", 0, 0, !1],
      [0, 11, 3, 1, "halt", 0, 0, !1],
      [0, 1, 1, 3, "halt", 0, 0, !1],
      [0, 12, 3, 1, "halt", 0, 0, !1],
      [0, 0, 2, 3, "halt", 0, 0, !1],
      [0, 13, 2, 1, "halt", 0, 0, !1],
      [1, 0, 2, 0, "halt", 0, 0, !1],
      [1, 13, 2, 0, "halt", 0, 0, !1],
      [2, 0, 2, 0, "halt", 0, 0, !1],
      [2, 13, 2, 0, "halt", 0, 0, !1],
    ]),
      (n = [
        24, 22, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 56, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 0, 0],
        [2, 0, "cCreate", "free", 2, 0, 0, 0, 0],
        [2, 13, "cCreate", "free", 2, 0, 0, 0, 0],
      ]);
  } else if ("classPuzzle9" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 5, 1, 2, "halt", 0, 0, !1],
      [0, 4, 1, 3, "halt", 0, 0, !1],
      [0, 3, 1, 3, "halt", 0, 0, !1],
      [0, 2, 1, 3, "halt", 0, 0, !1],
      [0, 1, 1, 3, "halt", 0, 0, !1],
      [0, 0, 2, 3, "halt", 0, 0, !1],
      [1, 0, 2, 0, "halt", 0, 0, !1],
      [2, 0, 2, 0, "halt", 0, 0, !1],
      [3, 0, 2, 0, "halt", 0, 0, !1],
      [4, 0, 2, 0, "halt", 0, 0, !1],
    ]),
      (n = [
        24, 22, 22, 22, 22, 22, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 0, 0],
      ]);
  } else if ("vaziraniClassic" === e) {
    a = !0;
    (s = [
      [18, 4, 1, -1, "halt", 1, 0, !0],
      [18, 3, 1, -1, "halt", 1, 0, !0],
      [18, 2, 1, -1, "move", 1, 0, !0],
    ]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, 44, 22, 22, 22, 22, 22, 22, 25, -1, 24, 44, -1,
        -1, -1, 21, -1, -1, -1, -1, 44, 22, 22, 22, 25, -1, 24, 31, 22, 31, 44,
        -1, -1, -1, 21, -1, -1, -1, -1, 44, 25, -1, 24, 31, 22, 31, 31, 22, 31,
        44, -1, -1, -1, 21, -1, -1, -1, -1, -1, 23, 40, 26, 23, 40, 26, 23, 40,
        26, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, 44, 52, 22, 22, 52, 22, 22,
        52, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [6, 5, "switch", "free", 0, 1, 0, 1, -1],
        [9, 5, "switch", "free", 0, 1, 0, 1, -1],
        [12, 5, "switch", "free", 0, 1, 0, 1, -1],
        [12, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [12, 6, "cInvert", "free", 0, 0, 1, 0, -1],
        [9, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 6, "cInvert", "free", 0, 0, 1, 0, -1],
        [6, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [6, 6, "cInvert", "free", 0, 0, 1, 0, -1],
        [4, 4, "cCombine", "free", 0, 0, 0, 1, -1],
        [4, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [4, 2, "cCombine", "free", 0, 0, 0, 1, -1],
        [14, 4, "cCombine", "free", 0, 0, 0, 1, -1],
        [14, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [14, 2, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 0, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 0],
        [13, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [5, 6, "cCombine", "free", 0, 0, 0, 1, -1],
      ]);
  } else if ("quant1" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0.7853981633974484, !1],
      [0, 8, 3, 2, "move", -1.5707963267948966, !1],
      [0, 4, 1, 3, "move", -0.3926990816987246, !1],
      [18, 4, 1, 3, "halt", -0.3926990816987246, !0],
      [0, 9, 3, 1, "move", 2.748893571891069, !1],
      [18, 9, 3, 1, "halt", 2.748893571891069, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [18, 3, 1, 3, "halt", 3.141592653589793, !0],
      [0, 10, 3, 1, "move", 2.748893571891069, !1],
      [18, 10, 3, 1, "halt", 2.748893571891069, !0],
      [0, 2, 1, 3, "move", -1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 11, 3, 1, "move", 1.5707963267948966, !1],
      [18, 11, 3, 1, "halt", 1.5707963267948966, !0],
      [0, 1, 1, 3, "move", 1.1780972450961724, !1],
      [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      [0, 12, 3, 1, "move", 1.1780972450961724, !1],
      [18, 12, 3, 1, "halt", 1.1780972450961724, !0],
      [0, 0, 1, 3, "move", -1.178097245096172, !1],
      [18, 0, 1, 3, "halt", -1.178097245096172, !0],
      [0, 13, 3, 1, "move", -1.178097245096172, !1],
      [18, 13, 3, 1, "halt", -1.178097245096172, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 2, 2, 62, 68, 62, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 4, 2, 2, 62, 68, 62, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 44],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 44],
        [18, 5, "qCompare", "free", 0, 0.7853981633974484, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, -1.5707963267948966, 0, 4, -1],
        [3, 8, "qFlip", "free", 0, 5.497787143782138, 0, 0, -1],
        [4, 8, "rotate", "free", 0, 3.9269908169872414, 0, 0, -1],
        [5, 8, "qFlip", "free", 0, 4.71238898038, 0, 0, -1],
        [3, 5, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [5, 5, "rotate", "free", 0, 5.497787143782138, 0, 0, -1],
        [4, 5, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
      ]);
  } else if ("quant2" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [0, 4, 1, 3, "move", 0, 0, !1],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [0, 3, 1, 3, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [0, 2, 1, 3, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 1, 0, !0],
      [0, 1, 1, 3, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (o = [
        [0, 8, 3, 2, "move", 1.5707963267948966, !1],
        [0, 9, 3, 1, "move", 1.5707963267948966, !1],
        [18, 9, 3, 1, "halt", 1.5707963267948966, !0],
        [0, 10, 3, 1, "move", -1.5707963267948966, !1],
        [18, 10, 3, 1, "halt", -1.5707963267948966, !0],
        [0, 11, 3, 1, "move", 1.5707963267948966, !1],
        [18, 11, 3, 1, "halt", 1.5707963267948966, !0],
        [0, 12, 3, 1, "move", -1.5707963267948966, !1],
        [18, 12, 3, 1, "halt", -1.5707963267948966, !0],
        [0, 13, 3, 1, "move", 1.5707963267948966, !1],
        [18, 13, 3, 1, "halt", 1.5707963267948966, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [9, 10, "cCombine", "free", 0, 0, 0, 1, -1],
        [9, 3, "qCombine", "free", 0, 0, 0, 1, -1],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 44],
        [18, 13, "qCreate", "free", 3, 0, 0, 2, 44],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 44],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 1.5707963267948966, 0, 4, -1],
      ]);
  } else if ("quant3A" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 3, 1, 3, "move", 0, !1],
      [0, 2, 1, 3, "move", 0, !1],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 0, 1, 3, "move", 0, !1],
      [0, 8, 3, 2, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [0, 12, 3, 1, "move", 0, !1],
      [0, 13, 3, 1, "move", 0, !1],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 25, -1, -1,
        -1, -1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 60, 84, 23, 22, 22, 22,
        22, 22, 22, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 4, 2, 2, 2, 2, 2, 2, 2, 2, 60, 5, 4, 60, 84, 24,
        22, 22, 22, 96, 1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 65, 6, 44, 22,
        26, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 3, 2, 60, 84,
        -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "cOneCompare", "free", 0, 0, 0, 0, 0],
        [18, 8, "cOneCompare", "free", 0, 0, 0, 0, 0],
        [0, 0, "qCreate", "free", 1, 0, 0, 0, 994],
        [9, 5, "measure", "free", 0, 0, 0, 0, -1],
        [10, 5, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [0, 13, "qCreate", "free", 3, 0, 0, 0, 994],
        [9, 8, "measure", "free", 0, 0, 0, 0, -1],
        [9, 9, "switch", "free", 3, 1, 0, 1, -1],
        [10, 9, "qCombine", "free", 0, 0, 0, 0, -1],
        [10, 9, "qCombine", "free", 1, 0, 1, 0, -1],
        [9, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [12, 8, "measure", "free", 0, 0, 0, 0, -1],
        [12, 10, "measure", "free", 0, 0, 0, 0, -1],
        [12, 9, "cCombine", "free", 0, 0, 0, 0, -1],
        [13, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [13, 10, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
      ]);
  } else if ("quant3" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 0, !1],
      [18, 3, 1, 3, "halt", 0, !0],
      [0, 2, 1, 3, "move", 1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", 1.5707963267948966, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 300],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 300],
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "qCompare", "free", 0, 1.5707963267948966, 0, 2, -1],
      ]);
  } else if ("quant4" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.1780972450961724, !1],
      [0, 4, 1, 3, "move", -0.7853981633974484, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 0.7853981633974484, !1],
      [18, 3, 1, 3, "halt", 0, !0],
      [0, 2, 1, 3, "move", 1.1780972450961724, !1],
      [18, 2, 1, 3, "halt", 0, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 1.1780972450961724, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 44],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
      ]);
  } else if ("quant5" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 8, 3, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 0, !1],
      [0, 13, 3, 1, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 94],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 2, 0, 2, 94],
      ]);
  } else if ("quant6" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 8, 3, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [0, 0, 1, 3, "move", 0, !1],
      [0, 13, 3, 1, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 94],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 2, 0, 2, 94],
      ]);
  } else if ("quant6B" === e) {
    a = !0;
    (s = []),
      (o = [
        [0, 5, 1, 2, "move", 3.141592653589793, !1],
        [0, 8, 3, 2, "move", 0, !1],
        [0, 4, 1, 3, "move", 3.141592653589793, !1],
        [18, 4, 1, 3, "halt", 3.141592653589793, !0],
        [0, 9, 3, 1, "move", 0.39269908169872403, !1],
        [18, 9, 3, 1, "halt", 0.39269908169872403, !0],
        [0, 3, 1, 3, "move", -2.748893571891069, !1],
        [18, 3, 1, 3, "halt", -2.748893571891069, !0],
        [0, 10, 3, 1, "move", -2.356194490192345, !1],
        [18, 10, 3, 1, "halt", -2.356194490192345, !0],
        [0, 2, 1, 3, "move", 1.9634954084936207, !1],
        [18, 2, 1, 3, "halt", 1.9634954084936207, !0],
        [0, 11, 3, 1, "move", 0.39269908169872403, !1],
        [18, 11, 3, 1, "halt", 0.39269908169872403, !0],
        [0, 1, 1, 3, "move", 0, !1],
        [18, 1, 1, 3, "halt", 0, !0],
        [0, 12, 3, 1, "move", -0.3926990816987246, !1],
        [18, 12, 3, 1, "halt", -0.3926990816987246, !0],
        [0, 0, 1, 3, "move", -1.178097245096172, !1],
        [18, 0, 1, 3, "halt", -1.178097245096172, !0],
        [0, 13, 3, 1, "move", 2.748893571891069, !1],
        [18, 13, 3, 1, "halt", 2.748893571891069, !0],
      ]),
      (n = [
        4, 68, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74,
        5, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 68, 76, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 6,
      ]),
      (l = [
        [18, 5, "qCompare", "free", 0, 3.14159265359, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 0, 0, 4, -1],
        [1, 0, "qFlip", "free", 0, 0, 0, 3, -1],
        [1, 13, "qFlip", "free", 0, 1.570796326795, 0, 3, -1],
        [2, 0, "qCreate", "free", 2, 2, 0, 1, 94],
        [2, 13, "qCreate", "free", 2, 3, 0, 1, 94],
        [17, 0, "qCreate", "free", 0, 0, 0, 2, 94],
        [17, 13, "qCreate", "free", 0, 1, 0, 2, 94],
      ]);
  } else if ("quant7" === e) {
    a = !0;
    (o = [
      [0, 8, 3, 2, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [18, 4, 1, 3, "halt", 0, !0],
      [18, 9, 3, 1, "halt", 0, !0],
      [0, 10, 3, 1, "move", 0, !1],
      [18, 3, 1, 3, "halt", 0, !0],
      [18, 10, 3, 1, "halt", 0, !0],
      [0, 11, 3, 1, "move", 0, !1],
      [18, 2, 1, 3, "halt", 0, !0],
      [18, 11, 3, 1, "halt", 0, !0],
      [0, 12, 3, 1, "move", 0, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [18, 12, 3, 1, "halt", 0, !0],
      [0, 13, 3, 1, "move", 0, !1],
      [18, 0, 1, 3, "halt", 0, !0],
      [18, 13, 3, 1, "halt", 0, !0],
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 1.5707963267948966, !1],
      [0, 3, 1, 3, "move", 1.5707963267948966, !1],
      [0, 2, 1, 3, "move", 1.5707963267948966, !1],
      [0, 1, 1, 3, "move", 1.5707963267948966, !1],
      [0, 0, 2, 3, "move", 1.5707963267948966, !1],
    ]),
      (n = [
        4, 62, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 5, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, 3, 70, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 4, 68, 2, 64, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [0, 13, "qCreate", "free", 3, 0, 0, 0, 44],
        [2, 6, "qControl", "free", 0, 0, 0, 0, -1],
        [1, 0, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 0, "qCreate", "free", 2, 0, 0, 3, 44],
        [2, 7, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [2, 7, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [4, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [4, 7, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "qCompare", "free", 0, 0, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 0, 0, 4, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
        [18, 13, "qCreate", "free", 3, 0, 0, 2, 44],
        [8, 5, "measure", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("quantChallengeA" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", -1.5707963267948966, !1],
      [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
      [0, 3, 1, 3, "move", 1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", 1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 1, 1, 3, "move", 1.5707963267948966, !1],
      [18, 1, 1, 3, "halt", -1.5707963267948966, !0],
      [0, 0, 1, 3, "move", 1.5707963267948966, !1],
      [18, 0, 1, 3, "halt", -1.5707963267948966, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 94],
        [18, 5, "qCompare", "free", 0, -1.5707963267948966, 0, 2, -1],
      ]);
  } else if ("quantChallengeB" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 8, 3, 2, "move", -1.9634954084936211, !1],
      [0, 4, 1, 3, "move", 1.5707963267948966, !1],
      [0, 9, 3, 1, "move", 2.356194490192345, !1],
      [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
      [18, 9, 3, 1, "halt", 2.356194490192345, !0],
      [0, 3, 1, 3, "move", 1.1780972450961724, !1],
      [0, 10, 3, 1, "move", -0.3926990816987246, !1],
      [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
      [18, 10, 3, 1, "halt", -0.3926990816987246, !0],
      [0, 2, 1, 3, "move", -0.3926990816987246, !1],
      [0, 11, 3, 1, "move", -0.7853981633974484, !1],
      [18, 2, 1, 3, "halt", -0.3926990816987246, !0],
      [18, 11, 3, 1, "halt", -0.7853981633974484, !0],
      [0, 1, 1, 3, "move", 3.141592653589793, !1],
      [0, 12, 3, 1, "move", -0.3926990816987246, !1],
      [18, 1, 1, 3, "halt", 3.141592653589793, !0],
      [18, 12, 3, 1, "halt", -0.3926990816987246, !0],
      [0, 0, 1, 3, "move", 2.748893571891069, !1],
      [0, 13, 3, 1, "move", 1.9634954084936207, !1],
      [18, 0, 1, 3, "halt", 2.748893571891069, !0],
      [18, 13, 3, 1, "halt", 1.9634954084936207, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, 74, 2, 2, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 3, 2, 2, 2, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 4, 2, 2, 2, 68, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 79, 1, 74, 2, 2, 72, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 94],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 94],
        [18, 5, "qCompare", "free", 0, 5.497787143782138, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 0.7853981633974483, 0, 4, -1],
        [4, 9, "qControl", "free", 2, 1.5707963267948966, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 2.356194490192345, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [1, 4, "qCreate", "free", 0, 0, 0, 0, -1],
        [4, 5, "qControl", "free", 2, 0.7853981633974483, 0, 0, -1],
        [1, 9, "qCreate", "free", 0, 0, 0, 0, -1],
        [4, 4, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [4, 4, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [0, 0, "qCreate", "free", 1, 0, 0, 4, 94],
        [0, 13, "qCreate", "free", 3, 1, 0, 4, 94],
      ]);
  } else if ("quantChallengeC" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", -2.748893571891069, !1],
      [0, 8, 3, 2, "move", -2.356194490192345, !1],
      [5, 13, 0, 1, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 1.5707963267948966, !1],
      [0, 9, 3, 1, "move", -1.5707963267948966, !1],
      [4, 13, 0, 2, "move", -1.178097245096172, !1],
      [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
      [0, 3, 1, 3, "move", 1.9634954084936207, !1],
      [0, 10, 3, 1, "move", -0.3926990816987246, !1],
      [3, 13, 0, 2, "move", 3.141592653589793, !1],
      [18, 3, 1, 3, "halt", 1.9634954084936207, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", -1.9634954084936211, !1],
      [2, 13, 0, 2, "move", -0.3926990816987246, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 0.3926990816987241, !1],
      [0, 12, 3, 1, "move", -2.748893571891069, !1],
      [1, 13, 0, 2, "move", -2.356194490192345, !1],
      [18, 1, 1, 3, "halt", 0.3926990816987241, !0],
      [0, 0, 1, 3, "move", -2.748893571891069, !1],
      [0, 13, 3, 1, "move", 3.141592653589793, !1],
      [18, 0, 1, 3, "halt", -2.748893571891069, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, 3, 70, 2, 68, 2, 62, 2, 62, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 4, 62, 2, 70, 2, 72, 2, 68, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 4, 6, 4, 2, 68, 2, 62, 2, 72, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 3, 2, 2, 5, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 77, 74, 2, 2, 2, 6, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 44],
        [1, 13, "qCreate", "free", 0, 2, 0, 1, 45],
        [9, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [9, 7, "qCombine", "free", 0, 0, 0, 1, -1],
        [9, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 6, "qControl", "free", 0, 0.7853981633974483, 0, 0, -1],
        [4, 7, "qControl", "free", 0, 0, 0, 0, -1],
        [6, 7, "qControl", "free", 2, -1.5707963267948966, 0, 0, -1],
        [8, 8, "qControl", "free", 2, -2.356194490192345, 0, 0, -1],
        [4, 6, "qFlip", "free", 0, 0, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [4, 8, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [6, 8, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 7, "rotate", "free", 0, 1.5707963267948966, 0, 0, -1],
        [2, 7, "rotate", "free", 0, 0.7853981633974483, 1, 0, -1],
        [8, 6, "rotate", "free", 0, 5.497787143782138, 0, 0, -1],
        [6, 6, "rotate", "free", 0, 3.9269908169872414, 0, 0, -1],
        [6, 6, "rotate", "free", 0, 0.7853981633974483, 1, 0, -1],
        [8, 7, "qFlip", "free", 0, 0.7853981633974483, 0, 0, -1],
        [8, 7, "qFlip", "free", 0, 0.7853981633974483, 1, 0, -1],
        [18, 5, "qCompare", "free", 0, -2.748893571891069, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
      ]);
  } else if ("quantChallengeD" === e) {
    a = !0;
    s = [
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 1, 0, !0],
      [18, 2, 1, 3, "halt", 0, 0, !0],
    ];
    var h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    var d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    var u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    var c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 85, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [17, 13, "qCreate", "free", 2, 0, 0, 0, 196],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -2],
        [1, 13, "upgrade", "free", 0, 0.39269908169872414, 0, 2, -1],
        [0, 13, "cCreate", "free", 0, 0, 0, 1, 196],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 196],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("quantChallengeE" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 3.141592653589793, !1],
      [0, 8, 3, 2, "move", 2.356194490192345, !1],
      [0, 4, 1, 3, "move", -2.748893571891069, !1],
      [0, 9, 3, 1, "move", 1.9634954084936207, !1],
      [18, 4, 1, 3, "halt", 1.9634954084936207, !0],
      [18, 9, 3, 1, "halt", -2.748893571891069, !0],
      [0, 3, 1, 3, "move", -0.7853981633974484, !1],
      [0, 10, 3, 1, "move", 2.748893571891069, !1],
      [18, 3, 1, 3, "halt", 2.748893571891069, !0],
      [18, 10, 3, 1, "halt", -0.7853981633974484, !0],
      [0, 2, 1, 3, "move", -1.178097245096172, !1],
      [0, 11, 3, 1, "move", 1.1780972450961724, !1],
      [18, 2, 1, 3, "halt", 1.1780972450961724, !0],
      [18, 11, 3, 1, "halt", -1.178097245096172, !0],
      [0, 1, 1, 3, "move", 2.356194490192345, !1],
      [0, 12, 3, 1, "move", 3.141592653589793, !1],
      [18, 1, 1, 3, "halt", 3.141592653589793, !0],
      [18, 12, 3, 1, "halt", 2.356194490192345, !0],
      [0, 0, 1, 3, "move", 1.1780972450961724, !1],
      [0, 13, 3, 1, "move", 0.3926990816987241, !1],
      [18, 0, 1, 3, "halt", 0.3926990816987241, !0],
      [18, 13, 3, 1, "halt", 1.1780972450961724, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 4, 78, -1, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 64, 6, -1, -1, 4, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 64, 5, -1, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 3, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 44],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 44],
        [18, 0, "qCreate", "free", 1, 1, 0, 2, 44],
        [18, 13, "qCreate", "free", 3, 0, 0, 2, 44],
        [18, 5, "qCompare", "free", 0, 2.356194490192345, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 3.141592653589793, 0, 4, -1],
        [2, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 7, "qCombine", "free", 0, 0, 0, 1, -1],
        [16, 6, "qCombine", "free", 0, 0, 0, 1, -1],
        [16, 7, "qCombine", "free", 0, 0, 0, 1, -1],
      ]);
  } else if ("quantChallengeF" === e) {
    a = !0;
    (n = [
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, 47, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, 67, -1, -1, -1,
      -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    ]),
      (l = [
        [18, 5, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [18, 8, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [0, 13, "qCreate", "free", 3, 0, 0, 0, -1],
        [5, 4, "qCombine", "free", 1, 0, 0, 1, -1],
        [5, 9, "qCombine", "free", 3, 0, 0, 1, -1],
        [10, 4, "cCombine", "free", 3, 0, 0, 1, -1],
        [10, 9, "cCombine", "free", 1, 0, 0, 1, -1],
      ]);
  } else if ("quantChallengeG" === e) {
    a = !0;
    (s = [
      [0, 8, 3, 2, "move", 0, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [0, 11, 3, 1, "move", 0, 0, !1],
      [0, 12, 3, 1, "move", 1, 0, !1],
      [0, 13, 3, 1, "move", 0, 0, !1],
    ]),
      (o = [
        [0, 5, 1, 2, "move", 0, !1],
        [0, 4, 1, 3, "move", 0, !1],
        [18, 4, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 3, 1, 3, "move", 0, !1],
        [18, 3, 1, 3, "halt", 3.141592653589793, !0],
        [0, 2, 1, 3, "move", 0, !1],
        [18, 2, 1, 3, "halt", 3.141592653589793, !0],
        [0, 1, 1, 3, "move", 0, !1],
        [18, 1, 1, 3, "halt", 1.5707963267948966, !0],
        [0, 0, 1, 3, "move", 0, !1],
        [18, 0, 1, 3, "halt", 3.141592653589793, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, 2, 2, 2, 2, 2, 70, 2, 2, 2, 2, 2, 70, 2, 2, 2, 2,
        2, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 0, 44],
        [18, 5, "qCompare", "free", 0, 3.141592653589793, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 44],
        [6, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [12, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [0, 13, "cCreate", "free", 3, 0, 0, 1, 44],
      ]);
  } else if ("quantErrorB" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    var I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    var E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (o = [
        [0, 5, 1, 2, "move", (1 * Math.PI) / 8, !1],
        [0, 4, 1, 3, "move", (5 * Math.PI) / 8, !1],
        [18, 4, 1, 3, "halt", (5 * Math.PI) / 8, !0],
        [0, 3, 1, 3, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 2, 1, 3, "move", -1.9634954084936214, !1],
        [18, 2, 1, 3, "halt", -1.9634954084936214, !0],
        [0, 1, 1, 3, "move", 1.1780972450961724, !1],
        [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 5, "qCompare", "free", 0, 3.534291735289, 0, 2, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.570796326795, 0, 0, -2],
        [7, 12, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 11, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 10, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 9, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 8, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 7, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 6, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 5, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 3, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 4, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 2, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
        [7, 1, "rotate", "free", 0, 0.785398163397, 0, 2, -1],
      ]);
  } else if ("quantErrorA" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", -0.7853981633974484, !1],
      [18, 4, 1, 3, "halt", -2.748893571891069, !0],
      [0, 4, 1, 3, "move", -2.748893571891069, !1],
      [18, 3, 1, 3, "halt", 0.7853981633974484, !0],
      [0, 3, 1, 3, "move", 0.7853981633974484, !1],
      [18, 2, 1, 3, "halt", 0, !0],
      [0, 2, 1, 3, "move", 0, !1],
      [18, 1, 1, 3, "halt", -1.178097245096172, !0],
      [0, 1, 1, 3, "move", -1.178097245096172, !1],
      [18, 0, 1, 3, "halt", 1.9634954084936207, !0],
      [0, 0, 1, 3, "move", 1.9634954084936207, !1],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 3, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [4, 1, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 2, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 3, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 4, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 5, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 6, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 7, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 8, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 9, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 10, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 11, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 12, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 12, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 10, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 8, "rotate", "free", 0, 0, 0, 1, -1],
        [4, 9, "rotate", "free", 0, 0, 0, 1, -1],
        [18, 5, "qCompare", "free", 0, 1.5707963267948966, 0, 2, -1],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 94],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 94],
      ]);
  } else if ("adderB" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 3.141592653589793, !1],
      [0, 8, 3, 2, "move", 3.141592653589793, !1],
      [5, 13, 0, 1, "move", 0, !1],
      [0, 4, 1, 3, "move", 3.141592653589793, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [4, 13, 0, 2, "move", 0, !1],
      [18, 4, 1, 3, "halt", 3.141592653589793, !0],
      [18, 9, 3, 1, "halt", 0, !0],
      [14, 13, 2, 0, "halt", Math.PI, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [3, 13, 0, 2, "move", 0, !1],
      [18, 3, 1, 3, "halt", 3.141592653589793, !0],
      [18, 10, 3, 1, "halt", 0, !0],
      [15, 13, 2, 0, "halt", Math.PI, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [2, 13, 0, 2, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [18, 11, 3, 1, "halt", 0, !0],
      [16, 13, 2, 0, "halt", Math.PI, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 3.141592653589793, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [18, 12, 3, 1, "halt", 3.141592653589793, !0],
      [17, 13, 2, 0, "halt", Math.PI, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, 74, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 78, 2, 2, 2, 76, 77,
      ]),
      (l = [
        [13, 13, "qCompare", "free", 0, 0, 0, 3, -1],
        [18, 5, "qCompare", "free", 0, 3.141592653589793, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 3.141592653589793, 0, 4, -1],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 95],
        [2, 13, "qCreate", "free", 0, 0, 0, 0, 96],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 95],
        [17, 13, "qCreate", "free", 2, 2, 0, 2, 95],
      ]);
  } else if ("adderC" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 3.141592653589793, !1],
      [0, 8, 3, 2, "move", 3.141592653589793, !1],
      [5, 13, 0, 1, "move", 0, !1],
      [0, 4, 1, 3, "move", 3.141592653589793, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [4, 13, 0, 2, "move", 0, !1],
      [18, 4, 1, 3, "halt", 3.141592653589793, !0],
      [18, 9, 3, 1, "halt", 0, !0],
      [14, 13, 2, 0, "halt", 0, !0],
      [0, 3, 1, 3, "move", 3.141592653589793, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [3, 13, 0, 2, "move", 0, !1],
      [18, 3, 1, 3, "halt", 3.141592653589793, !0],
      [18, 10, 3, 1, "halt", 0, !0],
      [15, 13, 2, 0, "halt", 0, !0],
      [0, 2, 1, 3, "move", 3.141592653589793, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [2, 13, 0, 2, "move", 0, !1],
      [18, 2, 1, 3, "halt", 3.141592653589793, !0],
      [18, 11, 3, 1, "halt", 0, !0],
      [16, 13, 2, 0, "halt", 0, !0],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 12, 3, 1, "move", 3.141592653589793, !1],
      [18, 1, 1, 3, "halt", 0, !0],
      [18, 12, 3, 1, "halt", 3.141592653589793, !0],
      [17, 13, 2, 0, "halt", 0, !0],
    ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 77, -1, 74, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 78, 2, 2, 2, 76, 77,
      ]),
      (l = [
        [13, 13, "qCompare", "free", 0, 3.141592653589793, 0, 3, -1],
        [18, 5, "qCompare", "free", 0, 3.141592653589793, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, 3.141592653589793, 0, 4, -1],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [0, 13, "qCreate", "free", 3, 1, 0, 1, 95],
        [2, 13, "qCreate", "free", 0, 0, 0, 0, 96],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 13, "qCreate", "free", 3, 1, 0, 2, 95],
        [17, 13, "qCreate", "free", 2, 2, 0, 2, 95],
      ]);
  } else if ("measure" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 1.5707963267948966, !1],
      [0, 8, 3, 2, "move", 1.5707963267948966, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 9, 3, 1, "move", 0, !1],
      [0, 3, 1, 3, "move", 0, !1],
      [0, 10, 3, 1, "move", 0, !1],
      [0, 2, 1, 3, "move", 0, !1],
      [0, 11, 3, 1, "move", 0, !1],
      [0, 1, 1, 3, "move", 1.5707963267948966, !1],
      [0, 12, 3, 1, "move", 1.5707963267948966, !1],
      [0, 0, 1, 3, "move", 1.5707963267948966, !1],
      [0, 13, 3, 1, "move", 1.5707963267948966, !1],
    ]),
      (s = [
        [18, 5, 1, -1, "freeze", 1, 0, !0],
        [18, 4, 1, 3, "halt", 0, 0, !0],
        [18, 3, 1, 3, "halt", 0, 0, !0],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [18, 1, 1, 3, "halt", 1, 0, !0],
        [18, 0, 1, 3, "halt", 1, 0, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 294],
        [0, 13, "qCreate", "free", 3, 0, 0, 1, 294],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 294],
      ]);
  } else if ("measureB" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", 0, !1],
      [0, 4, 1, 3, "move", 0, !1],
      [0, 3, 1, 3, "move", 0, !1],
      [0, 2, 1, 3, "move", 0, !1],
      [0, 1, 1, 3, "move", 0, !1],
      [0, 0, 2, 3, "move", 0, !1],
      [1, 0, 2, 0, "move", 0, !1],
      [2, 0, 2, 0, "move", 0, !1],
      [3, 0, 2, 0, "move", 1.5707963267948966, !1],
      [4, 0, 2, 0, "move", 1.5707963267948966, !1],
      [5, 0, 2, 0, "move", 1.5707963267948966, !1],
      [6, 0, 2, 0, "move", 1.5707963267948966, !1],
      [7, 0, 2, 0, "move", 0, !1],
      [8, 0, 2, 0, "move", 0, !1],
      [9, 0, 2, 0, "move", 0, !1],
      [10, 0, 2, 0, "move", 0, !1],
      [11, 0, 2, 0, "move", 0, !1],
      [12, 0, 2, 0, "move", 0, !1],
      [13, 0, 2, 0, "move", 0, !1],
      [14, 0, 2, 0, "move", 0, !1],
    ]),
      (s = [
        [18, 5, 1, -1, "freeze", 0, 0, !0],
        [18, 4, 1, 3, "halt", 0, 0, !0],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [18, 1, 1, 3, "halt", 0, 0, !0],
      ]),
      (n = [
        4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 76, 55, 1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [17, 0, "qCreate", "free", 2, 0, 0, 1, 1580],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 395],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("preDenseB" === e) {
    a = !0;
    (s = [
      [0, 5, 1, 2, "move", 1, 0, !1],
      [0, 8, 3, 2, "move", 0, 0, !1],
      [18, 5, 1, -1, "freeze", 1, 0, !0],
      [13, 13, 2, 1, "move", 0, 0, !1],
      [0, 4, 1, 3, "move", 1, 0, !1],
      [0, 9, 3, 1, "move", 1, 0, !1],
      [18, 4, 1, 3, "halt", 1, 0, !0],
      [14, 13, 2, 0, "move", 1, 0, !1],
      [0, 3, 1, 3, "move", 1, 0, !1],
      [0, 10, 3, 1, "move", 0, 0, !1],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [15, 13, 2, 0, "move", 1, 0, !1],
      [0, 2, 1, 3, "move", 0, 0, !1],
      [0, 11, 3, 1, "move", 1, 0, !1],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [16, 13, 2, 0, "move", 0, 0, !1],
      [0, 1, 1, 3, "move", 1, 0, !1],
      [0, 12, 3, 1, "move", 0, 0, !1],
      [18, 1, 1, 3, "halt", 1, 0, !0],
      [17, 13, 2, 0, "move", 0, 0, !1],
      [0, 0, 1, 3, "move", 0, 0, !1],
      [0, 13, 3, 1, "move", 0, 0, !1],
      [18, 0, 1, 3, "halt", 0, 0, !0],
      [18, 13, 2, 0, "move", 0, 0, !1],
    ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 22, 22, 22, 56,
      ]),
      (l = [
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 394],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 394],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 3, 0, 2, 394],
        [9, 6, "qCombine", "free", 0, 0, 0, 2, 400],
        [18, 13, "cCreate", "free", 2, 2, 0, 1, 394],
      ]);
  } else if ("simpleDistill" === e) {
    a = !0;
    h = new Entangled(3);
    h.setQubits([
      new Qubit(4, 11, 0, 2, "halt", 0),
      new Qubit(4, 10, 0, 2, "halt", 0),
      new Qubit(4, 9, 0, 2, "halt", 0),
    ]);
    r = [h];
    s = [];
    (n = [
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, 75, 75, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 95, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 73, 63, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 73, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 95, -1, 73, 63, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 1, 3, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, 3, 2, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1,
    ]),
      (l = [
        [18, 5, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [18, 8, "qDubCompare", "free", 0, 0, 0, 0, -1],
        [1, 7, "qControl", "free", 3, 1.570796326795, 0, 0, -1],
        [4, 9, "qCombine", "free", 0, 0, 0, 1, -1],
        [4, 10, "qCombine", "free", 0, 0, 0, 1, -1],
        [4, 11, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 8, "qControl", "free", 3, 0, 0, 0, -1],
        [3, 8, "rotate", "free", 1, 4.712388980385, 0, 0, -1],
        [3, 8, "rotate", "free", 1, 0.785398163397, 1, 0, -1],
        [1, 9, "qControl", "free", 3, 1.570796326795, 0, 0, -1],
        [2, 7, "rotate", "free", 1, 3.14159265359, 0, 0, -1],
        [2, 7, "rotate", "free", 1, 0.785398163397, 1, 0, -1],
        [2, 9, "rotate", "free", 1, 1.570796326795, 0, 0, -1],
        [2, 9, "rotate", "free", 1, 0.785398163397, 1, 0, -1],
        [3, 2, "qCreate", "free", 1, 0, 0, 5, -1],
        [2, 2, "qCreate", "free", 1, 0, 0, 5, -1],
        [1, 2, "qCreate", "free", 1, 0, 0, 5, -1],
      ]);
  } else if ("dense" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (s = [
        [0, 5, 1, 2, "move", 1, 0, !1],
        [0, 8, 3, 2, "move", 0, 0, !1],
        [18, 5, 1, -1, "freeze", 1, 0, !0],
        [18, 8, 3, -1, "freeze", 0, 0, !0],
        [0, 4, 1, 3, "move", 1, 0, !1],
        [0, 9, 3, 1, "move", 0, 0, !1],
        [18, 4, 1, 3, "halt", 1, 0, !0],
        [18, 9, 3, 1, "halt", 0, 0, !0],
        [0, 3, 1, 3, "move", 1, 0, !1],
        [0, 10, 3, 1, "move", 1, 0, !1],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [18, 10, 3, 1, "halt", 1, 0, !0],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 11, 3, 1, "move", 1, 0, !1],
        [18, 2, 1, 3, "halt", 1, 0, !0],
        [18, 11, 3, 1, "halt", 1, 0, !0],
        [0, 1, 1, 3, "move", 0, 0, !1],
        [0, 12, 3, 1, "move", 0, 0, !1],
        [18, 1, 1, 3, "halt", 0, 0, !0],
        [18, 12, 3, 1, "halt", 0, 0, !0],
        [0, 0, 1, 3, "move", 0, 0, !1],
        [0, 13, 3, 1, "move", 0, 0, !1],
        [18, 0, 1, 3, "halt", 0, 0, !0],
        [18, 13, 3, 1, "halt", 0, 0, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 94, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 57, 74, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, 57,
      ]),
      (l = [
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -2],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 94],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 94],
        [9, 6, "qCombine", "free", 0, 0, 0, 2, 100],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [18, 8, "compare", "free", 3, 0.7853981633974483, 0, 4, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 94],
        [18, 13, "cCreate", "free", 3, 1, 0, 2, 94],
      ]);
  } else if ("teleport" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (o = [
        [0, 5, 1, 2, "move", (1 * Math.PI) / 8, !1],
        [0, 4, 1, 3, "move", (5 * Math.PI) / 8, !1],
        [18, 4, 1, 3, "halt", (5 * Math.PI) / 8, !0],
        [0, 3, 1, 3, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 2, 1, 3, "move", -1.9634954084936214, !1],
        [18, 2, 1, 3, "halt", -1.9634954084936214, !0],
        [0, 1, 1, 3, "move", 1.1780972450961724, !1],
        [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 2, 2, -1,
      ]),
      (l = [
        [9, 7, "cCombine", "free", 0, 0, 0, 1, -2],
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -2],
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 95],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 95],
        [18, 5, "qCompare", "free", 0, (1 * Math.PI) / 8, 0, 2, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, Math.PI / 2, 0, 0, -2],
      ]);
  } else if ("distill" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (o = [
        [0, 5, 1, 2, "move", (1 * Math.PI) / 8, !1],
        [0, 4, 1, 3, "move", (5 * Math.PI) / 8, !1],
        [18, 4, 1, 3, "halt", (5 * Math.PI) / 8, !0],
        [0, 3, 1, 3, "move", 1.1780972450961724, !1],
        [18, 3, 1, 3, "halt", 1.1780972450961724, !0],
        [0, 2, 1, 3, "move", -1.9634954084936214, !1],
        [18, 2, 1, 3, "halt", -1.9634954084936214, !0],
        [0, 1, 1, 3, "move", 1.1780972450961724, !1],
        [18, 1, 1, 3, "halt", 1.1780972450961724, !0],
      ]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 85, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [0, 0, "qCreate", "free", 1, 0, 0, 1, 15],
        [18, 0, "qCreate", "free", 1, 0, 0, 2, 15],
        [18, 5, "qCompare", "free", 0, 0.39269908169872414, 0, 2, -2],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -2],
        [9, 6, "cCombine", "free", 0, 0, 0, 1, -2],
        [9, 7, "cCombine", "free", 0, 0, 0, 1, -2],
        [1, 13, "upgrade", "free", 0, 0.39269908169872414, 0, 1, -1],
        [0, 13, "cCreate", "free", 0, 0, 0, 0, -1],
      ]);
  } else if ("vaziraniQuantum" === e) {
    a = !0;
    (s = [
      [18, 4, 1, -1, "halt", 0, 0, !0],
      [18, 3, 1, -1, "halt", 0, 0, !0],
      [18, 2, 1, -1, "move", 0, 0, !0],
    ]),
      (o = []),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, 64, 2, 2, 2, 2, 2, 2, 5, -1, 4, 64, -1, -1, -1,
        21, -1, -1, -1, -1, 64, 2, 2, 2, 5, -1, 4, 11, 2, 11, 64, -1, -1, -1,
        21, -1, -1, -1, -1, 64, 5, -1, 4, 11, 2, 11, 11, 2, 11, 64, -1, -1, -1,
        21, -1, -1, -1, -1, -1, 3, 70, 6, 3, 70, 6, 3, 70, 6, -1, -1, -1, -1,
        91, -1, -1, -1, -1, -1, 64, 68, 2, 2, 68, 2, 2, 68, 64, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [4, 4, "qCombine", "free", 0, 0, 0, 2, 1],
        [4, 3, "qCombine", "free", 0, 0, 0, 2, 1],
        [4, 2, "qCombine", "free", 0, 0, 0, 2, 1],
        [5, 6, "qCombine", "free", 0, 0, 0, 2, 1],
        [13, 6, "qCombine", "free", 0, 0, 0, 2, 1],
        [14, 4, "qCombine", "free", 0, 0, 0, 2, 1],
        [14, 3, "qCombine", "free", 0, 0, 0, 2, 1],
        [14, 2, "qCombine", "free", 0, 0, 0, 2, 1],
        [6, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [9, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [12, 5, "qControl", "free", 0, 0, 0, 0, -1],
        [6, 6, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [6, 6, "qFlip", "free", 0, 1.5707963267948966, 1, 0, -1],
        [9, 6, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [9, 6, "qFlip", "free", 0, 1.5707963267948966, 1, 0, -1],
        [12, 6, "qFlip", "free", 0, 1.5707963267948966, 0, 0, -1],
        [12, 6, "qFlip", "free", 0, 1.5707963267948966, 1, 0, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 0, -1],
      ]);
  } else if ("quantumAdv1" === e) {
    a = !0;
    s = [[18, 5, 1, -1, "freeze", 0, 0, !0]];
    for (
      var S = [
          [0, 5],
          [0, 4],
          [0, 3],
          [0, 2],
          [0, 1],
          [0, 0],
          [1, 0],
          [2, 0],
          [3, 0],
          [4, 0],
        ],
        f = [2, 3, 3, 3, 3, 3, 0, 0, 0, 0],
        p = [
          [0, 8],
          [0, 9],
          [0, 10],
          [0, 11],
          [0, 12],
          [0, 13],
          [1, 13],
          [2, 13],
          [3, 13],
          [4, 13],
        ],
        T = [2, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        R = ((r = []), 0);
      R < 10;
      R++
    ) {
      var m = new Entangled(2);
      m.setQubits([
        new Qubit(S[R][0], S[R][1], 0, f[R], "halt", 0),
        new Qubit(p[R][0], p[R][1], 0, T[R], "halt", 0),
      ]),
        r.push(m);
    }
    (n = [
      4, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 3,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 3, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1,
    ]),
      (l = [
        [6, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [6, 10, "cCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("quantumAdv2" === e) {
    a = !0;
    for (
      s = [[18, 5, 1, -1, "freeze", 0, 0, !0]],
        S = [
          [0, 5],
          [0, 4],
          [0, 3],
          [0, 2],
          [0, 1],
          [0, 0],
          [1, 0],
          [2, 0],
          [3, 0],
          [4, 0],
          [5, 0],
        ],
        f = [2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0],
        p = [
          [0, 8],
          [0, 9],
          [0, 10],
          [0, 11],
          [0, 12],
          [0, 13],
          [1, 13],
          [2, 13],
          [3, 13],
          [4, 13],
          [5, 13],
        ],
        T = [2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        r = [],
        R = 0;
      R < 11;
      R++
    ) {
      m = new Entangled(2);
      m.setQubits([
        new Qubit(S[R][0], S[R][1], 0, f[R], "halt", 0),
        new Qubit(p[R][0], p[R][1], 0, T[R], "halt", 0),
      ]),
        r.push(m);
    }
    (n = [
      4, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 3,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 3, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1,
    ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [6, 3, "cCombine", "free", 0, 0, 0, 1, -1],
        [6, 10, "cCombine", "free", 0, 0, 0, 1, -1],
        [1, 10, "rotate", "free", 1, 0.7853981633974483, 1, 0, -1],
      ]);
  } else if ("quantumAdv3" === e) {
    a = !0;
    for (
      s = [[18, 5, 1, -1, "freeze", 0, 0, !0]],
        S = [
          [0, 5],
          [0, 4],
          [0, 3],
          [0, 2],
          [0, 1],
          [0, 0],
          [1, 0],
          [2, 0],
          [3, 0],
          [4, 0],
          [5, 0],
          [6, 0],
        ],
        f = [2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
        p = [
          [0, 8],
          [0, 9],
          [0, 10],
          [0, 11],
          [0, 12],
          [0, 13],
          [1, 13],
          [2, 13],
          [3, 13],
          [4, 13],
          [5, 13],
          [6, 13],
        ],
        T = [2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        r = [],
        R = 0;
      R < 12;
      R++
    ) {
      m = new Entangled(2);
      m.setQubits([
        new Qubit(S[R][0], S[R][1], 0, f[R], "halt", 0),
        new Qubit(p[R][0], p[R][1], 0, T[R], "halt", 0),
      ]),
        r.push(m);
    }
    (n = [
      4, 2, 2, 2, 2, 2, 2, 10, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, 29, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 3,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 4, 5, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, 3, 2, 2, 2, 2, 2, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1,
    ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [1, 10, "rotate", "free", 1, 0.7853981633974483, 1, 0, -1],
      ]);
  } else if ("entChallengeA" === e) {
    a = !0;
    (s = [
      [18, 5, 1, -1, "freeze", 0, 0, !0],
      [18, 4, 1, 3, "halt", 0, 0, !0],
      [18, 3, 1, 3, "halt", 0, 0, !0],
      [18, 2, 1, 3, "halt", 0, 0, !0],
      [18, 1, 1, 3, "halt", 0, 0, !0],
      [18, 0, 1, 3, "halt", 0, 0, !0],
    ]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24,
        22, 25, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64,
        60, 84, 23, 52, 22, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        84, 42, 25, 24, 42, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 54, 40, 26, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 64, 60, 84, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 23, 22, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
        [17, 6, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [16, 6, "switch", "free", 2, 1, 0, 1, -1],
        [16, 5, "cInvert", "free", 0, 1, 0, 0, -1],
        [16, 5, "cInvert", "free", 0, 0, 1, 0, -1],
        [14, 5, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [14, 8, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [13, 6, "switch", "free", 2, 0, 0, 1, -1],
        [13, 7, "switch", "free", 0, 0, 0, 1, -1],
        [13, 5, "measure", "free", 0, 0, 0, 0, -1],
        [13, 5, "measure", "free", 0, 1.57079632679, 1, 0, -1],
        [13, 8, "measure", "free", 0, 0, 0, 0, -1],
        [13, 8, "measure", "free", 0, 1.57079632679, 1, 0, -1],
        [12, 6, "trash", "free", 0, 0.7853981633974483, 0, 0, -1],
        [12, 7, "cCreate", "free", 0, 2, 0, 0, -1],
        [12, 5, "qCombine", "free", 0, 0, 0, 1, -1],
        [12, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 94],
      ]);
  } else if ("entChallengeB" === e) {
    a = !0;
    (s = [[18, 5, 1, -1, "freeze", 0, 0, !0]]), (h = new Entangled(4));
    h.setQubits([
      new Qubit(2, 4, 0, 2, "halt", 0),
      new Qubit(2, 5, 0, 2, "halt", 0),
      new Qubit(2, 8, 0, 2, "halt", 0),
      new Qubit(2, 9, 0, 2, "halt", 0),
    ]);
    d = new Entangled(4);
    d.setQubits([
      new Qubit(1, 4, 0, 2, "halt", 0),
      new Qubit(1, 5, 0, 2, "halt", 0),
      new Qubit(1, 8, 0, 2, "halt", 0),
      new Qubit(1, 9, 0, 2, "halt", 0),
    ]);
    u = new Entangled(4);
    u.setQubits([
      new Qubit(1, 3, 0, 3, "halt", 0),
      new Qubit(0, 5, 0, 2, "halt", 0),
      new Qubit(0, 8, 0, 2, "halt", 0),
      new Qubit(1, 10, 0, 1, "halt", 0),
    ]);
    c = new Entangled(4);
    c.setQubits([
      new Qubit(1, 2, 0, 3, "halt", 0),
      new Qubit(0, 4, 0, 3, "halt", 0),
      new Qubit(0, 9, 0, 1, "halt", 0),
      new Qubit(1, 11, 0, 1, "halt", 0),
    ]);
    I = new Entangled(4);
    I.setQubits([
      new Qubit(1, 1, 0, 3, "halt", 0),
      new Qubit(0, 3, 0, 3, "halt", 0),
      new Qubit(0, 10, 0, 1, "halt", 0),
      new Qubit(1, 12, 0, 1, "halt", 0),
    ]);
    E = new Entangled(4);
    E.setQubits([
      new Qubit(2, 1, 0, 0, "halt", 0),
      new Qubit(0, 2, 0, 3, "halt", 0),
      new Qubit(0, 11, 0, 1, "halt", 0),
      new Qubit(2, 12, 0, 0, "halt", 0),
    ]);
    var g = new Entangled(4);
    g.setQubits([
      new Qubit(2, 2, 0, 1, "halt", 0),
      new Qubit(0, 1, 0, 3, "halt", 0),
      new Qubit(0, 12, 0, 1, "halt", 0),
      new Qubit(2, 11, 0, 3, "halt", 0),
    ]);
    var A = new Entangled(4);
    A.setQubits([
      new Qubit(2, 3, 0, 1, "halt", 0),
      new Qubit(0, 0, 0, 3, "halt", 0),
      new Qubit(0, 13, 0, 1, "halt", 0),
      new Qubit(2, 10, 0, 3, "halt", 0),
    ]);
    (r = [h, d, u, c, I, E, g, A]),
      (n = [
        9, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29,
        1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 4, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 4, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [2, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 5, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 9, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 4, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("entChallengeC" === e) {
    a = !0;
    (s = [[18, 5, 1, -1, "freeze", 0, 0, !0]]), (h = new Entangled(4));
    h.setQubits([
      new Qubit(2, 4, 0, 2, "halt", 0),
      new Qubit(2, 5, 0, 2, "halt", 0),
      new Qubit(2, 8, 0, 2, "halt", 0),
      new Qubit(2, 9, 0, 2, "halt", 0),
    ]);
    d = new Entangled(4);
    d.setQubits([
      new Qubit(1, 4, 0, 2, "halt", 0),
      new Qubit(1, 5, 0, 2, "halt", 0),
      new Qubit(1, 8, 0, 2, "halt", 0),
      new Qubit(1, 9, 0, 2, "halt", 0),
    ]);
    u = new Entangled(4);
    u.setQubits([
      new Qubit(1, 3, 0, 3, "halt", 0),
      new Qubit(0, 5, 0, 2, "halt", 0),
      new Qubit(0, 8, 0, 2, "halt", 0),
      new Qubit(1, 10, 0, 1, "halt", 0),
    ]);
    c = new Entangled(4);
    c.setQubits([
      new Qubit(1, 2, 0, 3, "halt", 0),
      new Qubit(0, 4, 0, 3, "halt", 0),
      new Qubit(0, 9, 0, 1, "halt", 0),
      new Qubit(1, 11, 0, 1, "halt", 0),
    ]);
    I = new Entangled(4);
    I.setQubits([
      new Qubit(1, 1, 0, 3, "halt", 0),
      new Qubit(0, 3, 0, 3, "halt", 0),
      new Qubit(0, 10, 0, 1, "halt", 0),
      new Qubit(1, 12, 0, 1, "halt", 0),
    ]);
    E = new Entangled(4);
    E.setQubits([
      new Qubit(2, 1, 0, 0, "halt", 0),
      new Qubit(0, 2, 0, 3, "halt", 0),
      new Qubit(0, 11, 0, 1, "halt", 0),
      new Qubit(2, 12, 0, 0, "halt", 0),
    ]);
    g = new Entangled(4);
    g.setQubits([
      new Qubit(2, 2, 0, 1, "halt", 0),
      new Qubit(0, 1, 0, 3, "halt", 0),
      new Qubit(0, 12, 0, 1, "halt", 0),
      new Qubit(2, 11, 0, 3, "halt", 0),
    ]);
    A = new Entangled(4);
    A.setQubits([
      new Qubit(2, 3, 0, 1, "halt", 0),
      new Qubit(0, 0, 0, 3, "halt", 0),
      new Qubit(0, 13, 0, 1, "halt", 0),
      new Qubit(2, 10, 0, 3, "halt", 0),
    ]);
    (r = [h, d, u, c, I, E, g, A]),
      (n = [
        9, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29,
        1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, 3, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 4, 2, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 4, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [2, 8, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 5, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 9, "qCombine", "free", 0, 0, 0, 1, -1],
        [2, 4, "qCombine", "free", 0, 0, 0, 1, -1],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("extraA" === e) {
    a = !0;
    (o = [
      [0, 5, 1, 2, "move", -1.5707963267948966, !1],
      [18, 4, 1, 3, "halt", -1.5707963267948966, !0],
      [18, 9, 3, 1, "halt", -1.5707963267948966, !0],
      [0, 4, 1, 3, "move", -1.5707963267948966, !1],
      [18, 3, 1, 3, "halt", -1.5707963267948966, !0],
      [18, 10, 3, 1, "halt", -1.5707963267948966, !0],
      [0, 3, 1, 3, "move", -1.5707963267948966, !1],
      [18, 2, 1, 3, "halt", -1.5707963267948966, !0],
      [18, 11, 3, 1, "halt", -1.5707963267948966, !0],
      [0, 2, 1, 3, "move", -1.5707963267948966, !1],
      [18, 1, 1, 3, "halt", 3.141592653589793, !0],
      [18, 12, 3, 1, "halt", 3.141592653589793, !0],
      [0, 1, 1, 3, "move", 3.141592653589793, !1],
      [18, 0, 0, 3, "halt", 3.141592653589793, !0],
      [18, 13, 0, 1, "halt", 3.141592653589793, !0],
      [0, 0, 2, 3, "move", 3.141592653589793, !1],
      [17, 0, 0, 2, "halt", 3.141592653589793, !0],
      [17, 13, 0, 2, "halt", 3.141592653589793, !0],
      [1, 0, 2, 0, "move", 3.141592653589793, !1],
      [16, 0, 0, 2, "halt", 3.141592653589793, !0],
      [16, 13, 0, 2, "halt", 3.141592653589793, !0],
      [2, 0, 2, 0, "move", 3.141592653589793, !1],
    ]),
      (s = []),
      (n = [
        4, 2, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 2, 5,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 2, 6,
      ]),
      (l = [
        [18, 5, "qCompare", "free", 0, -1.570796326795, 0, 2, -1],
        [18, 8, "qCompare", "free", 1, -1.570796326795, 0, 4, -1],
        [16, 0, "qCreate", "free", 0, 0, 0, 2, 492],
        [16, 13, "qCreate", "free", 0, 0, 0, 2, 492],
        [2, 0, "qCreate", "free", 2, 0, 0, 1, 492],
      ]);
  } else if ("extraB" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1,
        -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 85, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [0, 5, "qDubCompare", "free", 0, 2, 0, 1, -1],
        [18, 5, "qDubCompare", "free", 0, 0, 0, 1, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, 496],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.570796326795, 0, 0, -2],
        [1, 13, "upgrade", "free", 0, 0.39269908169, 0, 1, -1],
        [0, 13, "cCreate", "free", 0, 0, 0, 0, 496],
        [9, 12, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 11, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 10, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 9, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 8, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 7, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 6, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 5, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 4, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 3, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 2, "cInvert", "free", 0, 1, 0, 0, -1],
        [9, 1, "cInvert", "free", 0, 1, 0, 0, -1],
      ]);
  } else if ("extraC" === e) {
    a = !0;
    (o = []),
      (s = [
        [18, 5, 1, 4, "move", 0, 0, !0],
        [0, 5, 1, 2, "move", 0, 0, !1],
        [0, 8, 3, 2, "move", 1, 0, !1],
        [18, 4, 1, 3, "halt", 1, 0, !0],
        [0, 4, 1, 3, "move", 1, 0, !1],
        [0, 9, 3, 1, "move", 1, 0, !1],
        [18, 3, 1, 3, "halt", 0, 0, !0],
        [0, 3, 1, 3, "move", 1, 0, !1],
        [0, 10, 3, 1, "move", 1, 0, !1],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 11, 3, 1, "move", 0, 0, !1],
        [18, 1, 1, 3, "halt", 0, 0, !0],
        [18, 0, 0, 3, "halt", 1, 0, !0],
        [17, 0, 0, 2, "halt", 1, 0, !0],
        [16, 0, 0, 2, "halt", 0, 0, !0],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 22, 22, 22, 22,
        25, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        [13, 0, "cCreate", "free", 0, 2, 0, 2, 0],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 0],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 0],
      ]);
  } else if ("binaryencode" === e) {
    a = !0;
    (o = []),
      (s = [
        [0, 5, 1, 2, "move", 0, 0, !1],
        [18, 5, 1, -1, "freeze", 0, 0, !0],
        [0, 4, 1, 3, "halt", 0, 0, !1],
        [18, 4, 1, 3, "halt", 2, 0, !0],
        [0, 3, 1, 3, "halt", 0, 0, !1],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [0, 2, 1, 3, "halt", 0, 0, !1],
        [18, 2, 1, 3, "halt", 3, 0, !0],
        [0, 1, 1, 3, "halt", 0, 0, !1],
        [0, 0, 1, 3, "halt", 0, 0, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "free", 0, 0.785398163397, 0, 2, -1],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 20],
        [18, 0, "cCreate", "free", 1, 1, 0, 2, -1],
      ]);
  } else if ("adder" === e) {
    a = !0;
    (o = []),
      (s = [
        [18, 5, 1, 4, "move", 1, 0, !0],
        [0, 5, 1, 2, "move", 1, 0, !1],
        [0, 8, 3, 2, "move", 0, 0, !1],
        [18, 4, 1, 3, "halt", 1, 0, !0],
        [0, 4, 1, 3, "move", 0, 0, !1],
        [0, 9, 3, 1, "move", 1, 0, !1],
        [18, 3, 1, 3, "halt", 1, 0, !0],
        [0, 3, 1, 3, "move", 0, 0, !1],
        [0, 10, 3, 1, "move", 1, 0, !1],
        [18, 2, 1, 3, "halt", 0, 0, !0],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 11, 3, 1, "move", 1, 0, !1],
        [18, 1, 1, 3, "halt", 1, 0, !0],
        [0, 1, 1, 3, "move", 0, 0, !1],
        [0, 12, 3, 1, "move", 0, 0, !1],
        [18, 0, 1, 3, "halt", 1, 0, !0],
        [0, 0, 1, 3, "move", 0, 0, !1],
        [0, 13, 3, 1, "move", 1, 0, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "transform", 0, 0.785398163397, 0, 2, -1],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 58],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 58],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 58],
      ]);
  } else if ("extraD" === e) {
    a = !0;
    (o = []),
      (s = [
        [18, 5, 1, 4, "move", 1, 0, !0],
        [0, 8, 3, 2, "move", 1, 0, !1],
        [0, 5, 1, 2, "move", 0, 0, !1],
        [0, 9, 3, 1, "move", 1, 0, !1],
        [0, 4, 1, 3, "move", 0, 0, !1],
        [0, 10, 3, 1, "move", 0, 0, !1],
        [0, 3, 1, 3, "move", 0, 0, !1],
        [0, 11, 3, 1, "move", 0, 0, !1],
        [0, 2, 1, 3, "move", 1, 0, !1],
        [0, 12, 3, 1, "move", 1, 0, !1],
        [0, 1, 1, 3, "move", 0, 0, !1],
        [0, 13, 3, 1, "move", 1, 0, !1],
        [0, 0, 1, 3, "move", 1, 0, !1],
      ]),
      (n = [
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1,
        55, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [18, 5, "compare", "transform", 0, 0.785398163397, 0, 2, -1],
        [0, 13, "cCreate", "free", 3, 1, 0, 1, 9],
        [0, 0, "cCreate", "free", 1, 0, 0, 1, 100],
        [18, 0, "cCreate", "free", 1, 2, 0, 2, 0],
      ]);
  } else if ("chsh" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    I = new Entangled(2);
    I.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    E = new Entangled(2);
    E.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, I, E]),
      (n = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 91, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 21, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 53, 84, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 53, 41, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 22, 22, 22, 26, 21, 23, 22, 22,
        22, 22, 25, -1, -1, -1, -1, -1, -1, 21, -1, 84, -1, -1, -1, 53, 84, -1,
        -1, 84, -1, 21, -1, -1, -1, -1, -1, -1, 47, 22, 61, -1, -1, -1, 53, 41,
        -1, -1, 61, 22, 47, -1, -1, -1, -1, -1, -1, 21, -1, 1, 84, -1, 24, 26,
        21, -1, 84, 1, -1, 21, -1, -1, -1, -1, -1, 84, 60, 2, 67, 41, -1, 21,
        -1, 21, -1, 43, 67, 2, 60, 84, -1, -1, -1, -1, -1, -1, -1, 1, 23, 22,
        51, -1, 51, 22, 26, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
        -1, 90, -1, 90, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        -1, -1, 57, -1, 57, -1, -1, 1, -1, -1, -1, -1, -1, -1, 74, 70, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 68, 76, -1,
      ]),
      (l = [
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, 1.570796326795, 0, 0, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
        [8, 12, "cCreate", "free", 3, 2, 0, 0, -1],
        [10, 12, "cCreate", "free", 3, 2, 0, 0, -1],
        [5, 6, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [3, 7, "cCombine", "free", 3, 0, 0, 0, -1],
        [5, 7, "measure", "free", 1, 0, 0, 0, -1],
        [2, 9, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [3, 9, "measure", "free", 0, 0, 0, 0, -1],
        [5, 9, "qCombine", "free", 3, 0, 0, 0, -1],
        [5, 9, "qCombine", "free", 2, 0, 1, 0, -1],
        [6, 9, "switch", "free", 1, 0, 0, 1, -1],
        [13, 6, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [13, 7, "measure", "free", 1, 0, 0, 0, -1],
        [15, 7, "cCombine", "free", 3, 0, 0, 0, -1],
        [12, 9, "switch", "free", 3, 0, 0, 1, -1],
        [13, 9, "qCombine", "free", 3, 0, 0, 0, -1],
        [13, 9, "qCombine", "free", 0, 0, 1, 0, -1],
        [15, 9, "measure", "free", 0, 0, 0, 0, -1],
        [16, 9, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [8, 11, "delay", "free", 1, 0, 0, 4, -1],
        [10, 11, "delay", "free", 1, 0, 0, 4, -1],
        [8, 10, "cSplit", "free", 3, 0, 0, 0, -1],
        [10, 10, "cSplit", "free", 3, 0, 0, 0, -1],
        [12, 8, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [6, 8, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [9, 7, "cInvert", "free", 1, 0, 0, 1, -1],
        [9, 7, "cInvert", "free", 1, 1, 1, 1, -1],
        [10, 7, "switch", "free", 1, 0, 0, 1, -1],
        [10, 6, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [10, 4, "switch", "free", 1, 1, 0, 1, -1],
        [8, 3, "switch", "free", 3, 1, 0, 1, -1],
        [10, 3, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [8, 2, "trash", "free", 0, 0.785398163397, 0, 0, -1],
        [9, 4, "cInvert", "free", 1, 1, 0, 0, -1],
        [9, 4, "cInvert", "free", 1, 0, 1, 0, -1],
        [9, 3, "cInvert", "free", 1, 1, 0, 0, -1],
        [9, 3, "cInvert", "free", 1, 0, 1, 0, -1],
        [9, 6, "cInvert", "free", 1, 0, 0, 0, -1],
        [10, 1, "cOneCompare", "free", 0, 0, 0, 0, 0],
      ]);
  } else if ("freeA" === e) {
    a = !0;
    (o = []),
      (s = []),
      (n = [
        4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 76, 55, 1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        21, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]),
      (l = [
        [17, 0, "qCreate", "free", 2, 0, 0, 1, 1580],
        [18, 0, "cCreate", "free", 1, 0, 0, 2, 395],
        [18, 5, "compare", "free", 0, 0.7853981633974483, 0, 2, -1],
      ]);
  } else if ("freeB" === e) {
    a = !0;
    h = new Entangled(2);
    h.setQubits([
      new Qubit(5, 13, 0, 1, "halt", 0),
      new Qubit(13, 13, 0, 1, "halt", 0),
    ]);
    d = new Entangled(2);
    d.setQubits([
      new Qubit(4, 13, 0, 2, "halt", 0),
      new Qubit(14, 13, 0, 0, "halt", 0),
    ]);
    u = new Entangled(2);
    u.setQubits([
      new Qubit(3, 13, 0, 2, "halt", 0),
      new Qubit(15, 13, 0, 0, "halt", 0),
    ]);
    c = new Entangled(2);
    c.setQubits([
      new Qubit(2, 13, 0, 2, "halt", 0),
      new Qubit(16, 13, 0, 0, "halt", 0),
    ]);
    (r = [h, d, u, c]),
      (n = [
        75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        75, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 6,
        -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 2, 2, -1,
      ]),
      (l = [
        [0, 5, "qDubCompare", "free", 0, 2, 0, 1, -1],
        [18, 5, "qDubCompare", "free", 0, 0, 0, 1, -1],
        [2, 13, "qControl", "free", 0, 0, 0, 2, -2],
        [16, 13, "qFlip", "free", 0, Math.PI / 2, 0, 0, -2],
        [1, 13, "qCreate", "free", 0, 3, 0, 0, -1],
        [17, 13, "qCreate", "free", 2, 0, 0, 0, -1],
      ]);
  } else if ("freeC" === e) {
    a = !0;
    (s = []), (o = []), (n = new Array(266).fill(-1)), (l = []);
  }
  return (
    !!a && { tiles: n, allBits: s, allQubits: o, allGates: l, entGroups: r }
  );
}
